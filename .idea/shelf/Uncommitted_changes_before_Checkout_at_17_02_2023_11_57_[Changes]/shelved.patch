Index: app/src/main/java/web/browser/dragon/ui/browser/BrowserActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.browser\r\n\r\n\r\nimport android.app.Activity\r\nimport android.content.*\r\nimport android.content.pm.ActivityInfo\r\nimport android.content.pm.ResolveInfo\r\nimport android.content.res.Configuration\r\nimport android.graphics.Bitmap\r\nimport android.graphics.Canvas\r\nimport android.net.Uri\r\nimport android.net.http.SslError\r\nimport android.os.*\r\nimport android.provider.MediaStore\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.view.View.GONE\r\nimport android.view.View.OnSystemUiVisibilityChangeListener\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.webkit.*\r\nimport android.webkit.WebView.HitTestResult\r\nimport android.widget.*\r\nimport androidx.activity.viewModels\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.content.edit\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\nimport androidx.core.view.WindowInsetsControllerCompat\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.gms.tasks.Tasks\r\nimport kotlinx.android.synthetic.main.activity_browser3.*\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport kotlinx.android.synthetic.main.content_scrolling.*\r\nimport kotlinx.coroutines.*\r\nimport org.json.JSONArray\r\nimport timber.log.Timber\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.WebBrowserDragon\r\nimport web.browser.dragon.database.bookmarks.BookmarksViewModel\r\nimport web.browser.dragon.database.bookmarks.BookmarksViewModelFactory\r\nimport web.browser.dragon.database.browser.BrowserViewModel\r\nimport web.browser.dragon.database.downloads.DownloadModelsViewModel\r\nimport web.browser.dragon.database.downloads.DownloadModelsViewModelFactory\r\nimport web.browser.dragon.database.history.HistoryRecordsViewModel\r\nimport web.browser.dragon.database.history.HistoryRecordsViewModelFactory\r\nimport web.browser.dragon.model.*\r\nimport web.browser.dragon.ui.downloads.DownloadsActivity\r\nimport web.browser.dragon.ui.history.HistoryRecordsActivity\r\nimport web.browser.dragon.ui.home.HomeActivity\r\nimport web.browser.dragon.ui.settings.SettingsActivity\r\nimport web.browser.dragon.ui.tabs.TabsActivity\r\nimport web.browser.dragon.utils.*\r\nimport web.browser.dragon.utils.Constants.CheckUrl.NEWEST_URL_START\r\nimport web.browser.dragon.utils.file.getMimeType\r\nimport web.browser.dragon.utils.file.getStringSizeLengthFile\r\nimport web.browser.dragon.utils.ogparser.OpenGraphCallback\r\nimport web.browser.dragon.utils.ogparser.OpenGraphParser\r\nimport web.browser.dragon.utils.other.unit.BrowserUnit\r\nimport web.browser.dragon.utils.settings.getSettings\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\nimport java.io.IOException\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.nio.charset.StandardCharsets.UTF_8\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.Callable\r\nimport java.util.concurrent.Executor\r\nimport java.util.concurrent.Executors\r\n\r\n\r\nopen class BrowserActivity : AppCompatActivity(), OpenGraphCallback {\r\n\r\n    private var lastUrl: String? = null\r\n    private var currentCount: Int = 0\r\n\r\n    private var currentLanguage: String? = null\r\n\r\n    private var timer: CountDownTimer? = null\r\n\r\n    private var thread: Thread? = null\r\n    private var links: List<String> = listOf()\r\n    private var isSearch = false\r\n    private var isRedirected = false\r\n\r\n    companion object {\r\n        fun newIntent(\r\n            context: Context,\r\n            url: String? = null,\r\n            isFromTabs: Boolean = false,\r\n            countTab: Int? = null,\r\n            isSiteAvailability: Boolean = false,\r\n        ): Intent {\r\n            val intent = Intent(context, BrowserActivity::class.java)\r\n            intent.putExtra(EXTRA_URL, url)\r\n            intent.putExtra(FROM_TABS, isFromTabs)\r\n            intent.putExtra(COUNT_TAB, countTab)\r\n            intent.putExtra(SITE_AVAILABILITY, isSiteAvailability)\r\n            return intent\r\n        }\r\n\r\n        const val EXTRA_URL = \"extra_url\"\r\n        const val FROM_TABS = \"from_tabs\"\r\n        const val COUNT_TAB = \"count_tab\"\r\n        const val SITE_AVAILABILITY = \"siteAvailability\"\r\n\r\n    }\r\n\r\n    private val bookmarksViewModel: BookmarksViewModel by viewModels {\r\n        BookmarksViewModelFactory((this.application as WebBrowserDragon).bookmarksRepository)\r\n    }\r\n    private val historyRecordsViewModel: HistoryRecordsViewModel by viewModels {\r\n        HistoryRecordsViewModelFactory((this.application as WebBrowserDragon).historyRecordsRepository)\r\n    }\r\n    private val downloadsViewModel: DownloadModelsViewModel by viewModels {\r\n        DownloadModelsViewModelFactory((this.application as WebBrowserDragon).downloadsRepository)\r\n    }\r\n    private val browserViewModel: BrowserViewModel by viewModels ()\r\n\r\n    private val INPUT_FILE_REQUEST_CODE = 1\r\n    private val FILECHOOSER_RESULTCODE = 1\r\n\r\n    private var mUploadMessage: ValueCallback<Uri>? = null\r\n    private var mCapturedImageURI: Uri? = null\r\n    private var mFilePathCallback: ValueCallback<Array<Uri>>? = null\r\n    private var mCameraPhotoPath: String? = null\r\n    private var initialUrl: String? = null\r\n    private var isFromTabs: Boolean = false\r\n    private var countTab: Int = 0\r\n    private var isSiteAvailability: Boolean = false\r\n    private var currentUrl = \"\"\r\n    private var webPageBitmap: Bitmap? = null\r\n\r\n    private val nameTabs = \"tabs\"\r\n    private val nameTabsOfIncognito = \"tabs_incognito\"\r\n\r\n    private var currentTabs = mutableListOf<String>()\r\n\r\n    private var oldScrollY = 0\r\n\r\n    private var requestToWeb: String? = null\r\n\r\n\r\n    override fun onWindowFocusChanged(hasFocus: Boolean) {\r\n        super.onWindowFocusChanged(hasFocus)\r\n        val windowInsetsController =\r\n            ViewCompat.getWindowInsetsController(window.decorView) ?: return\r\n        windowInsetsController.systemBarsBehavior =\r\n            WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE\r\n        windowInsetsController.hide(WindowInsetsCompat.Type.systemBars())\r\n    }\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_browser3)\r\n\r\n\r\n        if (savedInstanceState == null) {\r\n            for (item in getSharedPreferences(\r\n                if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,\r\n                Context.MODE_PRIVATE\r\n            ).all) {\r\n                currentTabs.add(item.toString())\r\n            }\r\n            b_tabs.text = currentTabs.size.toString()\r\n\r\n            currentLanguage = getSharedPreferences(\r\n                Constants.Settings.SETTINGS_LANGUAGE,\r\n                Context.MODE_PRIVATE\r\n            ).getString(\r\n                Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n            )\r\n\r\n            initialUrl =\r\n                if (intent.data == null) intent.getStringExtra(EXTRA_URL) else intent.dataString\r\n            isFromTabs = intent.getBooleanExtra(FROM_TABS, false)\r\n            countTab = intent.getIntExtra(COUNT_TAB, 0)\r\n            isSiteAvailability = if (intent.dataString == null) intent.getBooleanExtra(\r\n                SITE_AVAILABILITY,\r\n                false\r\n            ) else true\r\n            requestToWeb = initialUrl\r\n\r\n            browserViewModel.links.observe(this, androidx.lifecycle.Observer {\r\n                links = it\r\n            })\r\n\r\n            setWebView()\r\n            setOnClickListeners()\r\n            setOnActionListeners()\r\n            incognitoMode()\r\n\r\n            swipeToRefresh.setOnRefreshListener {\r\n                webView.reload()\r\n                swipeToRefresh.isRefreshing = false\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun incognitoMode() {\r\n        if (isIncognitoMode(this)) {\r\n            onIncognitoMode()\r\n        } else {\r\n            offIncognitoMode()\r\n        }\r\n    }\r\n\r\n    private fun newestUrlAndCheckUrl(url: String): String {\r\n        if (url.contains(\"redirect=false\")) return url\r\n        val chaptersUrl = url.split(\"//\")\r\n        lastUrl = if (chaptersUrl.size > 1) \"${url.split(\"//\")[1].split(\"/\")[0]}\"\r\n        else url\r\n        //if (checkUrl(lastUrl!!)) {\r\n        //            val urlWithRedirect =\r\n        //                Uri.parse(url).buildUpon().appendQueryParameter(\"redirect\", \"false\").build()\r\n        //                    .toString()\r\n        //            val encodedUrl = Uri.encode(urlWithRedirect)\r\n        //            return NEWEST_URL_START + encodedUrl + NEWEST_URL_END\r\n        //        }\r\n        /** старый метод оборачивания ссылок из локального списка компаний, не используется\r\n         */\r\n        return url\r\n    }\r\n\r\n    /** не используется, т.к аффилиатные ссылки получаются из API\r\n     */\r\n    private fun checkUrl(lastUrl: String): Boolean {\r\n        val jsonArray = JSONArray(loadJSONFile())//\r\n        for (i in 0 until jsonArray.length()) {\r\n            val jsonObject = jsonArray.getJSONObject(i)\r\n            val domains = jsonObject.getJSONArray(\"domains\")\r\n            jsonObject.putOpt(\"Authorization\", \"abd6b5a0e0342a61f531fc2ca293760e16c9f0a8\")\r\n            for (domain in 0 until domains.length()) {\r\n                if (domains[domain] == lastUrl || domains[domain] == lastUrl.replace(\r\n                        \"m.\",\r\n                        \"\"\r\n                    )\r\n                ) return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    /** не используется, т.к аффилиатные ссылки получаются из API\r\n     */\r\n    private fun loadJSONFile(): String? {\r\n        var json: String? = null\r\n        json = try {\r\n            val inputStream = assets.open(\"getAffPrograms.json\")\r\n            val size = inputStream.available()\r\n            val byteArray = ByteArray(size)\r\n            inputStream.read(byteArray)\r\n            inputStream.close()\r\n            String(byteArray, UTF_8)\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n        return json\r\n    }\r\n\r\n    private fun onIncognitoMode() {\r\n        b_tabs.isSelected = true\r\n        cl_main_bar_browser.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_buttons.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        iv_skip_back.setColorFilter(ContextCompat.getColor(this, R.color.grey_2))\r\n        iv_skip_forward.setColorFilter(ContextCompat.getColor(this, R.color.grey_2))\r\n        iv_add_browser.setImageResource(R.drawable.ic_add_tab_incognito)\r\n    }\r\n\r\n    private fun offIncognitoMode() {\r\n        b_tabs.isSelected = false\r\n\r\n        cl_buttons.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        iv_skip_back.setColorFilter(ContextCompat.getColor(this, R.color.black))\r\n        iv_skip_forward.setColorFilter(ContextCompat.getColor(this, R.color.black))\r\n        iv_add_browser.setImageResource(R.drawable.ic_add_tab)\r\n\r\n        if (onCheckTheme(this)) {\r\n            cl_main_bar_browser.setBackgroundColor(\r\n                ContextCompat.getColor(\r\n                    this,\r\n                    R.color.incognito_dark\r\n                )\r\n            )\r\n        } else {\r\n            cl_main_bar_browser.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        currentTabs.clear()\r\n        for (item in getSharedPreferences(\r\n            if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,\r\n            Context.MODE_PRIVATE\r\n        ).all) {\r\n            currentTabs.add(item.toString())\r\n        }\r\n        b_tabs.text = currentTabs.size.toString()\r\n\r\n        updateSettings()\r\n        incognitoMode()\r\n\r\n        val newestLanguage = getSharedPreferences(\r\n            Constants.Settings.SETTINGS_LANGUAGE,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n        )\r\n        if (currentLanguage == null) currentLanguage = getSharedPreferences(\r\n            Constants.Settings.SETTINGS_LANGUAGE,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n        )\r\n        if (currentLanguage != newestLanguage) {\r\n            recreate()\r\n\r\n        }\r\n    }\r\n\r\n    private fun setOnActionListeners() {\r\n        et_search_field?.setOnEditorActionListener { view, actionId, _ ->\r\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                val inputManager = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\r\n                inputManager.hideSoftInputFromWindow(view.windowToken, 0)\r\n                onSearchClicked()\r\n                return@setOnEditorActionListener true\r\n            }\r\n            false\r\n        }\r\n    }\r\n\r\n    private fun updateSettings() {\r\n        val webSettings = webView?.settings\r\n        webSettings?.javaScriptEnabled = getSettings(this)?.enableJavaScript ?: true\r\n        webSettings?.domStorageEnabled = true\r\n        webSettings?.allowFileAccess = true\r\n        webSettings?.blockNetworkImage = getSettings(this)?.withoutImages ?: false\r\n        webSettings?.loadsImagesAutomatically = true\r\n    }\r\n\r\n    private fun getUserAgent(): String? {\r\n        return getSharedPreferences(\r\n            Constants.Settings.SETTINGS_USER_AGENT,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_USER_AGENT, null\r\n        )\r\n    }\r\n\r\n    private fun setWebView() {\r\n        updateSettings()\r\n\r\n        webView.settings.userAgentString = Constants.Search.USER_AGENT\r\n        webView.settings.userAgentString = webView.settings.userAgentString.replace(\"; wv)\", \")\");\r\n        webView.settings.loadWithOverviewMode = true;\r\n        webView.settings.useWideViewPort = true;\r\n        webView.settings.allowFileAccess = true;\r\n        webView.settings.allowContentAccess = true;\r\n        webView.settings.domStorageEnabled = true;\r\n        webView.setLayerType(View.LAYER_TYPE_HARDWARE, null)\r\n        webView.requestFocus();\r\n\r\n        webView.settings.domStorageEnabled = true\r\n        webView.settings.javaScriptCanOpenWindowsAutomatically\r\n\r\n\r\n        webView.settings.cacheMode = WebSettings.LOAD_NO_CACHE\r\n\r\n        webView.settings.builtInZoomControls = true\r\n        webView.settings.displayZoomControls = false\r\n        webView.settings.loadWithOverviewMode = true\r\n        webView.settings.useWideViewPort = true\r\n        webView.settings.defaultZoom = WebSettings.ZoomDensity.FAR\r\n        webView.scrollBarStyle = View.SCROLLBARS_INSIDE_OVERLAY\r\n\r\n\r\n        if (getUserAgent() != null) {\r\n            webView?.settings!!.userAgentString = getUserAgent()\r\n        }\r\n\r\n        if (isIncognitoMode(this@BrowserActivity)) {\r\n\r\n            CookieManager.getInstance().setAcceptCookie(false)\r\n\r\n            webView?.settings!!.cacheMode = WebSettings.LOAD_NO_CACHE\r\n            webView?.settings!!.setAppCacheEnabled(false)\r\n            webView?.clearHistory()\r\n            webView?.clearCache(true)\r\n\r\n            webView?.clearFormData()\r\n            webView?.settings!!.savePassword = false\r\n            webView?.settings!!.saveFormData = false\r\n        }\r\n\r\n        webView?.webViewClient = object : WebViewClient() {\r\n\r\n                    override fun shouldOverrideUrlLoading(\r\n                        view: WebView,\r\n                        request: WebResourceRequest,\r\n                    ): Boolean {\r\n                        if (!request.url.toString()\r\n                                .startsWith(\"https://m.youtube\") && !request.url.toString()\r\n                                .startsWith(\"https://youtube\") && !request.url.toString()\r\n                                .startsWith(\"https://m.facebook.com\") && !request.url.toString()\r\n                                .startsWith(\"https://facebook.com\") && !request.url.toString()\r\n                                .startsWith(\"https://market.android.com/details?id=\") && !request.url.toString()\r\n                                .startsWith(\"https://play.google.com/store/\") && !request.url.toString()\r\n                                .startsWith(\"https://m.facebook.com\") && !request.url.toString()\r\n                                .startsWith(\"https://www.facebook.com\") && !request.url.toString()\r\n                                .startsWith(\"https://t.me\") && request.url.toString()\r\n                                .startsWith(\"https\")\r\n                        ) {\r\n                            view.settings.loadWithOverviewMode = true\r\n                            view.settings.useWideViewPort = true\r\n                            view.settings.javaScriptEnabled = true\r\n                            view.settings.builtInZoomControls = true\r\n                            view.loadUrl(getAffLink(request.url.toString()))\r\n                            return false\r\n                        } else {\r\n                            return try {\r\n                                val browserIntent =\r\n                                    Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.google.com\"))\r\n                                browserIntent.data = Uri.parse(request.url.toString())\r\n                                (request.url.toString().startsWith(\"https://t.me\"))\r\n                                (request.url.toString().startsWith(\"https://m.youtube.com\"))\r\n                                (request.url.toString().startsWith(\"https://m.facebook.com\"))\r\n                                (request.url.toString().startsWith(\"https://m.facebook\"))\r\n                                (request.url.toString().startsWith(\"https://facebook\"))\r\n                                (request.url.toString().startsWith(\"https://facebook.com\"))\r\n                                (request.url.toString().startsWith(\"https://m.youtube\"))\r\n                                val packageManager = packageManager\r\n\r\n\r\n                                val host = webView?.context as Activity\r\n\r\n                                if (intent.resolveActivity(packageManager) == null) false\r\n                                else {\r\n                                    host.startActivity(browserIntent)\r\n                                    true\r\n                                }\r\n                            } catch (e: ActivityNotFoundException) {\r\n                                false\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //            Для старых устройств\r\n                    override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {\r\n                        if (!url.toString().startsWith(\"https://m.youtube\") && !url.toString()\r\n                                .startsWith(\"https://youtube\") && !url.toString()\r\n                                .startsWith(\"https://m.facebook.com\") && !url.toString()\r\n                                .startsWith(\"https://facebook.com\") && !url.toString()\r\n                                .startsWith(\"https://facebook\") && !url.toString()\r\n                                .startsWith(\"https://market.android.com/details?id=\") && !url.toString()\r\n                                .startsWith(\"https://play.google.com/store/\") && !url.toString()\r\n                                .startsWith(\"https://t.me\")\r\n                        ) {\r\n\r\n                            return false\r\n                        } else {\r\n                            return try {\r\n\r\n                                val browserIntent =\r\n                                    Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.google.com\"))\r\n                                browserIntent.data = Uri.parse(url.toString())\r\n                                (url.startsWith(\"https://t.me\"))\r\n                                (url.startsWith(\"https://m.facebook.com\"))\r\n                                (url.startsWith(\"https://m.youtube.com\"))\r\n                                (url.startsWith(\"https://m.youtube\"))\r\n\r\n                                val packageManager = packageManager\r\n                                val resolvedActivities: MutableList<ResolveInfo?> =\r\n                                    packageManager.queryIntentActivities(browserIntent, 0)\r\n\r\n                                val host = webView?.context as Activity\r\n                                if (resolvedActivities == null) false\r\n                                else {\r\n                                    host.startActivity(browserIntent)\r\n                                    true\r\n                                }\r\n\r\n                            } catch (e: ActivityNotFoundException) {\r\n                                false\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                    override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {\r\n                        super.onPageStarted(view, url, favicon)\r\n                        webView.visibility = View.INVISIBLE\r\n                        Log.d(\"onPageStarted\", url.toString())\r\n                        if (thread != null && !thread!!.isInterrupted) thread!!.interrupt()\r\n\r\n                        getSharedPreferences(\r\n                            if (!isIncognitoMode(this@BrowserActivity)) nameTabs else nameTabsOfIncognito,\r\n                            Context.MODE_PRIVATE\r\n                        ).edit {\r\n                            this.putString(\r\n                                currentCount.toString(),\r\n                                \"$url/////?$currentCount/////?${view!!.title}\"\r\n                            )\r\n                        }\r\n                        Log.d(\"newestUrlAndCheckUrlStarted\", url.toString())\r\n                        val newestUrlAndCheckUrl = newestUrlAndCheckUrl(url!!)\r\n                        if (url != newestUrlAndCheckUrl) {\r\n                            view!!.loadUrl(newestUrlAndCheckUrl)\r\n                        }\r\n                        Log.d(\"newestUrlAndCheckUrlEnded\", url.toString())\r\n\r\n                        if (!isIncognitoMode(this@BrowserActivity) && !url.contains(\"lalala.de\")) {\r\n                            historyRecordsViewModel.insert(\r\n                                HistoryRecord(\r\n                                    System.currentTimeMillis() / 1000,\r\n                                    url,\r\n                                    \"\"\r\n                                )\r\n                            )\r\n                        }\r\n\r\n                        currentUrl = url\r\n                        pb_loading?.visibility = View.VISIBLE\r\n\r\n                        if (url.isNotEmpty()) {\r\n                            et_search_field?.setText(url)\r\n                            requestToWeb = url\r\n                        }\r\n                    }\r\n\r\n                    override fun onReceivedError(\r\n                        view: WebView?,\r\n                        request: WebResourceRequest?,\r\n                        error: WebResourceError?,\r\n                    ) {\r\n\r\n                        super.onReceivedError(view, request, error)\r\n                        pb_loading?.visibility = GONE\r\n                    }\r\n\r\n                    override fun onReceivedHttpError(\r\n                        view: WebView?,\r\n                        request: WebResourceRequest?,\r\n                        errorResponse: WebResourceResponse?,\r\n                    ) {\r\n                        super.onReceivedHttpError(view, request, errorResponse)\r\n                        Log.d(\"onReceivedHttpError\", errorResponse.toString())\r\n                        pb_loading?.visibility = GONE\r\n                    }\r\n\r\n                    override fun onReceivedSslError(\r\n                        view: WebView?,\r\n                        handler: SslErrorHandler?,\r\n                        error: SslError?,\r\n                    ) {\r\n                        super.onReceivedSslError(view, handler, error)\r\n                        Log.d(\"onReceivedSslError\", error.toString())\r\n                        pb_loading?.visibility = GONE\r\n                    }\r\n\r\n                    override fun onPageCommitVisible(view: WebView?, url: String?) {\r\n                        Log.d(\"onPageCommitVisible\", url.toString())\r\n                        super.onPageCommitVisible(view, url)\r\n                    }\r\n\r\n\r\n                    override fun onPageFinished(view: WebView, url: String) {\r\n                        super.onPageFinished(view, url)\r\n\r\n                        Log.d(\"onPageFinished\", url)\r\n\r\n                        if (!isIncognitoMode(this@BrowserActivity)) {\r\n                            CookieManager.getInstance().setAcceptCookie(true)\r\n                            CookieManager.getInstance().acceptCookie()\r\n                            CookieManager.getInstance().flush()\r\n                        }\r\n                        Timber.d(\"TAG_PAGE_FINISHED_1\")\r\n\r\n                        if (webView?.canGoForward() == true) {\r\n                            Timber.d(\"TAG_PAGE_FINISHED_4\")\r\n\r\n                            iv_skip_forward?.setImageResource(R.drawable.ic_skip_forward_enabled)\r\n                        } else {\r\n                            Timber.d(\"TAG_PAGE_FINISHED_5\")\r\n                            iv_skip_forward?.setImageResource(R.drawable.ic_skip_forward_disabled)\r\n                        }\r\n\r\n                        if (getSettings(this@BrowserActivity)?.enableColorMode == true) {\r\n                            /**\r\n                             * Ещё не внедрено. Можно использовать метод changeToolbarBackground() из Lightning-Browser\r\n                             * **/\r\n                        }\r\n//                        view.loadUrl(\"javascript:\" +\r\n//                                \"var links = document.querySelectorAll('a');\" +\r\n//                                \"for(let link of links) {\" +\r\n//                                \"if(link.href.includes('https://www.w3schools.com')) {\" +\r\n//                                \"link.href = 'www'+ link.href}}\")\r\n                        /** можно менять ссылки в результатах поиска и по этому методу, черех JS скрипт\r\n                         * */\r\n                    }\r\n                }\r\n\r\n        webView.settings.allowFileAccess = true\r\n        webView.settings.mixedContentMode = 0\r\n        webView.settings.javaScriptEnabled = true\r\n        webView.settings.javaScriptCanOpenWindowsAutomatically = true\r\n        webView?.webChromeClient = object : WebChromeClient() {\r\n\r\n                    private var customView: View? = null\r\n                    private var customViewCallback: CustomViewCallback? = null\r\n                    private var originalOrientation = 0\r\n                    private var mOriginalSystemUiVisibility = 0\r\n\r\n                    private val FULL_SCREEN_SETTING = View.SYSTEM_UI_FLAG_FULLSCREEN or\r\n                            View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or\r\n                            View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or\r\n                            View.SYSTEM_UI_FLAG_LAYOUT_STABLE or\r\n                            View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or\r\n                            View.SYSTEM_UI_FLAG_IMMERSIVE\r\n\r\n\r\n            override fun onJsAlert(\r\n                view: WebView?,\r\n                url: String?,\r\n                message: String?,\r\n                result: JsResult?,\r\n            ): Boolean {\r\n                return super.onJsAlert(view, url, message, result)\r\n            }\r\n\r\n\r\n                    override fun onShowCustomView(view: View?, callback: CustomViewCallback?) {\r\n                        super.onShowCustomView(view, callback)\r\n\r\n                        if (this.customView != null) {\r\n                            onHideCustomView()\r\n                            return\r\n                        }\r\n\r\n                        customView = view\r\n                        mOriginalSystemUiVisibility = window.decorView.systemUiVisibility\r\n                        originalOrientation = requestedOrientation\r\n                        customViewCallback = callback\r\n                        (window\r\n                            .decorView as FrameLayout)\r\n                            .addView(\r\n                                customView,\r\n                                FrameLayout.LayoutParams(\r\n                                    ViewGroup.LayoutParams.MATCH_PARENT,\r\n                                    ViewGroup.LayoutParams.MATCH_PARENT\r\n                                )\r\n                            )\r\n                        this@BrowserActivity.window.decorView.systemUiVisibility = FULL_SCREEN_SETTING\r\n                        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_USER\r\n                        customView!!.setOnSystemUiVisibilityChangeListener(\r\n                            OnSystemUiVisibilityChangeListener { updateCustomView() })\r\n                    }\r\n\r\n                    override fun onHideCustomView() {\r\n                        super.onHideCustomView()\r\n\r\n                        (window.decorView as FrameLayout).removeView(customView)\r\n                        customView = null\r\n                        window.decorView.systemUiVisibility = mOriginalSystemUiVisibility\r\n                        requestedOrientation = originalOrientation\r\n                        customViewCallback!!.onCustomViewHidden()\r\n                        customViewCallback = null\r\n                        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_USER\r\n                    }\r\n\r\n                    override fun getDefaultVideoPoster(): Bitmap? {\r\n                        return Bitmap.createBitmap(10, 10, Bitmap.Config.ARGB_8888)\r\n                    }\r\n\r\n\r\n                    private fun updateCustomView() {\r\n                        val params = customView!!.layoutParams as FrameLayout.LayoutParams\r\n                        params.bottomMargin = 0\r\n                        params.topMargin = 0\r\n                        params.leftMargin = 0\r\n                        params.rightMargin = 0\r\n                        params.height = ViewGroup.LayoutParams.MATCH_PARENT\r\n                        params.width = ViewGroup.LayoutParams.MATCH_PARENT\r\n                        customView!!.layoutParams = params\r\n                        this@BrowserActivity.window.decorView.systemUiVisibility = FULL_SCREEN_SETTING\r\n                    }\r\n\r\n                    override fun onProgressChanged(view: WebView?, newProgress: Int) {\r\n                        super.onProgressChanged(view, newProgress)\r\n                        Log.d(\"onProgressChangedURL\", view!!.url.toString())\r\n                        if (timer != null) {\r\n                            Log.d(\"timer != null\", \"true.toString()\")\r\n                            timer!!.cancel()\r\n                            timer = null\r\n                        }\r\n\r\n                        timer = object : CountDownTimer(500, 100) {\r\n                            override fun onTick(millisUntilFinished: Long) {\r\n                                Log.d(\"pb_loading?.progress\", newProgress.toString())\r\n                                if (newProgress == 100) pb_loading?.progress = 90\r\n                                else pb_loading?.progress = newProgress\r\n                            }\r\n\r\n                            override fun onFinish() {\r\n                                Log.d(\"onProgressChanged\", newProgress.toString())\r\n                                Timber.d(\"TAG_PROGRESS: ${newProgress}\")\r\n                                pb_loading?.progress = newProgress\r\n                                if (newProgress >= 90) {\r\n                                    pb_loading?.visibility = GONE\r\n                                    webView.visibility = View.VISIBLE\r\n                                    if (thread == null) {\r\n                                        thread = Thread {\r\n                                            saveLocalImageSite()\r\n\r\n                                        }\r\n                                        thread!!.start()\r\n                                    } else {\r\n                                        thread!!.interrupt()\r\n                                        if (thread!!.isInterrupted) {\r\n                                            thread = Thread {\r\n                                                saveLocalImageSite()\r\n\r\n                                            }\r\n                                            thread!!.start()\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        timer!!.start()\r\n                    }\r\n\r\n                    override fun onReceivedIcon(view: WebView?, icon: Bitmap?) {\r\n                        super.onReceivedIcon(view, icon)\r\n\r\n                        iv_favicon?.setImageBitmap(icon)\r\n                        webPageBitmap = icon\r\n                    }\r\n\r\n                    override fun onShowFileChooser(\r\n                        view: WebView,\r\n                        filePath: ValueCallback<Array<Uri>>,\r\n                        fileChooserParams: FileChooserParams,\r\n                    ): Boolean {\r\n                        if (mFilePathCallback != null) {\r\n                            mFilePathCallback!!.onReceiveValue(null)\r\n                        }\r\n                        mFilePathCallback = filePath\r\n\r\n                        var takePictureIntent: Intent? = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\r\n                        if (takePictureIntent!!.resolveActivity(packageManager) != null) {\r\n                            // Create the File where the photo should go\r\n                            var photoFile: File? = null\r\n                            try {\r\n                                photoFile = createImageFile()\r\n\r\n                                takePictureIntent.putExtra(\"PhotoPath\", mCameraPhotoPath)\r\n                            } catch (ex: IOException) {\r\n                                // Error occurred while creating the File\r\n                                Timber.d(\"TAG_Browser error: Unable to create Image File\")\r\n                            }\r\n                            if (photoFile != null) {\r\n                                mCameraPhotoPath = \"file:\" + photoFile.absolutePath\r\n                                takePictureIntent.putExtra(\r\n                                    MediaStore.EXTRA_OUTPUT,\r\n                                    Uri.fromFile(photoFile)\r\n                                )\r\n                            } else {\r\n                                takePictureIntent = null\r\n                            }\r\n                        }\r\n                        val contentSelectionIntent = Intent(Intent.ACTION_GET_CONTENT)\r\n                        contentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE)\r\n                        contentSelectionIntent.type = \"image/*\"\r\n                        val intentArray: Array<Intent?> =\r\n                            takePictureIntent?.let { arrayOf(it) } ?: arrayOfNulls(0)\r\n                        val chooserIntent = Intent(Intent.ACTION_CHOOSER)\r\n                        chooserIntent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, false)\r\n                        chooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent)\r\n                        chooserIntent.putExtra(Intent.EXTRA_TITLE, \"Image Chooser\")\r\n                        chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, intentArray)\r\n                        startActivityForResult(\r\n                            chooserIntent,\r\n                            INPUT_FILE_REQUEST_CODE\r\n                        )\r\n                        return true\r\n                    }\r\n\r\n\r\n                    fun openFileChooser(uploadMsg: ValueCallback<Uri>, acceptType: String? = \"\") {\r\n                        mUploadMessage = uploadMsg\r\n                        val imageStorageDir = File(\r\n                            Environment.getExternalStoragePublicDirectory(\r\n                                Environment.DIRECTORY_PICTURES\r\n                            ), \"AndroidExampleFolder\"\r\n                        )\r\n                        if (!imageStorageDir.exists()) {\r\n                            imageStorageDir.mkdirs()\r\n                        }\r\n                        val file = File(\r\n                            imageStorageDir.toString() + File.separator + \"IMG_\"\r\n                                    + System.currentTimeMillis().toString() + \".jpg\"\r\n                        )\r\n                        mCapturedImageURI = Uri.fromFile(file)\r\n                        val captureIntent = Intent(\r\n                            MediaStore.ACTION_IMAGE_CAPTURE\r\n                        )\r\n                        captureIntent.putExtra(MediaStore.EXTRA_OUTPUT, mCapturedImageURI)\r\n                        val i = Intent(Intent.ACTION_GET_CONTENT)\r\n                        i.addCategory(Intent.CATEGORY_OPENABLE)\r\n                        i.type = \"image/*\"\r\n                        val chooserIntent = Intent.createChooser(i, \"Image Chooser\")\r\n                        chooserIntent.putExtra(\r\n                            Intent.EXTRA_INITIAL_INTENTS,\r\n                            arrayOf<Parcelable>(captureIntent)\r\n                        )\r\n                        startActivityForResult(\r\n                            chooserIntent,\r\n                            FILECHOOSER_RESULTCODE\r\n                        )\r\n                    }\r\n\r\n                    fun openFileChooser(\r\n                        uploadMsg: ValueCallback<Uri>,\r\n                        acceptType: String?,\r\n                        capture: String?,\r\n                    ) {\r\n                        openFileChooser(uploadMsg, acceptType)\r\n                    }\r\n                }\r\n\r\n                this.registerForContextMenu(webView)\r\n\r\n                webView?.setDownloadListener { url, userAgent, contentDisposition, mimetype, contentLength ->\r\n                    downloadFile(this, url, contentDisposition, mimetype, contentLength)\r\n                }\r\n\r\n                this.registerForContextMenu(webView)\r\n\r\n                webView?.setOnLongClickListener { v ->\r\n\r\n                    val result = (v as WebView).hitTestResult\r\n                    val type = result.type\r\n                    if (type == HitTestResult.UNKNOWN_TYPE) {\r\n                        return@setOnLongClickListener false\r\n                    }\r\n                    if (HitTestResult.IMAGE_TYPE == type) {\r\n                        result.extra?.let {\r\n                            if (BrowserUnit.isURL(result.extra!!)) {\r\n                                val url = URL(result.extra!!)\r\n                                val fileSize: Int = 0\r\n                                val fileName = URLUtil.guessFileName(result.extra, null, null)\r\n                                downloadFile(\r\n                                    this@BrowserActivity,\r\n                                    result.extra!!,\r\n                                    \"attachment; filename=${fileName}\",\r\n                                    \"image/jpeg\",\r\n                                    fileSize.toLong()\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                    true\r\n                }\r\n\r\n                Log.d(\"INFO\", \"INFO\")\r\n\r\n                if (isFromTabs) {\r\n                    Log.d(\"INFO1\", \"INFO\")\r\n                    currentCount = countTab\r\n                    webView?.loadUrl(newestUrlAndCheckUrl(initialUrl ?: \"https://google.com\"))\r\n                } else {\r\n                    if (initialUrl.isNullOrEmpty()) {\r\n                        if (intent.getBooleanExtra(\r\n                                \"from_home\",\r\n                                false\r\n                            ) && Build.VERSION.SDK_INT < Build.VERSION_CODES.Q\r\n                        ) {\r\n                            Log.d(\"INFO2\", \"INFO\")\r\n                            setRequestDefaultBrowser(this, true)\r\n                            startActivity(HomeActivity.newIntent(this))\r\n                        } else {\r\n                            Log.d(\"INFO3\", \"INFO\")\r\n                            webView?.loadUrl(newestUrlAndCheckUrl(\"https://google.com\"))\r\n                        }\r\n                    } else {\r\n\r\n                        val url = if (isSiteAvailability) {\r\n                            val checkUrl = newestUrlAndCheckUrl(initialUrl ?: \"https://google.com\")\r\n                            webView?.loadUrl(checkUrl)\r\n                            checkUrl\r\n                        } else {\r\n                            val checkUrl =\r\n                                newestUrlAndCheckUrl(\"${getSelectedSearchEngine(this)?.searchLink}${initialUrl}\")\r\n                            webView?.loadUrl(checkUrl)\r\n                            isSearch = true\r\n                            browserViewModel.getLinks(checkUrl)\r\n                            checkUrl\r\n                        }\r\n                        Log.d(\"INFO4\", url)\r\n\r\n                        var count = getSharedPreferences(\"count\", MODE_PRIVATE).getInt(\"count\", 0)\r\n                        getSharedPreferences(\"count\", MODE_PRIVATE).edit {\r\n                            this.putInt(\"count\", (count + 1))\r\n                        }\r\n                        count++\r\n                        currentCount = count\r\n\r\n                        val editUrl = \"$url/////?$count\"\r\n\r\n                        currentTabs.add(editUrl)\r\n\r\n                        getSharedPreferences(\r\n                            if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,\r\n                            Context.MODE_PRIVATE\r\n                        ).edit {\r\n                            this.putString(count.toString(), editUrl)\r\n                        }\r\n                        b_tabs.text = currentTabs.size.toString()\r\n                    }\r\n                }\r\n            }\r\n\r\n    private fun getAffLink(url: String): String {\r\n        /** обернутая ссылка проходит через 3 редиректа, поэтому нужен флаг isRedirected  чтобы зря не оборачивать редирекнутые ссылки\r\n          */\r\n        var link = url\r\n        if (isSearch) {\r\n            if (isRedirected) {\r\n                link = url\r\n            } else {\r\n                val parts = url.split(\"//\")\r\n                var domain = parts[1]\r\n                if (domain.subSequence(0, 3).contains(\"-\")) {\r\n                    domain = domain.split(\"-\")[1]\r\n                    if (domain.startsWith(\"m.\")) {\r\n                        domain = domain.removePrefix(\"m.\")\r\n                    }\r\n                } else if (domain.startsWith(\"m.\")) {\r\n                    domain = domain.removePrefix(\"m.\")\r\n                }\r\n                if (!domain.contains(\"?\")) {\r\n                    isRedirected = true\r\n                }\r\n                link = links.find { it.contains(Uri.encode(domain)) } ?: url\r\n            }\r\n        }\r\n//        else {\r\n//            /** если ссылка не в базе данных Admitad, тогда обернутая ссылка вернется к оригиналу после 2 редиректа\r\n//             */\r\n//           if (isRedirected) {\r\n//                link = url\r\n//            } else {\r\n//                link = NEWEST_URL_START + Uri.encode(link)\r\n//               isRedirected = true\r\n//            }\r\n//        }\r\n        return link\r\n    }\r\n\r\n    private fun saveLocalImageSite() {\r\n                try {\r\n                    val bitmap = Bitmap.createBitmap(\r\n                        webView.width,\r\n                        webView.height,\r\n                        Bitmap.Config.ARGB_8888\r\n                    )\r\n                    val canvas = Canvas(bitmap)\r\n                    webView.draw(canvas)\r\n                    val count = getSharedPreferences(\"count\", MODE_PRIVATE).getInt(\"count\", 0)\r\n                    try {\r\n                        val out = FileOutputStream(\"$filesDir$count.png\")\r\n                        bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)\r\n                    } catch (e: Exception) {\r\n                        e.printStackTrace()\r\n                    }\r\n                } catch (e: Exception) {\r\n                    Log.d(\"ERROR_IMAGE\", e.toString())\r\n                }\r\n            }\r\n\r\n            private fun downloadFile(\r\n                context: Context,\r\n                url: String,\r\n                contentDisposition: String?,\r\n                mimeType: String?,\r\n                contentLength: Long,\r\n            ) {\r\n                BrowserUnit.downloadWithPath(this, url, contentDisposition, mimeType) {\r\n                    downloadsViewModel.insert(\r\n                        DownloadModel(\r\n                            System.currentTimeMillis() / 1000,\r\n                            url,\r\n                            getStringSizeLengthFile(contentLength),\r\n                            getMimeType(url) ?: \"file\",\r\n                            it.first,\r\n                            it.second\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n\r\n            private fun getFileType(url: String, context: Context): String? {\r\n                val contentResolver: ContentResolver = context.contentResolver\r\n                val mimeTypeMap = MimeTypeMap.getSingleton()\r\n                return mimeTypeMap.getExtensionFromMimeType(contentResolver.getType(Uri.parse(url)))\r\n            }\r\n\r\n            private fun onSearchClicked() {\r\n                val searchText = et_search_field?.text?.toString()\r\n\r\n                if (!searchText.isNullOrEmpty()) {\r\n                    if (searchText.contains(\".\") && !searchText.contains(\" \")) {\r\n                        requestToWeb =\r\n                            if (searchText.startsWith(\"http://\") || searchText.startsWith(\"https://\")) searchText else \"http://$searchText\"\r\n                        createHttpTask(requestToWeb!!)\r\n                            .addOnSuccessListener {\r\n                                isSiteAvailability = true\r\n                                webView?.loadUrl(newestUrlAndCheckUrl(requestToWeb!!))\r\n                            }\r\n                            .addOnFailureListener {\r\n                                requestToWeb = requestToWeb!!.replace(\"http://\", \"\")\r\n                                isSiteAvailability = false\r\n                                if (it.message == \"Error: 301\") {\r\n                                    requestToWeb = \"https://$requestToWeb\"\r\n                                    createHttpTask(requestToWeb!!)\r\n                                        .addOnSuccessListener {\r\n                                            isSiteAvailability = true\r\n                                            webView?.loadUrl(newestUrlAndCheckUrl(requestToWeb!!))\r\n                                        }\r\n                                        .addOnFailureListener {\r\n                                            requestToWeb = requestToWeb!!.replace(\"https://\", \"\")\r\n                                            isSiteAvailability = false\r\n                                            webView?.loadUrl(\"${getSelectedSearchEngine(this)?.searchLink}${requestToWeb!!}\")\r\n                                        }\r\n                                } else {\r\n                                    webView?.loadUrl(\"${getSelectedSearchEngine(this)?.searchLink}${requestToWeb!!}\")\r\n                                }\r\n                            }\r\n                    } else {\r\n                        isSiteAvailability = false\r\n                        requestToWeb = searchText\r\n                        webView?.loadUrl(\"${getSelectedSearchEngine(this)?.searchLink}${requestToWeb!!}\")\r\n                    }\r\n                } else {\r\n                    Toast.makeText(this, getString(R.string.search_empty_error), Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n            private fun setOnClickListeners() {\r\n                iv_skip_forward?.setOnClickListener {\r\n                    onSkipForwardClicked()\r\n                }\r\n                iv_skip_back?.setOnClickListener {\r\n                    onBackPressed()\r\n                }\r\n                ib_refresh?.setOnClickListener {\r\n                    onRefreshClicked()\r\n                }\r\n                iv_search?.setOnClickListener {\r\n                    onSearchClicked()\r\n                }\r\n                ib_search_menu?.setOnClickListener {\r\n                    showMenu()\r\n                }\r\n                iv_add_browser?.setOnClickListener {\r\n                    startActivity(HomeActivity.newIntent(this))\r\n                }\r\n                b_tabs?.setOnClickListener {\r\n                    startActivity(TabsActivity.newIntent(this))\r\n                }\r\n            }\r\n\r\n            private fun showMenu() {\r\n                val menu =\r\n                    PopupMenu(\r\n                        this,\r\n                        ib_search_menu\r\n                    )\r\n                menu.inflate(R.menu.browser_menu)\r\n                menu.setOnMenuItemClickListener {\r\n                    when (it.itemId) {\r\n                        R.id.item_settings -> {\r\n                            startActivity(SettingsActivity.newIntent(this))\r\n                        }\r\n                        R.id.item_history -> {\r\n                            startActivity(HistoryRecordsActivity.newIntent(this))\r\n                        }\r\n                        R.id.item_add_bookmark -> {\r\n                            onAddBookmarkClicked()\r\n                        }\r\n                        R.id.item_downloads -> {\r\n                            startActivity(DownloadsActivity.newIntent(this))\r\n                        }\r\n                    }\r\n                    false\r\n                }\r\n\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n                    menu.setForceShowIcon(true)\r\n                }\r\n                menu.show()\r\n            }\r\n\r\n            private fun onAddBookmarkClicked() {\r\n                if (!currentUrl.isNullOrEmpty()) {\r\n                    AlertDialog.Builder(this)\r\n                        .setCancelable(false)\r\n                        .setMessage(getString(R.string.browser_add_bookmark_question))\r\n                        .setPositiveButton(\r\n                            getString(R.string.yes)\r\n                        ) { dialog, _ ->\r\n                            checkIfUrlAlreadyAddedToBookmark()\r\n                        }\r\n                        .setNegativeButton(\r\n                            getString(R.string.no)\r\n                        ) { dialog, _ ->\r\n                            dialog.dismiss()\r\n                        }\r\n                        .show()\r\n                }\r\n            }\r\n\r\n            override fun onPostResponse(openGraphResult: OpenGraphResult) {\r\n                Timber.d(\"TAG_OPENGRAPH_1: ${openGraphResult}\")\r\n                var bitmapIcon: Bitmap? = null\r\n                var imageUrl = openGraphResult.image\r\n                if (imageUrl != null) {\r\n                    if (imageUrl.contains(\"https:\") == false) {\r\n                        imageUrl = \"https:${imageUrl}\"\r\n                    }\r\n                }\r\n                val newBookmark =\r\n                    Bookmark(\r\n                        System.currentTimeMillis() / 1000,\r\n                        openGraphResult.title ?: \"Bookmark\",\r\n                        currentUrl,\r\n                        imageUrl,\r\n                        webPageBitmap\r\n                    ) //imageUrl\r\n                bookmarksViewModel.insert(newBookmark)\r\n                    .observe(this, androidx.lifecycle.Observer {\r\n                        it?.let {\r\n                            Toast.makeText(\r\n                                this,\r\n                                getString(R.string.browser_add_bookmark_message),\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                        }\r\n                    })\r\n            }\r\n\r\n            override fun onError(error: String) {\r\n                val newBookmark =\r\n                    Bookmark(System.currentTimeMillis() / 1000, \"Bookmark\", currentUrl)\r\n                bookmarksViewModel.insert(newBookmark)\r\n                    .observe(this, androidx.lifecycle.Observer {\r\n                        it?.let {\r\n                            Toast.makeText(\r\n                                this,\r\n                                getString(R.string.browser_add_bookmark_message),\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                        }\r\n                    })\r\n            }\r\n\r\n            private val openGraphParser by lazy { OpenGraphParser(this, showNullOnEmpty = true) }\r\n\r\n            private fun checkIfUrlAlreadyAddedToBookmark() {\r\n                if (!currentUrl.isNullOrEmpty()) {\r\n                    bookmarksViewModel.checkIfBookmarkAlreadyAdded(currentUrl)\r\n                        .observe(this, androidx.lifecycle.Observer {\r\n                            it?.let {\r\n                                if (!it) {\r\n                                    openGraphParser.parse(currentUrl)\r\n                                } else {\r\n                                    Toast.makeText(\r\n                                        this,\r\n                                        getString(R.string.browser_bookmark_added_already),\r\n                                        Toast.LENGTH_SHORT\r\n                                    ).show()\r\n                                }\r\n                            }\r\n                        })\r\n                }\r\n            }\r\n\r\n            private fun onRefreshClicked() {\r\n                webView?.reload()\r\n            }\r\n\r\n\r\n            private fun onSkipForwardClicked() {\r\n                if (webView?.canGoForward() == true) {\r\n                    webView?.goForward()\r\n                }\r\n            }\r\n\r\n            override fun onBackPressed() {\r\n                when {\r\n                    webView.canGoBack() -> webView.goBack()\r\n                    else -> super.onBackPressed()\r\n                }\r\n            }\r\n\r\n\r\n            override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n                if (requestCode != INPUT_FILE_REQUEST_CODE || mFilePathCallback == null) {\r\n                    super.onActivityResult(requestCode, resultCode, data)\r\n                    return\r\n                }\r\n                var results: Array<Uri>? = null\r\n                if (resultCode == RESULT_OK) {\r\n                    if (data == null) {\r\n                        if (mCameraPhotoPath != null) {\r\n                            results = arrayOf(Uri.parse(mCameraPhotoPath))\r\n                        }\r\n                    } else {\r\n                        val dataString = data.dataString\r\n                        if (dataString != null) {\r\n                            results = arrayOf(Uri.parse(dataString))\r\n                        }\r\n                    }\r\n                }\r\n                mFilePathCallback?.onReceiveValue(results)\r\n                mFilePathCallback = null\r\n            }\r\n\r\n            @Throws(IOException::class)\r\n            private fun createImageFile(): File? {\r\n                val timeStamp =\r\n                    SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(Date())\r\n                val imageFileName = \"JPEG_\" + timeStamp + \"_\"\r\n                val storageDir = Environment.getExternalStoragePublicDirectory(\r\n                    Environment.DIRECTORY_PICTURES\r\n                )\r\n                return File.createTempFile(\r\n                    imageFileName,\r\n                    \".jpg\",\r\n                    storageDir\r\n                )\r\n            }\r\n\r\n\r\n            override fun dispatchTouchEvent(ev: MotionEvent): Boolean {\r\n\r\n                if (ev.action == MotionEvent.ACTION_DOWN) {\r\n                    val index = ev.actionIndex\r\n                    val action = ev.actionMasked\r\n                    val pointerId = ev.getPointerId(index)\r\n                    val view = this.currentFocus\r\n                    if (view != null) {\r\n                        val imm =\r\n                            getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n                        imm.hideSoftInputFromWindow(view.windowToken, 0)\r\n\r\n                    }\r\n                }\r\n                return super.dispatchTouchEvent(ev)\r\n            }\r\n\r\n            override fun attachBaseContext(base: Context) {\r\n                super.attachBaseContext(applySelectedAppLanguage(base))\r\n            }\r\n\r\n            private fun applySelectedAppLanguage(context: Context): Context {\r\n                val newestLanguage =\r\n                    context.getSharedPreferences(Constants.Settings.SETTINGS_LANGUAGE, Context.MODE_PRIVATE)\r\n                        .getString(\r\n                            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n                        )\r\n                val locale = Locale(newestLanguage)\r\n                val newConfig = Configuration(context.resources.configuration)\r\n                Locale.setDefault(locale)\r\n                newConfig.setLocale(locale)\r\n                return context.createConfigurationContext(newConfig)\r\n            }\r\n\r\n            override fun onSaveInstanceState(outState: Bundle) {\r\n                super.onSaveInstanceState(outState)\r\n                webView?.saveState(outState)\r\n            }\r\n\r\n            override fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n                super.onRestoreInstanceState(savedInstanceState)\r\n                webView?.restoreState(savedInstanceState)\r\n            }\r\n\r\n            private val mExecutor: Executor = Executors.newSingleThreadExecutor()\r\n\r\n            private fun createHttpTask(u: String): Task<String> {\r\n                return Tasks.call(mExecutor, Callable<String> {\r\n                    val url = URL(u)\r\n                    val conn: HttpURLConnection = url.openConnection() as HttpURLConnection\r\n                    conn.requestMethod = \"GET\"\r\n                    conn.connectTimeout = 1000\r\n                    conn.readTimeout = 1000\r\n                    val rc = conn.responseCode\r\n                    if (rc != HttpURLConnection.HTTP_OK) {\r\n                        conn.disconnect()\r\n                        throw Exception(\"Error: ${rc}\")\r\n                    } else {\r\n                        conn.disconnect()\r\n                        return@Callable \"true\"\r\n                    }\r\n                })\r\n            }\r\n}\r\n\r\n\r\n\r\n
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/browser/BrowserActivity.kt b/app/src/main/java/web/browser/dragon/ui/browser/BrowserActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/browser/BrowserActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/browser/BrowserActivity.kt	
@@ -1,9 +1,11 @@
 package web.browser.dragon.ui.browser
 
 
+import android.Manifest
 import android.app.Activity
 import android.content.*
 import android.content.pm.ActivityInfo
+import android.content.pm.PackageManager
 import android.content.pm.ResolveInfo
 import android.content.res.Configuration
 import android.graphics.Bitmap
@@ -12,6 +14,7 @@
 import android.net.http.SslError
 import android.os.*
 import android.provider.MediaStore
+import android.telephony.TelephonyManager
 import android.util.Log
 import android.view.*
 import android.view.View.GONE
@@ -24,6 +27,7 @@
 import androidx.activity.viewModels
 import androidx.appcompat.app.AlertDialog
 import androidx.appcompat.app.AppCompatActivity
+import androidx.core.app.ActivityCompat
 import androidx.core.content.ContextCompat
 import androidx.core.content.edit
 import androidx.core.view.ViewCompat
@@ -46,35 +50,42 @@
 import web.browser.dragon.database.downloads.DownloadModelsViewModelFactory
 import web.browser.dragon.database.history.HistoryRecordsViewModel
 import web.browser.dragon.database.history.HistoryRecordsViewModelFactory
-import web.browser.dragon.model.*
+import web.browser.dragon.model.Bookmark
+import web.browser.dragon.model.DownloadModel
+import web.browser.dragon.model.HistoryRecord
+import web.browser.dragon.model.OpenGraphResult
 import web.browser.dragon.ui.downloads.DownloadsActivity
 import web.browser.dragon.ui.history.HistoryRecordsActivity
 import web.browser.dragon.ui.home.HomeActivity
 import web.browser.dragon.ui.settings.SettingsActivity
 import web.browser.dragon.ui.tabs.TabsActivity
 import web.browser.dragon.utils.*
-import web.browser.dragon.utils.Constants.CheckUrl.NEWEST_URL_START
 import web.browser.dragon.utils.file.getMimeType
 import web.browser.dragon.utils.file.getStringSizeLengthFile
 import web.browser.dragon.utils.ogparser.OpenGraphCallback
 import web.browser.dragon.utils.ogparser.OpenGraphParser
 import web.browser.dragon.utils.other.unit.BrowserUnit
 import web.browser.dragon.utils.settings.getSettings
+import web.browser.dragon.ui.main.MainActivity.Companion.MY_PERMISSIONS_REQUEST_LOCATION
 import java.io.File
 import java.io.FileOutputStream
 import java.io.IOException
 import java.net.HttpURLConnection
 import java.net.URL
+import java.net.URLDecoder
 import java.nio.charset.StandardCharsets.UTF_8
 import java.text.SimpleDateFormat
 import java.util.*
 import java.util.concurrent.Callable
 import java.util.concurrent.Executor
 import java.util.concurrent.Executors
+import java.util.regex.Matcher
+import java.util.regex.Pattern
 
 
 open class BrowserActivity : AppCompatActivity(), OpenGraphCallback {
 
+
     private var lastUrl: String? = null
     private var currentCount: Int = 0
 
@@ -100,6 +111,8 @@
             intent.putExtra(FROM_TABS, isFromTabs)
             intent.putExtra(COUNT_TAB, countTab)
             intent.putExtra(SITE_AVAILABILITY, isSiteAvailability)
+
+
             return intent
         }
 
@@ -262,7 +275,7 @@
             e.printStackTrace()
             return null
         }
-        return json
+        return json!!
     }
 
     private fun onIncognitoMode() {
@@ -343,6 +356,7 @@
         val webSettings = webView?.settings
         webSettings?.javaScriptEnabled = getSettings(this)?.enableJavaScript ?: true
         webSettings?.domStorageEnabled = true
+
         webSettings?.allowFileAccess = true
         webSettings?.blockNetworkImage = getSettings(this)?.withoutImages ?: false
         webSettings?.loadsImagesAutomatically = true
@@ -357,16 +371,36 @@
         )
     }
 
+
+    open fun shouldOverrideUrlLoading(view: WebView?, url: String): Boolean {
+        var url = url
+        if (url.startsWith("intent://") && url.contains("scheme=http")) {
+            url = Uri.decode(url)
+            var bkpUrl: String? = null
+            val regexBkp: Pattern = Pattern.compile("intent://(.*?)#")
+            val regexMatcherBkp: Matcher = regexBkp.matcher(url)
+            return if (regexMatcherBkp.find()) {
+                bkpUrl = regexMatcherBkp.group(1)
+                val myIntent = Intent(Intent.ACTION_VIEW, Uri.parse("http://$bkpUrl"))
+                startActivity(myIntent)
+                true
+            } else {
+                false
+            }
+        }
+        return false
+    }
     private fun setWebView() {
         updateSettings()
 
         webView.settings.userAgentString = Constants.Search.USER_AGENT
         webView.settings.userAgentString = webView.settings.userAgentString.replace("; wv)", ")");
-        webView.settings.loadWithOverviewMode = true;
-        webView.settings.useWideViewPort = true;
-        webView.settings.allowFileAccess = true;
-        webView.settings.allowContentAccess = true;
-        webView.settings.domStorageEnabled = true;
+        webView.settings.loadWithOverviewMode = true
+        webView.settings.useWideViewPort = true
+        webView.settings.setGeolocationEnabled(true)
+        webView.settings.allowFileAccess = true
+        webView.settings.allowContentAccess = true
+        webView.settings.domStorageEnabled = true
         webView.setLayerType(View.LAYER_TYPE_HARDWARE, null)
         webView.requestFocus();
 
@@ -402,14 +436,20 @@
             webView?.settings!!.saveFormData = false
         }
 
+
+
         webView?.webViewClient = object : WebViewClient() {
-
                     override fun shouldOverrideUrlLoading(
                         view: WebView,
                         request: WebResourceRequest,
                     ): Boolean {
+
+
                         if (!request.url.toString()
+                                .startsWith("intent://")&& !request.url.toString()
                                 .startsWith("https://m.youtube") && !request.url.toString()
+                                .startsWith("https://www.google.com/maps/") && !request.url.toString()
+                                .startsWith("https://www.instagram.com") && !request.url.toString()
                                 .startsWith("https://youtube") && !request.url.toString()
                                 .startsWith("https://m.facebook.com") && !request.url.toString()
                                 .startsWith("https://facebook.com") && !request.url.toString()
@@ -419,11 +459,17 @@
                                 .startsWith("https://www.facebook.com") && !request.url.toString()
                                 .startsWith("https://t.me") && request.url.toString()
                                 .startsWith("https")
+
+
                         ) {
                             view.settings.loadWithOverviewMode = true
                             view.settings.useWideViewPort = true
+                            view.settings.setGeolocationEnabled(true)
+                            view.settings.javaScriptCanOpenWindowsAutomatically = true
                             view.settings.javaScriptEnabled = true
                             view.settings.builtInZoomControls = true
+                            view.settings.databaseEnabled = true
+                            view.settings.domStorageEnabled = true
                             view.loadUrl(getAffLink(request.url.toString()))
                             return false
                         } else {
@@ -438,8 +484,19 @@
                                 (request.url.toString().startsWith("https://facebook"))
                                 (request.url.toString().startsWith("https://facebook.com"))
                                 (request.url.toString().startsWith("https://m.youtube"))
+                                (request.url.toString().startsWith("intent://"))
                                 val packageManager = packageManager
 
+                                val FALLBACK_URL = "browser_fallback_url="
+                                val url = request.url
+                                val urlString = url.toString()
+                                val fallbackUrl = urlString.subSequence(
+                                    urlString.indexOf(FALLBACK_URL) + FALLBACK_URL.length,
+                                    urlString.length)
+                                    .toString()
+                                webView.loadUrl(URLDecoder.decode(fallbackUrl, "UTF-8"))
+
+
 
                                 val host = webView?.context as Activity
 
@@ -451,11 +508,37 @@
                             } catch (e: ActivityNotFoundException) {
                                 false
                             }
+
                         }
+
+                        // не помогает
+//                        if (!request.url.toString().startsWith("intent://")) {
+//                            try {
+//                                val context = view.context
+//                                if (intent != null) {
+//                                    view.stopLoading()
+//                                    val packageManager = context.packageManager
+//                                    val info =
+//                                        packageManager.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY)
+//                                    if (info != null) {
+//                                        context.startActivity(intent)
+//                                    } else {
+//                                        val fallbackUrl = intent.getStringExtra("browser_fallback_url")
+//                                        view.loadUrl(fallbackUrl!!)
+//                                    }
+//                                    return true
+//                                }
+//                            } catch (e: URISyntaxException) {
+//                                }
+//                            }
+//
+//                    }
                     }
 
                     //            Для старых устройств
                     override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {
+
+
                         if (!url.toString().startsWith("https://m.youtube") && !url.toString()
                                 .startsWith("https://youtube") && !url.toString()
                                 .startsWith("https://m.facebook.com") && !url.toString()
@@ -464,6 +547,7 @@
                                 .startsWith("https://market.android.com/details?id=") && !url.toString()
                                 .startsWith("https://play.google.com/store/") && !url.toString()
                                 .startsWith("https://t.me")
+
                         ) {
 
                             return false
@@ -478,6 +562,7 @@
                                 (url.startsWith("https://m.youtube.com"))
                                 (url.startsWith("https://m.youtube"))
 
+
                                 val packageManager = packageManager
                                 val resolvedActivities: MutableList<ResolveInfo?> =
                                     packageManager.queryIntentActivities(browserIntent, 0)
@@ -612,9 +697,58 @@
         webView.settings.allowFileAccess = true
         webView.settings.mixedContentMode = 0
         webView.settings.javaScriptEnabled = true
+        webView.settings.setGeolocationEnabled(true)
         webView.settings.javaScriptCanOpenWindowsAutomatically = true
         webView?.webChromeClient = object : WebChromeClient() {
+            override fun onGeolocationPermissionsShowPrompt(
+                origin: String,
+                callback: GeolocationPermissions.Callback
+            ) {
+                // = null
+            //    mGeoLocationCallback = null
+                // Do We need to ask for permission?
+                if (ContextCompat.checkSelfPermission(
+                        this@BrowserActivity,
+                        Manifest.permission.ACCESS_FINE_LOCATION
+                    ) != PackageManager.PERMISSION_GRANTED
+                ) {
+
+                    // Should we show an explanation?
+                    if (ActivityCompat.shouldShowRequestPermissionRationale(
+                            this@BrowserActivity,
+                            Manifest.permission.ACCESS_FINE_LOCATION
+                        )
+                    ) {
 
+                        AlertDialog.Builder(this@BrowserActivity)
+                        //    .setMessage(R.string.permission_location_rationale)
+                            .setNeutralButton(android.R.string.ok) { _, _ ->
+                             //   mGeoLocationRequestOrigin = origin
+                               // mGeoLocationCallback = callback
+                                ActivityCompat.requestPermissions(
+                                    this@BrowserActivity,
+                                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
+                                    MY_PERMISSIONS_REQUEST_LOCATION
+                                )
+                            }
+                            .show()
+
+                    } else {
+                        // No explanation needed, we can request the permission.
+
+                     //   mGeoLocationRequestOrigin = origin
+                      //  mGeoLocationCallback = callback
+                        ActivityCompat.requestPermissions(
+                            this@BrowserActivity,
+                            arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
+                            MY_PERMISSIONS_REQUEST_LOCATION
+                        )
+                    }
+                } else {
+                    // Tell the WebView that permission has been granted
+                    callback.invoke(origin, true, false)
+                }
+            }
                     private var customView: View? = null
                     private var customViewCallback: CustomViewCallback? = null
                     private var originalOrientation = 0
@@ -989,7 +1123,7 @@
             }
 
             private fun downloadFile(
-                context: Context,
+                cont0ext: Context,
                 url: String,
                 contentDisposition: String?,
                 mimeType: String?,
@@ -1021,7 +1155,7 @@
                 if (!searchText.isNullOrEmpty()) {
                     if (searchText.contains(".") && !searchText.contains(" ")) {
                         requestToWeb =
-                            if (searchText.startsWith("http://") || searchText.startsWith("https://")) searchText else "http://$searchText"
+                            if (searchText.startsWith("http://") || searchText.startsWith("https://"))searchText else "http://$searchText"
                         createHttpTask(requestToWeb!!)
                             .addOnSuccessListener {
                                 isSiteAvailability = true
@@ -1315,6 +1449,7 @@
                     }
                 })
             }
+
 }
 
 
Index: app/src/main/java/web/browser/dragon/WebBrowserDragon.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon\r\n\r\nimport android.R\r\nimport android.app.Application\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.appsflyer.AppsFlyerConversionListener\r\nimport com.appsflyer.AppsFlyerLib\r\nimport com.appsflyer.attribution.AppsFlyerRequestListener\r\nimport com.appsflyer.deeplink.DeepLink\r\nimport com.appsflyer.deeplink.DeepLinkListener\r\nimport com.appsflyer.deeplink.DeepLinkResult\r\nimport com.facebook.FacebookSdk\r\nimport com.facebook.appevents.AppEventsLogger\r\nimport com.google.gson.Gson\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.SupervisorJob\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport ru.tachos.admitadstatisticsdk.*\r\nimport timber.log.Timber\r\nimport web.browser.dragon.database.AppDatabase\r\nimport web.browser.dragon.database.bookmarks.BookmarksRepository\r\nimport web.browser.dragon.database.downloads.DownloadsRepository\r\nimport web.browser.dragon.database.history.HistoryRecordsRepository\r\nimport web.browser.dragon.utils.Constants\r\nimport java.util.*\r\n\r\n\r\nopen class WebBrowserDragon : Application() {\r\n\r\n    val applicationScope = CoroutineScope(SupervisorJob())\r\n    val database by lazy { AppDatabase.getDatabase(this, applicationScope) }\r\n    val bookmarksRepository by lazy { BookmarksRepository(database.bookmarksDao()) }\r\n    val historyRecordsRepository by lazy { HistoryRecordsRepository(database.historyRecordsDao()) }\r\n    val downloadsRepository by lazy { DownloadsRepository(database.downloadsDao()) }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n\r\n        initTimber()\r\n    }\r\n\r\n    private fun initTimber() {\r\n        Timber.plant(Timber.DebugTree())\r\n    }\r\n}\r\n\r\nopen class AppsflyerBasicApp : WebBrowserDragon() {\r\n    var conversionData: Map<String, Any>? = null\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n\r\n//        FacebookSdk.sdkInitialize(applicationContext);\r\n//        AppEventsLogger.activateApp(this);\r\n        AppsFlyerLib.getInstance().start(this)\r\n        val appsflyer = AppsFlyerLib.getInstance()\r\n        appsflyer.setMinTimeBetweenSessions(0)\r\n        appsflyer.init(Constants.AppsFlayer.afDevKey, null, this)\r\n//        appsflyer.startTracking(this, afDevKey)\r\n//        appsflyer.setDebugLog(true)\r\n\r\n        //Убрать перед релизом\r\n//        AppsFlyerLib.getInstance().setDebugLog(true)\r\n\r\n        AppsFlyerLib.getInstance().start(this, Constants.AppsFlayer.afDevKey, object : AppsFlyerRequestListener {\r\n            override fun onSuccess() {\r\n                Log.d(\"test\", \"Launch sent successfully\")\r\n            }\r\n\r\n            override fun onError(errorCode: Int, errorDesc: String) {\r\n                Log.d(\"test\", \"Launch failed to be sent:\\n\" +\r\n                        \"Error code: \" + errorCode + \"\\n\"\r\n                        + \"Error description: \" + errorDesc)\r\n            }\r\n        })\r\n        val afDevKey: String = Constants.AppsFlayer.afDevKey\r\n        // Make sure you remove the following line when building to production\r\n        appsflyer.setDebugLog(true)\r\n        appsflyer.setMinTimeBetweenSessions(0)\r\n        AppsFlyerLib.getInstance().start(this, Constants.AppsFlayer.afDevKey, object :\r\n            AppsFlyerRequestListener {\r\n            override fun onSuccess() {\r\n                Log.d(\"test\", \"Launch sent successfully\")\r\n            }\r\n\r\n            override fun onError(errorCode: Int, errorDesc: String) {\r\n                Log.d(\r\n                    \"test\", \"Launch failed to be sent:\\n\" +\r\n                            \"Error code: \" + errorCode + \"\\n\"\r\n                            + \"Error description: \" + errorDesc\r\n                )\r\n            }\r\n        })\r\n        //set the OneLink template id for share invite links\r\n        AppsFlyerLib.getInstance().setAppInviteOneLink(\"jtbR\")\r\n        appsflyer.subscribeForDeepLink(DeepLinkListener { deepLinkResult ->\r\n            val dlStatus = deepLinkResult.status\r\n            if (dlStatus == DeepLinkResult.Status.FOUND) {\r\n                Log.d(\"test\", \"Deep link found\")\r\n            } else if (dlStatus == DeepLinkResult.Status.NOT_FOUND) {\r\n                Log.d(\"test\", \"Deep link not found\")\r\n                return@DeepLinkListener\r\n            } else {\r\n                // dlStatus == DeepLinkResult.Status.ERROR\r\n                val dlError = deepLinkResult.error\r\n                Log.d(\r\n                    \"test\",\r\n                    \"There was an error getting Deep Link data: $dlError\"\r\n                )\r\n                return@DeepLinkListener\r\n            }\r\n            val deepLinkObj = deepLinkResult.deepLink\r\n            try {\r\n                Log.d(\r\n                    \"test\",\r\n                    \"The DeepLink data is: $deepLinkObj\"\r\n                )\r\n            } catch (e: Exception) {\r\n                Log.d(\"test\", \"DeepLink data came back null\")\r\n                return@DeepLinkListener\r\n            }\r\n            // An example for using is_deferred\r\n            if (deepLinkObj.isDeferred!!) {\r\n                Log.d(\"test\", \"This is a deferred deep link\")\r\n            } else {\r\n                Log.d(\"test\", \"This is a direct deep link\")\r\n            }\r\n            // An example for getting deep_link_value\r\n            var fruitName: String? = \"\"\r\n            try {\r\n                fruitName = deepLinkObj.deepLinkValue\r\n                var referrerId: String? = \"\"\r\n                val dlData = deepLinkObj.clickEvent\r\n\r\n                // ** Next if statement is optional **\r\n                // Our sample app's user-invite carries the referrerID in deep_link_sub2\r\n                // See the user-invite section in FruitActivity.java\r\n                if (dlData.has(\"deep_link_sub2\")) {\r\n                    referrerId = deepLinkObj.getStringValue(\"deep_link_sub2\")\r\n                    Log.d(\r\n                        \"test\",\r\n                        \"The referrerID is: $referrerId\"\r\n                    )\r\n                } else {\r\n                    Log.d(\"test\", \"deep_link_sub2/Referrer ID not found\")\r\n                }\r\n                if (fruitName == null || fruitName == \"\") {\r\n                    Log.d(\"test\", \"deep_link_value returned null\")\r\n                    fruitName = deepLinkObj.getStringValue(\"fruit_name\")\r\n                    if (fruitName == null || fruitName == \"\") {\r\n                        Log.d(\"test\", \"could not find fruit name\")\r\n                        return@DeepLinkListener\r\n                    }\r\n                    Log.d(\r\n                        \"test\",\r\n                        \"fruit_name is $fruitName. This is an old link\"\r\n                    )\r\n                }\r\n                Log.d(\r\n                    \"test\",\r\n                    \"The DeepLink will route to: $fruitName\"\r\n                )\r\n            } catch (e: Exception) {\r\n                Log.d(\r\n                    \"test\",\r\n                    \"There's been an error: $e\"\r\n                )\r\n                return@DeepLinkListener\r\n            }\r\n            goToFruit(fruitName, deepLinkObj)\r\n        })\r\n        val conversionListener: AppsFlyerConversionListener = object : AppsFlyerConversionListener {\r\n            override fun onConversionDataSuccess(conversionDataMap: MutableMap<String, Any>) {\r\n                for (attrName in conversionDataMap.keys) Log.d(\r\n                    \"test\",\r\n                    \"Conversion attribute: \" + attrName + \" = \" + conversionDataMap[attrName]\r\n                )\r\n                val status = Objects.requireNonNull(conversionDataMap[\"af_status\"]).toString()\r\n                if (status == \"Non-organic\") {\r\n                    if (Objects.requireNonNull(conversionDataMap[\"is_first_launch\"])\r\n                            .toString() == \"true\"\r\n                    ) {\r\n                        Log.d(\"test\", \"Conversion: First Launch\")\r\n                        //Deferred deep link in case of a legacy link\r\n                        if (conversionDataMap.containsKey(\"fruit_name\")) {\r\n                            if (conversionDataMap.containsKey(\"deep_link_value\")) { //Not legacy link\r\n                                Log.d(\r\n                                    \"test\",\r\n                                    \"onConversionDataSuccess: Link contains deep_link_value, deep linking with UDL\"\r\n                                )\r\n                            } else { //Legacy link\r\n                                conversionDataMap[\"deep_link_value\"] =\r\n                                    conversionDataMap[\"fruit_name\"]!!\r\n                                val fruitNameStr = conversionDataMap[\"fruit_name\"] as String?\r\n                                val deepLinkData = mapToDeepLinkObject(conversionDataMap)\r\n                                if (deepLinkData != null) {\r\n                                    if (fruitNameStr != null) {\r\n                                        goToFruit(fruitNameStr, deepLinkData)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        Log.d(\"test\", \"Conversion: Not First Launch\")\r\n                    }\r\n                } else {\r\n                    Log.d(\"test\", \"Conversion: This is an organic install.\")\r\n                }\r\n                conversionData = conversionDataMap\r\n            }\r\n\r\n            override fun onConversionDataFail(errorMessage: String) {\r\n                Log.d(\r\n                    \"test\",\r\n                    \"error getting conversion data: $errorMessage\"\r\n                )\r\n            }\r\n\r\n            override fun onAppOpenAttribution(attributionData: Map<String, String>) {\r\n                if (!attributionData.containsKey(\"is_first_launch\")) Log.d(\r\n                    \"test\",\r\n                    \"onAppOpenAttribution: This is NOT deferred deep linking\"\r\n                )\r\n                for (attrName in attributionData.keys) {\r\n                    val deepLinkAttrStr = attrName + \" = \" + attributionData[attrName]\r\n                    Log.d(\"test\", \"Deeplink attribute: $deepLinkAttrStr\")\r\n                }\r\n                Log.d(\r\n                    \"test\",\r\n                    \"onAppOpenAttribution: Deep linking into \" + attributionData[\"fruit_name\"]\r\n                )\r\n                attributionData[\"fruit_name\"]?.let {\r\n                    goToFruit(\r\n                        it, dlData = DeepLink.AFInAppEventType(\r\n                            JSONObject()\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n\r\n            override fun onAttributionFailure(errorMessage: String) {\r\n                Log.d(\r\n                    \"test\",\r\n                    \"error onAttributionFailure : $errorMessage\"\r\n                )\r\n            }\r\n        }\r\n        AppsFlyerLib.getInstance().appendParametersToDeepLinkingURL(\r\n            \"example.com\",\r\n            mapOf(\"pid\" to \"exampleDomain\", \"is_retargeting\" to \"true\")\r\n        ) // Required\r\n        appsflyer.init(afDevKey, conversionListener, this)\r\n        appsflyer.start(this)\r\n    }\r\n//    private fun goToFruit(fruitName: String, dlData: Map<String, String>?) {\r\n\r\n    private fun goToFruit(fruitName: String, dlData: DeepLink?) {\r\n        val fruitClassName = fruitName!!.substring(0, 1)\r\n            .uppercase(Locale.getDefault()) + fruitName.substring(1) + \"Activity\"\r\n        try {\r\n            val fruitClass = Class.forName(this.packageName + \".\" + fruitClassName)\r\n            Log.d(\"test\", \"Looking for class $fruitClass\")\r\n            val intent = Intent(applicationContext, fruitClass)\r\n            if (dlData != null) {\r\n                // TODO - make DeepLink Parcelable\r\n                val objToStr = Gson().toJson(dlData)\r\n                intent.putExtra(DL_ATTRS, objToStr)\r\n            }\r\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n            startActivity(intent)\r\n        } catch (e: ClassNotFoundException) {\r\n            Log.d(\r\n                \"test\",\r\n                \"Deep linking failed looking for $fruitName\"\r\n            )\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    fun mapToDeepLinkObject(conversionDataMap: Map<String, Any>?): DeepLink? {\r\n        try {\r\n            val objToStr = Gson().toJson(conversionDataMap)\r\n            return DeepLink.AFInAppEventType(JSONObject(objToStr))\r\n        } catch (e: JSONException) {\r\n            Log.d(\r\n                \"test\",\r\n                \"Error when converting map to DeepLink object: $e\"\r\n            )\r\n        }\r\n        return null\r\n    }\r\n\r\n    companion object {\r\n//        const val test = \"AppsFlyerOneLinkSimApp\"\r\n        const val DL_ATTRS = \"dl_attrs\"\r\n    }\r\n}\r\n\r\n\r\n
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/WebBrowserDragon.kt b/app/src/main/java/web/browser/dragon/WebBrowserDragon.kt
--- a/app/src/main/java/web/browser/dragon/WebBrowserDragon.kt	
+++ b/app/src/main/java/web/browser/dragon/WebBrowserDragon.kt	
@@ -1,27 +1,19 @@
 package web.browser.dragon
 
-import android.R
 import android.app.Application
 import android.content.Intent
-import android.net.Uri
-import android.os.Bundle
 import android.util.Log
-import android.view.View
-import androidx.appcompat.app.AppCompatActivity
 import com.appsflyer.AppsFlyerConversionListener
 import com.appsflyer.AppsFlyerLib
 import com.appsflyer.attribution.AppsFlyerRequestListener
 import com.appsflyer.deeplink.DeepLink
 import com.appsflyer.deeplink.DeepLinkListener
 import com.appsflyer.deeplink.DeepLinkResult
-import com.facebook.FacebookSdk
-import com.facebook.appevents.AppEventsLogger
 import com.google.gson.Gson
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.SupervisorJob
 import org.json.JSONException
 import org.json.JSONObject
-import ru.tachos.admitadstatisticsdk.*
 import timber.log.Timber
 import web.browser.dragon.database.AppDatabase
 import web.browser.dragon.database.bookmarks.BookmarksRepository
Index: app/src/main/java/web/browser/dragon/utils/other/unit/BrowserUnit.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.other.unit\r\n\r\nimport android.app.*\r\nimport android.content.ContentResolver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.content.pm.ShortcutManager\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Environment\r\nimport android.preference.PreferenceManager\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.webkit.CookieManager\r\nimport android.webkit.MimeTypeMap\r\nimport android.webkit.URLUtil\r\nimport android.webkit.ValueCallback\r\nimport android.widget.Toast\r\nimport androidx.core.app.NotificationCompat\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.ui.browser.BrowserActivity\r\nimport web.browser.dragon.utils.other.DataURIParser\r\nimport web.browser.dragon.utils.other.database.RecordAction\r\nimport timber.log.Timber\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\nimport java.lang.Exception\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\nobject BrowserUnit {\r\n    const val PROGRESS_MAX = 100\r\n    const val LOADING_STOPPED = 101 //Must be > PROGRESS_MAX !\r\n    const val MIME_TYPE_TEXT_PLAIN = \"text/plain\"\r\n    private const val SEARCH_ENGINE_GOOGLE = \"https://www.google.com/search?q=\"\r\n    private const val SEARCH_ENGINE_DUCKDUCKGO = \"https://duckduckgo.com/?q=\"\r\n    private const val SEARCH_ENGINE_STARTPAGE = \"https://startpage.com/do/search?query=\"\r\n    private const val SEARCH_ENGINE_BING = \"https://www.bing.com/search?q=\"\r\n    private const val SEARCH_ENGINE_BAIDU = \"https://www.baidu.com/s?wd=\"\r\n    private const val SEARCH_ENGINE_QWANT = \"https://www.qwant.com/?q=\"\r\n    private const val SEARCH_ENGINE_ECOSIA = \"https://www.ecosia.org/search?q=\"\r\n    private const val SEARCH_ENGINE_Metager = \"https://metager.org/meta/meta.ger3?eingabe=\"\r\n    private const val SEARCH_ENGINE_STARTPAGE_DE =\r\n        \"https://startpage.com/do/search?lui=deu&language=deutsch&query=\"\r\n    private const val SEARCH_ENGINE_SEARX = \"https://searx.be/?q=\"\r\n    const val URL_ENCODING = \"UTF-8\"\r\n    private const val URL_ABOUT_BLANK = \"about:blank\"\r\n    const val URL_SCHEME_ABOUT = \"about:\"\r\n    const val URL_SCHEME_MAIL_TO = \"mailto:\"\r\n    private const val URL_SCHEME_FILE = \"file://\"\r\n    private const val URL_SCHEME_HTTPS = \"https://\"\r\n    private const val URL_SCHEME_HTTP = \"http://\"\r\n    private const val URL_SCHEME_FTP = \"ftp://\"\r\n    private const val URL_SCHEME_INTENT = \"intent://\"\r\n    fun isURL(url: String): Boolean {\r\n        var url = url\r\n        url = url.toLowerCase(Locale.getDefault())\r\n        if (url.startsWith(URL_ABOUT_BLANK)\r\n            || url.startsWith(URL_SCHEME_MAIL_TO)\r\n            || url.startsWith(URL_SCHEME_FILE)\r\n            || url.startsWith(URL_SCHEME_HTTP)\r\n            || url.startsWith(URL_SCHEME_HTTPS)\r\n            || url.startsWith(URL_SCHEME_FTP)\r\n            || url.startsWith(URL_SCHEME_INTENT)\r\n        ) {\r\n            return true\r\n        }\r\n        val regex = (\"^((ftp|http|https|intent)?://)\" // support scheme\r\n                + \"?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?\" // ftp的user@\r\n                + \"(([0-9]{1,3}\\\\.){3}[0-9]{1,3}\" // IP形式的URL -> 199.194.52.184\r\n                + \"|\" // 允许IP和DOMAIN（域名）\r\n                + \"([0-9a-z_!~*'()-]+\\\\.)*\" // 域名 -> www.\r\n                + \"([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\\\\.\" // 二级域名\r\n                + \"[a-z]{2,6})\" // first level domain -> .com or .museum\r\n                + \"(:[0-9]{1,4})?\" // 端口 -> :80\r\n                + \"((/?)|\" // a slash isn't required if there is no file name\r\n                + \"(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$\")\r\n        val pattern = Pattern.compile(regex)\r\n        return pattern.matcher(url).matches()\r\n    }\r\n\r\n    fun queryWrapper(context: Context?, query: String): String {\r\n        var query = query\r\n        if (isURL(query)) {\r\n            if (query.startsWith(URL_SCHEME_ABOUT) || query.startsWith(URL_SCHEME_MAIL_TO)) {\r\n                return query\r\n            }\r\n            if (!query.contains(\"://\")) {\r\n                query = URL_SCHEME_HTTPS + query\r\n            }\r\n            return query\r\n        }\r\n        val sp: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)\r\n        val customSearchEngine = sp.getString(\"sp_search_engine_custom\", \"\")!!\r\n\r\n        //Override UserAgent if own UserAgent is defined\r\n        if (!sp.contains(\"searchEngineSwitch\")) {  //if new switch_text_preference has never been used initialize the switch\r\n            if (customSearchEngine == \"\") {\r\n                sp.edit().putBoolean(\"searchEngineSwitch\", false).apply()\r\n            } else {\r\n                sp.edit().putBoolean(\"searchEngineSwitch\", true).apply()\r\n            }\r\n        }\r\n        return if (sp.getBoolean(\r\n                \"searchEngineSwitch\",\r\n                false\r\n            )\r\n        ) {  //if new switch_text_preference has never been used initialize the switch\r\n            customSearchEngine + query\r\n        } else {\r\n            val i = Objects.requireNonNull(sp.getString(\"sp_search_engine\", \"0\"))?.toInt()\r\n            when (i) {\r\n                1 -> SEARCH_ENGINE_STARTPAGE_DE + query\r\n                2 -> SEARCH_ENGINE_BAIDU + query\r\n                3 -> SEARCH_ENGINE_BING + query\r\n                4 -> SEARCH_ENGINE_DUCKDUCKGO + query\r\n                5 -> SEARCH_ENGINE_GOOGLE + query\r\n                6 -> SEARCH_ENGINE_SEARX + query\r\n                7 -> SEARCH_ENGINE_QWANT + query\r\n                8 -> SEARCH_ENGINE_ECOSIA + query\r\n                9 -> SEARCH_ENGINE_Metager + query\r\n                else -> SEARCH_ENGINE_STARTPAGE + query\r\n            }\r\n        }\r\n    }\r\n\r\n    fun download(context: Context, url: String, contentDisposition: String?, mimeType: String?) {\r\n        val text =\r\n            context.getString(R.string.dialog_title_download) + \" - \" + URLUtil.guessFileName(\r\n                url,\r\n                contentDisposition,\r\n                getFileType(url, context)\r\n            )\r\n        Log.d(\"mimeType1\", getFileType(url, context).toString())\r\n        val builder = MaterialAlertDialogBuilder(context)\r\n        builder.setTitle(R.string.app_warning)\r\n        builder.setMessage(text)\r\n        builder.setIcon(R.drawable.icon_alert)\r\n        builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n            try {\r\n                val activity = context as Activity\r\n                val filename = URLUtil.guessFileName(\r\n                    url,\r\n                    contentDisposition,\r\n                    getFileType(url, context)\r\n                ) // Maybe unexpected filename.\r\n                if (url.startsWith(\"data:\")) {\r\n                    val dataURIParser = DataURIParser(url)\r\n                    if (BackupUnit.updateOrRequestPermission(context)) {\r\n                        val file = File(\r\n                            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),\r\n                            filename\r\n                        )\r\n                        val fos = FileOutputStream(file)\r\n                        fos.write(dataURIParser.imagedata)\r\n                    } else BackupUnit.requestPermission(activity)\r\n                } else {\r\n                    val request =\r\n                        DownloadManager.Request(Uri.parse(url))\r\n                    request.setMimeType(getFileType(url, context))\r\n                    //------------------------COOKIE!!------------------------\r\n                    val cookies =\r\n                        CookieManager.getInstance().getCookie(url)\r\n                    request.addRequestHeader(\"cookie\", cookies)\r\n                    //------------------------COOKIE!!------------------------\r\n                    Log.d(\"mimeType2\", getFileType(url, context).toString())\r\n                    request.setDescription(context.getString(R.string.dialog_title_download))\r\n                    request.setTitle(\r\n                        URLUtil.guessFileName(\r\n                            url,\r\n                            contentDisposition,\r\n                            getFileType(url, context)\r\n                        )\r\n                    )\r\n                    request.allowScanningByMediaScanner()\r\n                    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)\r\n                    Timber.d(\"TAG_FILE_NAME_1: ${Environment.DIRECTORY_DOWNLOADS}\")\r\n                    Timber.d(\r\n                        \"TAG_FILE_NAME_2: ${\r\n                            URLUtil.guessFileName(\r\n                                url,\r\n                                contentDisposition,\r\n                                getFileType(url, context)\r\n                            )\r\n                        }\"\r\n                    )\r\n                    request.setDestinationInExternalPublicDir(\r\n                        Environment.DIRECTORY_DOWNLOADS,\r\n                        URLUtil.guessFileName(url, contentDisposition, getFileType(url, context))\r\n                    )\r\n                    val dm =\r\n                        (activity.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager)\r\n                    if (BackupUnit.updateOrRequestPermission(context)) {\r\n                        dm.enqueue(request)\r\n                    } else {\r\n                        BackupUnit.requestPermission(activity)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                println(\"Error Downloading File: $e\")\r\n                Toast.makeText(\r\n                    context,\r\n                    context.getString(R.string.app_error) + e.toString()\r\n                        .substring(e.toString().indexOf(\":\")),\r\n                    Toast.LENGTH_LONG\r\n                ).show()\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        builder.setNeutralButton(R.string.menu_share_link) { dialog, whichButton ->\r\n            val sharingIntent = Intent(Intent.ACTION_SEND)\r\n            sharingIntent.type = \"text/plain\"\r\n            sharingIntent.putExtra(Intent.EXTRA_TEXT, url)\r\n            context.startActivity(\r\n                Intent.createChooser(\r\n                    sharingIntent,\r\n                    context.getString(R.string.menu_share_link)\r\n                )\r\n            )\r\n        }\r\n        builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        HelperUnit.setupDialog(context, dialog)\r\n    }\r\n\r\n    private fun getFileType(url: String, context: Context): String? {\r\n        val contentResolver: ContentResolver = context.contentResolver\r\n        val mimeTypeMap = MimeTypeMap.getSingleton()\r\n        return mimeTypeMap.getExtensionFromMimeType(contentResolver.getType(Uri.parse(url)))\r\n    }\r\n\r\n    fun downloadWithPath(\r\n        context: Context,\r\n        url: String,\r\n        contentDisposition: String?,\r\n        mimeType: String?,\r\n        filePathCallback: (Pair<String, String>) -> Unit?\r\n    ) {\r\n        Log.d(\"url3\", url.toString())\r\n        Log.d(\"mimeType3\", getFileType(url, context).toString())\r\n        val text =\r\n            context.getString(R.string.dialog_title_download) + \" - \" + URLUtil.guessFileName(\r\n                url,\r\n                contentDisposition,\r\n                getFileType(url, context)\r\n            )\r\n        val builder = AlertDialog.Builder(context)\r\n        builder.setTitle(R.string.app_warning)\r\n        builder.setMessage(text)\r\n        builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n            try {\r\n                val activity = context as Activity\r\n                val filename = URLUtil.guessFileName(\r\n                    url,\r\n                    contentDisposition,\r\n                    getFileType(url, context)\r\n                ) // Maybe unexpected filename.\r\n                if (url.startsWith(\"data:\")) {\r\n                    val dataURIParser = DataURIParser(url)\r\n                    if (BackupUnit.updateOrRequestPermission(context)) {\r\n                        val file = File(\r\n                            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),\r\n                            filename\r\n                        )\r\n                        val fos = FileOutputStream(file)\r\n                        fos.write(dataURIParser.imagedata)\r\n                    } else BackupUnit.requestPermission(activity)\r\n                } else {\r\n                    val request =\r\n                        DownloadManager.Request(Uri.parse(url))\r\n                    request.setMimeType(getFileType(url, context))\r\n                    //------------------------COOKIE!!------------------------\r\n                    val cookies =\r\n                        CookieManager.getInstance().getCookie(url)\r\n                    request.addRequestHeader(\"cookie\", cookies)\r\n                    //------------------------COOKIE!!------------------------\r\n                    //Log.d(\"mimeType\", mimeType.)\r\n                    request.setDescription(context.getString(R.string.dialog_title_download))\r\n                    request.setTitle(\r\n                        URLUtil.guessFileName(\r\n                            url,\r\n                            contentDisposition,\r\n                            getFileType(url, context)\r\n                        )\r\n                    )\r\n                    request.allowScanningByMediaScanner()\r\n                    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)\r\n                    val realName = URLUtil.guessFileName(\r\n                        url,\r\n                        contentDisposition,\r\n                        getFileType(url, context))\r\n                    Timber.d(\"TAG_FILE_NAME_1: ${Environment.DIRECTORY_DOWNLOADS}\")\r\n                    Timber.d(\r\n                        \"TAG_FILE_NAME_2: $realName\")\r\n                    Timber.d(\"TAG_FILE_NAME_3: ${Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)}\")\r\n\r\n                    val filePath = \"${Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)}/${\r\n                        realName}\"\r\n\r\n                    request.setDestinationInExternalPublicDir(\r\n                        Environment.DIRECTORY_DOWNLOADS,\r\n                        realName\r\n                    )\r\n                    val dm =\r\n                        (activity.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager)\r\n                    if (BackupUnit.updateOrRequestPermission(context)) {\r\n                        dm.enqueue(request)\r\n                        filePathCallback.invoke(Pair(filePath, realName))\r\n                    } else {\r\n                        BackupUnit.requestPermission(activity)\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                println(\"Error Downloading File: $e\")\r\n                Toast.makeText(\r\n                    context,\r\n                    context.getString(R.string.app_error) + e.toString()\r\n                        .substring(e.toString().indexOf(\":\")),\r\n                    Toast.LENGTH_LONG\r\n                ).show()\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        builder.setNeutralButton(R.string.menu_share_link) { dialog, whichButton ->\r\n            val sharingIntent = Intent(Intent.ACTION_SEND)\r\n            sharingIntent.type = \"text/plain\"\r\n            sharingIntent.putExtra(Intent.EXTRA_TEXT, url)\r\n            context.startActivity(\r\n                Intent.createChooser(\r\n                    sharingIntent,\r\n                    context.getString(R.string.menu_share_link)\r\n                )\r\n            )\r\n        }\r\n        builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        HelperUnit.setupDialog(context, dialog)\r\n    }\r\n\r\n    fun clearHome(context: Context?) {\r\n        val action = RecordAction(context)\r\n        action.open(true)\r\n        action.clearTable(RecordUnit.TABLE_START)\r\n        action.close()\r\n    }\r\n\r\n    fun clearCache(context: Context) {\r\n        try {\r\n            val dir = context.cacheDir\r\n            if (dir != null && dir.isDirectory) {\r\n                deleteDir(dir)\r\n            }\r\n        } catch (exception: Exception) {\r\n            Log.w(\"browser\", \"Error clearing cache\")\r\n        }\r\n    }\r\n\r\n    fun clearCookie() {\r\n        val cookieManager = CookieManager.getInstance()\r\n        cookieManager.flush()\r\n        cookieManager.removeAllCookies { value: Boolean? -> }\r\n    }\r\n\r\n    fun clearBookmark(context: Context) {\r\n        val action = RecordAction(context)\r\n        action.open(true)\r\n        action.clearTable(RecordUnit.TABLE_BOOKMARK)\r\n        action.close()\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {\r\n            val shortcutManager = context.getSystemService(\r\n                ShortcutManager::class.java\r\n            )\r\n            Objects.requireNonNull(shortcutManager).removeAllDynamicShortcuts()\r\n        }\r\n    }\r\n\r\n    fun clearHistory(context: Context) {\r\n        val action = RecordAction(context)\r\n        action.open(true)\r\n        action.clearTable(RecordUnit.TABLE_HISTORY)\r\n        action.close()\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {\r\n            val shortcutManager = context.getSystemService(\r\n                ShortcutManager::class.java\r\n            )\r\n            Objects.requireNonNull(shortcutManager).removeAllDynamicShortcuts()\r\n        }\r\n    }\r\n\r\n    fun intentURL(context: Context, uri: Uri?) {\r\n        val browserIntent = Intent(Intent.ACTION_VIEW)\r\n        browserIntent.data = uri\r\n        browserIntent.setPackage(\"web.browser.dragon\")\r\n        val chooser =\r\n            Intent.createChooser(browserIntent, context.getString(R.string.menu_open_with))\r\n        context.startActivity(chooser)\r\n    }\r\n\r\n    fun openInBackground(activity: Activity, intent: Intent, url: String?) {\r\n        val sp: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(activity)\r\n        if (sp.getBoolean(\r\n                \"sp_tabBackground\",\r\n                false\r\n            ) && intent.getPackage() != \"web.browser.dragon\"\r\n        ) {\r\n            val intentP = Intent(activity, BrowserActivity::class.java)\r\n            val pendingIntent =\r\n                PendingIntent.getActivity(activity, 0, intentP, PendingIntent.FLAG_IMMUTABLE)\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                val name = \"Opened Link\"\r\n                val description = \"url of links opened in the background -> click to open\"\r\n                val importance =\r\n                    NotificationManager.IMPORTANCE_HIGH //Important for heads-up notification\r\n                val channel = NotificationChannel(\"1\", name, importance)\r\n                channel.description = description\r\n                channel.setShowBadge(true)\r\n                channel.lockscreenVisibility = Notification.VISIBILITY_PUBLIC\r\n                val notificationManager = activity.getSystemService(\r\n                    NotificationManager::class.java\r\n                )\r\n                notificationManager.createNotificationChannel(channel)\r\n            }\r\n            val mBuilder: NotificationCompat.Builder = NotificationCompat.Builder(activity, \"1\")\r\n                .setSmallIcon(R.drawable.icon_web)\r\n                .setContentTitle(activity.getString(R.string.main_menu_new_tab))\r\n                .setContentText(url)\r\n                .setAutoCancel(true)\r\n                .setDefaults(NotificationCompat.DEFAULT_SOUND or NotificationCompat.DEFAULT_VIBRATE) //Important for heads-up notification\r\n                .setPriority(Notification.PRIORITY_MAX) //Important for heads-up notification\r\n                .setContentIntent(pendingIntent) //Set the intent that will fire when the user taps the notification\r\n            val buildNotification = mBuilder.build()\r\n            val mNotifyMgr =\r\n                activity.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n            mNotifyMgr.notify(1, buildNotification)\r\n            activity.moveTaskToBack(true)\r\n        }\r\n    }\r\n\r\n    fun clearIndexedDB(context: Context) {\r\n        val data = Environment.getDataDirectory()\r\n        val blob_storage =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//blob_storage\"\r\n        val databases =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//databases\"\r\n        val indexedDB =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//IndexedDB\"\r\n        val localStorage =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//Local Storage\"\r\n        val serviceWorker =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//Service Worker\"\r\n        val sessionStorage =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//Session Storage\"\r\n        val shared_proto_db =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//shared_proto_db\"\r\n        val VideoDecodeStats =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//VideoDecodeStats\"\r\n        val QuotaManager =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//QuotaManager\"\r\n        val QuotaManager_journal =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//QuotaManager-journal\"\r\n        val webData =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//Web Data\"\r\n        val WebDataJournal =\r\n            \"//data//\" + context.packageName + \"//app_webview//\" + \"//Default//\" + \"//Web Data-journal\"\r\n        val blob_storage_file = File(data, blob_storage)\r\n        val databases_file = File(data, databases)\r\n        val indexedDB_file = File(data, indexedDB)\r\n        val localStorage_file = File(data, localStorage)\r\n        val serviceWorker_file = File(data, serviceWorker)\r\n        val sessionStorage_file = File(data, sessionStorage)\r\n        val shared_proto_db_file = File(data, shared_proto_db)\r\n        val VideoDecodeStats_file = File(data, VideoDecodeStats)\r\n        val QuotaManager_file = File(data, QuotaManager)\r\n        val QuotaManager_journal_file = File(data, QuotaManager_journal)\r\n        val webData_file = File(data, webData)\r\n        val WebDataJournal_file = File(data, WebDataJournal)\r\n        deleteDir(blob_storage_file)\r\n        deleteDir(databases_file)\r\n        deleteDir(indexedDB_file)\r\n        deleteDir(localStorage_file)\r\n        deleteDir(serviceWorker_file)\r\n        deleteDir(sessionStorage_file)\r\n        deleteDir(shared_proto_db_file)\r\n        deleteDir(VideoDecodeStats_file)\r\n        deleteDir(QuotaManager_file)\r\n        deleteDir(QuotaManager_journal_file)\r\n        deleteDir(webData_file)\r\n        deleteDir(WebDataJournal_file)\r\n    }\r\n\r\n    fun deleteDir(dir: File?): Boolean {\r\n        if (dir != null && dir.isDirectory) {\r\n            val children = dir.list()\r\n            for (aChildren in Objects.requireNonNull(children)) {\r\n                val success = deleteDir(File(dir, aChildren))\r\n                if (!success) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return dir != null && dir.delete()\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/other/unit/BrowserUnit.kt b/app/src/main/java/web/browser/dragon/utils/other/unit/BrowserUnit.kt
--- a/app/src/main/java/web/browser/dragon/utils/other/unit/BrowserUnit.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/other/unit/BrowserUnit.kt	
@@ -394,7 +394,7 @@
     fun intentURL(context: Context, uri: Uri?) {
         val browserIntent = Intent(Intent.ACTION_VIEW)
         browserIntent.data = uri
-        browserIntent.setPackage("web.browser.dragon")
+        browserIntent.setPackage("web.browser.dragon.huawei")
         val chooser =
             Intent.createChooser(browserIntent, context.getString(R.string.menu_open_with))
         context.startActivity(chooser)
@@ -405,7 +405,7 @@
         if (sp.getBoolean(
                 "sp_tabBackground",
                 false
-            ) && intent.getPackage() != "web.browser.dragon"
+            ) && intent.getPackage() != "web.browser.dragon.huawei"
         ) {
             val intentP = Intent(activity, BrowserActivity::class.java)
             val pendingIntent =
Index: app/src/main/java/web/browser/dragon/utils/other/view/NinjaWebView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.other.view\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.annotation.TargetApi\r\nimport android.app.*\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Bitmap\r\nimport android.graphics.ColorMatrix\r\nimport android.graphics.ColorMatrixColorFilter\r\nimport android.graphics.Paint\r\nimport android.os.Build\r\nimport android.preference.PreferenceManager\r\nimport android.util.AttributeSet\r\nimport android.view.View\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.webkit.CookieManager\r\nimport android.webkit.WebSettings\r\nimport android.webkit.WebView\r\nimport android.widget.TextView\r\nimport androidx.cardview.widget.CardView\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.webkit.WebSettingsCompat\r\nimport androidx.webkit.WebViewFeature\r\nimport com.google.android.material.chip.Chip\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.ui.main.MainActivity\r\nimport web.browser.dragon.utils.other.browser.*\r\nimport web.browser.dragon.utils.other.database.FaviconHelper\r\nimport web.browser.dragon.utils.other.database.Record\r\nimport web.browser.dragon.utils.other.database.RecordAction\r\nimport web.browser.dragon.utils.other.unit.BrowserUnit\r\nimport timber.log.Timber\r\nimport java.lang.Exception\r\nimport java.util.*\r\n\r\nclass NinjaWebView : WebView, AlbumController {\r\n    private var onScrollChangeListener: OnScrollChangeListener? = null\r\n\r\n    constructor(context: Context?, attrs: AttributeSet?) : super(\r\n        context!!, attrs\r\n    ) {\r\n    }\r\n\r\n    constructor(context: Context?, attrs: AttributeSet?, defStyleAttr: Int) : super(\r\n        context!!, attrs, defStyleAttr\r\n    ) {\r\n    }\r\n\r\n    public override fun onScrollChanged(l: Int, t: Int, old_l: Int, old_t: Int) {\r\n        super.onScrollChanged(l, t, old_l, old_t)\r\n        if (onScrollChangeListener != null) onScrollChangeListener!!.onScrollChange(t, old_t)\r\n    }\r\n\r\n//    fun setOnScrollChangeListener(onScrollChangeListener: (Any, Any) -> Unit?) {\r\n//        this.onScrollChangeListener = onScrollChangeListener\r\n//    }\r\n\r\n    fun setOnScrollChangeListener(onScrollChangeListener: OnScrollChangeListener) {\r\n        this.onScrollChangeListener = onScrollChangeListener\r\n    }\r\n\r\n    interface OnScrollChangeListener {\r\n        /**\r\n         * Called when the scroll position of a view changes.\r\n         *\r\n         * @param scrollY    Current vertical scroll origin.\r\n         * @param oldScrollY Previous vertical scroll origin.\r\n         */\r\n        fun onScrollChange(scrollY: Int, oldScrollY: Int)\r\n    }\r\n\r\n//    private var context: Context? = null\r\n    var isDesktopMode = false\r\n        private set\r\n    var isNightMode = false\r\n        private set\r\n    var isFingerPrintProtection = false\r\n    var isHistory = false\r\n    var isAdBlock = false\r\n    var isSaveData = false\r\n    var isCamera = false\r\n    private var stopped = false\r\n    private var album: AlbumItem? = null\r\n    var predecessor: AlbumController? = null\r\n    private var webViewClient: NinjaWebViewClient? = null\r\n    private var webChromeClient: NinjaWebChromeClient? = null\r\n    private var downloadListener: NinjaDownloadListener? = null\r\n    var profile: String? = null\r\n        private set\r\n    var isBackPressed = false\r\n    fun setIsBackPressed(isBackPressed: Boolean) {\r\n        this.isBackPressed = isBackPressed\r\n    }\r\n\r\n    private var listTrusted: List_trusted? = null\r\n    private var listStandard: List_standard? = null\r\n    private var listProtected: List_protected? = null\r\n    private var favicon: Bitmap? = null\r\n    private var sp: SharedPreferences? = null\r\n    var isForeground = false\r\n        private set\r\n    private var browserController: BrowserController? = null\r\n    fun getBrowserController(): BrowserController? {\r\n        return browserController\r\n    }\r\n\r\n    fun setBrowserController(browserController: BrowserController?) {\r\n        this.browserController = browserController\r\n        if (browserController != null) {\r\n            album?.setBrowserController(browserController)\r\n        }\r\n    }\r\n\r\n    constructor(context: Context?) : super(context!!) {\r\n        sp = PreferenceManager.getDefaultSharedPreferences(context)\r\n        val profile = sp!!.getString(\"profile\", \"standard\")\r\n//        this.context = context\r\n        isForeground = false\r\n        isDesktopMode = false\r\n        isNightMode = false\r\n        isBackPressed = false\r\n        isFingerPrintProtection = sp!!.getBoolean(profile + \"_fingerPrintProtection\", true)\r\n        isHistory = sp!!.getBoolean(profile + \"_history\", true)\r\n        isAdBlock = sp!!.getBoolean(profile + \"_adBlock\", false)\r\n        isSaveData = sp!!.getBoolean(profile + \"_saveData\", false)\r\n        isCamera = sp!!.getBoolean(profile + \"_camera\", false)\r\n        stopped = false\r\n        listTrusted = List_trusted(this.context!!)\r\n        listStandard = List_standard(this.context)\r\n        listProtected = List_protected(this.context)\r\n        album = browserController?.let { AlbumItem(this.context, this, it) }\r\n        webViewClient = NinjaWebViewClient(this)\r\n        webChromeClient = NinjaWebChromeClient(this)\r\n        downloadListener = NinjaDownloadListener(this.context)\r\n        initWebView()\r\n        initAlbum()\r\n    }\r\n\r\n    @Synchronized\r\n    private fun initWebView() {\r\n        webViewClient?.let { setWebViewClient(it) }\r\n        setWebChromeClient(webChromeClient)\r\n        setDownloadListener(downloadListener)\r\n    }\r\n\r\n    @SuppressLint(\"SetJavaScriptEnabled\")\r\n    @TargetApi(Build.VERSION_CODES.O)\r\n    @Synchronized\r\n    fun initPreferences(url: String?) {\r\n        sp = PreferenceManager.getDefaultSharedPreferences(context)\r\n        profile = sp!!.getString(\"profile\", \"profileStandard\")\r\n        val profileOriginal = profile\r\n        val webSettings = settings\r\n        val userAgent = getUserAgent(isDesktopMode)\r\n        webSettings.setUserAgentString(userAgent)\r\n        if (Build.VERSION.SDK_INT >= 26) webSettings.safeBrowsingEnabled = true\r\n        webSettings.setSupportZoom(true)\r\n        webSettings.builtInZoomControls = true\r\n        webSettings.displayZoomControls = false\r\n        webSettings.setSupportMultipleWindows(true)\r\n        webSettings.textZoom =\r\n            Objects.requireNonNull(sp!!.getString(\"sp_fontSize\", \"100\"))?.toInt()!!\r\n        if (sp!!.getBoolean(\"sp_autofill\", true)) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) this.importantForAutofill =\r\n                IMPORTANT_FOR_AUTOFILL_YES else webSettings.saveFormData =\r\n                true\r\n        } else {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) this.importantForAutofill =\r\n                IMPORTANT_FOR_AUTOFILL_NO else webSettings.saveFormData =\r\n                false\r\n        }\r\n        if (listTrusted?.isWhite(url) == true) profile =\r\n            \"profileTrusted\" else if (listStandard?.isWhite(url) == true) profile =\r\n            \"profileStandard\" else if (listProtected?.isWhite(url) == true) profile = \"profileProtected\"\r\n        webSettings.mediaPlaybackRequiresUserGesture = sp!!.getBoolean(profile + \"_saveData\", true)\r\n        webSettings.blockNetworkImage = !sp!!.getBoolean(profile + \"_images\", true)\r\n        webSettings.setGeolocationEnabled(sp!!.getBoolean(profile + \"_location\", false))\r\n//        webSettings.javaScriptEnabled = sp!!.getBoolean(profile + \"_javascript\", true)\r\n        webSettings.javaScriptEnabled = true\r\n        webSettings.javaScriptCanOpenWindowsAutomatically = sp!!.getBoolean(profile + \"_javascriptPopUp\", false)\r\n//        webSettings.domStorageEnabled = sp!!.getBoolean(profile + \"_dom\", false)\r\n        webSettings.domStorageEnabled = true\r\n        isFingerPrintProtection = sp!!.getBoolean(profile + \"_fingerPrintProtection\", true)\r\n        isHistory = sp!!.getBoolean(profile + \"_saveHistory\", true)\r\n        isAdBlock = sp!!.getBoolean(profile + \"_adBlock\", true)\r\n        isSaveData = sp!!.getBoolean(profile + \"_saveData\", true)\r\n        isCamera = sp!!.getBoolean(profile + \"_camera\", true)\r\n        initCookieManager(url)\r\n        profile = profileOriginal\r\n    }\r\n\r\n    @Synchronized\r\n    fun initCookieManager(url: String?) {\r\n        sp = PreferenceManager.getDefaultSharedPreferences(context)\r\n        profile = sp!!.getString(\"profile\", \"profileStandard\")\r\n        val profileOriginal = profile\r\n        if (listTrusted?.isWhite(url) == true) profile =\r\n            \"profileTrusted\" else if (listStandard?.isWhite(url) == true) profile =\r\n            \"profileStandard\" else if (listProtected?.isWhite(url) == true) profile = \"profileProtected\"\r\n        val manager = CookieManager.getInstance()\r\n        if (sp!!.getBoolean(profile + \"_cookies\", false)) {\r\n            manager.setAcceptCookie(true)\r\n            manager.getCookie(url)\r\n        } else manager.setAcceptCookie(false)\r\n        profile = profileOriginal\r\n    }\r\n\r\n    fun setProfileIcon(omniBox_tab: FloatingActionButton) {\r\n        val url = this.url!!\r\n        when (profile) {\r\n            \"profileTrusted\" -> omniBox_tab.setImageResource(R.drawable.icon_profile_trusted)\r\n            \"profileStandard\" -> omniBox_tab.setImageResource(R.drawable.icon_profile_standard)\r\n            \"profileProtected\" -> omniBox_tab.setImageResource(R.drawable.icon_profile_protected)\r\n            else -> omniBox_tab.setImageResource(R.drawable.icon_profile_changed)\r\n        }\r\n        if (listTrusted?.isWhite(url) == true) omniBox_tab.setImageResource(R.drawable.icon_profile_trusted) else if (listStandard?.isWhite(\r\n                url\r\n            ) == true\r\n        ) omniBox_tab.setImageResource(R.drawable.icon_profile_standard) else if (listProtected?.isWhite(\r\n                url\r\n            ) == true\r\n        ) omniBox_tab.setImageResource(R.drawable.icon_profile_protected)\r\n    }\r\n\r\n    fun setProfileDefaultValues() {\r\n        sp!!.edit()\r\n            .putBoolean(\"profileTrusted_saveData\", true)\r\n            .putBoolean(\"profileTrusted_images\", true)\r\n            .putBoolean(\"profileTrusted_adBlock\", true)\r\n            .putBoolean(\"profileTrusted_location\", false)\r\n            .putBoolean(\"profileTrusted_fingerPrintProtection\", false)\r\n            .putBoolean(\"profileTrusted_cookies\", true)\r\n            .putBoolean(\"profileTrusted_javascript\", true)\r\n            .putBoolean(\"profileTrusted_javascriptPopUp\", true)\r\n            .putBoolean(\"profileTrusted_saveHistory\", true)\r\n            .putBoolean(\"profileTrusted_camera\", false)\r\n            .putBoolean(\"profileTrusted_microphone\", false)\r\n            .putBoolean(\"profileTrusted_dom\", true)\r\n            .putBoolean(\"profileStandard_saveData\", true)\r\n            .putBoolean(\"profileStandard_images\", true)\r\n            .putBoolean(\"profileStandard_adBlock\", true)\r\n            .putBoolean(\"profileStandard_location\", false)\r\n            .putBoolean(\"profileStandard_fingerPrintProtection\", true)\r\n            .putBoolean(\"profileStandard_cookies\", false)\r\n            .putBoolean(\"profileStandard_javascript\", true)\r\n            .putBoolean(\"profileStandard_javascriptPopUp\", false)\r\n            .putBoolean(\"profileStandard_saveHistory\", true)\r\n            .putBoolean(\"profileStandard_camera\", false)\r\n            .putBoolean(\"profileStandard_microphone\", false)\r\n            .putBoolean(\"profileStandard_dom\", false)\r\n            .putBoolean(\"profileProtected_saveData\", true)\r\n            .putBoolean(\"profileProtected_images\", true)\r\n            .putBoolean(\"profileProtected_adBlock\", true)\r\n            .putBoolean(\"profileProtected_location\", false)\r\n            .putBoolean(\"profileProtected_fingerPrintProtection\", true)\r\n            .putBoolean(\"profileProtected_cookies\", false)\r\n            .putBoolean(\"profileProtected_javascript\", false)\r\n            .putBoolean(\"profileProtected_javascriptPopUp\", false)\r\n            .putBoolean(\"profileProtected_saveHistory\", true)\r\n            .putBoolean(\"profileProtected_camera\", false)\r\n            .putBoolean(\"profileProtected_microphone\", false)\r\n            .putBoolean(\"profileProtected_dom\", false).apply()\r\n    }\r\n\r\n    fun setProfileChanged() {\r\n        sp!!.edit()\r\n            .putBoolean(\"profileChanged_saveData\", sp!!.getBoolean(profile + \"_saveData\", true))\r\n            .putBoolean(\"profileChanged_images\", sp!!.getBoolean(profile + \"_images\", true))\r\n            .putBoolean(\"profileChanged_adBlock\", sp!!.getBoolean(profile + \"_adBlock\", true))\r\n            .putBoolean(\"profileChanged_location\", sp!!.getBoolean(profile + \"_location\", false))\r\n            .putBoolean(\r\n                \"profileChanged_fingerPrintProtection\",\r\n                sp!!.getBoolean(profile + \"_fingerPrintProtection\", true)\r\n            )\r\n            .putBoolean(\"profileChanged_cookies\", sp!!.getBoolean(profile + \"_cookies\", false))\r\n            .putBoolean(\"profileChanged_javascript\", sp!!.getBoolean(profile + \"_javascript\", true))\r\n            .putBoolean(\r\n                \"profileChanged_javascriptPopUp\",\r\n                sp!!.getBoolean(profile + \"_javascriptPopUp\", false)\r\n            )\r\n            .putBoolean(\r\n                \"profileChanged_saveHistory\",\r\n                sp!!.getBoolean(profile + \"_saveHistory\", true)\r\n            )\r\n            .putBoolean(\"profileChanged_camera\", sp!!.getBoolean(profile + \"_camera\", false))\r\n            .putBoolean(\r\n                \"profileChanged_microphone\",\r\n                sp!!.getBoolean(profile + \"_microphone\", false)\r\n            )\r\n            .putBoolean(\"profileChanged_dom\", sp!!.getBoolean(profile + \"_dom\", false))\r\n            .putString(\"profile\", \"profileChanged\").apply()\r\n    }\r\n\r\n    fun putProfileBoolean(\r\n        string: String?, dialog_titleProfile: TextView, chip_profile_trusted: Chip,\r\n        chip_profile_standard: Chip, chip_profile_protected: Chip, chip_profile_changed: Chip\r\n    ) {\r\n        when (string) {\r\n            \"_images\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_images\",\r\n                !sp!!.getBoolean(\"profileChanged_images\", true)\r\n            ).apply()\r\n            \"_javascript\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_javascript\",\r\n                !sp!!.getBoolean(\"profileChanged_javascript\", true)\r\n            ).apply()\r\n            \"_javascriptPopUp\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_javascriptPopUp\",\r\n                !sp!!.getBoolean(\"profileChanged_javascriptPopUp\", false)\r\n            ).apply()\r\n            \"_cookies\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_cookies\",\r\n                !sp!!.getBoolean(\"profileChanged_cookies\", false)\r\n            ).apply()\r\n            \"_fingerPrintProtection\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_fingerPrintProtection\",\r\n                !sp!!.getBoolean(\"profileChanged_fingerPrintProtection\", true)\r\n            ).apply()\r\n            \"_adBlock\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_adBlock\",\r\n                !sp!!.getBoolean(\"profileChanged_adBlock\", true)\r\n            ).apply()\r\n            \"_saveData\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_saveData\",\r\n                !sp!!.getBoolean(\"profileChanged_saveData\", true)\r\n            ).apply()\r\n            \"_saveHistory\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_saveHistory\",\r\n                !sp!!.getBoolean(\"profileChanged_saveHistory\", true)\r\n            ).apply()\r\n            \"_location\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_location\",\r\n                !sp!!.getBoolean(\"profileChanged_location\", false)\r\n            ).apply()\r\n            \"_camera\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_camera\",\r\n                !sp!!.getBoolean(\"profileChanged_camera\", false)\r\n            ).apply()\r\n            \"_microphone\" -> sp!!.edit().putBoolean(\r\n                \"profileChanged_microphone\",\r\n                !sp!!.getBoolean(\"profileChanged_microphone\", false)\r\n            ).apply()\r\n            \"_dom\" -> sp!!.edit()\r\n                .putBoolean(\"profileChanged_dom\", !sp!!.getBoolean(\"profileChanged_dom\", false))\r\n                .apply()\r\n        }\r\n        initPreferences(\"\")\r\n        val textTitle: String\r\n        when (Objects.requireNonNull(profile)) {\r\n            \"profileTrusted\" -> {\r\n                chip_profile_trusted.isChecked = true\r\n                chip_profile_standard.isChecked = false\r\n                chip_profile_protected.isChecked = false\r\n                chip_profile_changed.isChecked = false\r\n                textTitle =\r\n                    context!!.getString(R.string.setting_title_profiles_active) + \": \" + context!!.getString(\r\n                        R.string.setting_title_profiles_trusted\r\n                    )\r\n            }\r\n            \"profileStandard\" -> {\r\n                chip_profile_trusted.isChecked = false\r\n                chip_profile_standard.isChecked = true\r\n                chip_profile_protected.isChecked = false\r\n                chip_profile_changed.isChecked = false\r\n                textTitle =\r\n                    context!!.getString(R.string.setting_title_profiles_active) + \": \" + context!!.getString(\r\n                        R.string.setting_title_profiles_standard\r\n                    )\r\n            }\r\n            \"profileProtected\" -> {\r\n                chip_profile_trusted.isChecked = false\r\n                chip_profile_standard.isChecked = false\r\n                chip_profile_protected.isChecked = true\r\n                chip_profile_changed.isChecked = false\r\n                textTitle =\r\n                    context!!.getString(R.string.setting_title_profiles_active) + \": \" + context!!.getString(\r\n                        R.string.setting_title_profiles_protected\r\n                    )\r\n            }\r\n            else -> {\r\n                chip_profile_trusted.isChecked = false\r\n                chip_profile_standard.isChecked = false\r\n                chip_profile_protected.isChecked = false\r\n                chip_profile_changed.isChecked = true\r\n                textTitle =\r\n                    context!!.getString(R.string.setting_title_profiles_active) + \": \" + context!!.getString(\r\n                        R.string.setting_title_profiles_changed\r\n                    )\r\n            }\r\n        }\r\n        dialog_titleProfile.text = textTitle\r\n    }\r\n\r\n    fun getBoolean(string: String?): Boolean {\r\n        return when (string) {\r\n            \"_images\" -> sp!!.getBoolean(profile + \"_images\", true)\r\n            \"_javascript\" -> sp!!.getBoolean(profile + \"_javascript\", true)\r\n            \"_javascriptPopUp\" -> sp!!.getBoolean(profile + \"_javascriptPopUp\", false)\r\n            \"_cookies\" -> sp!!.getBoolean(profile + \"_cookies\", false)\r\n            \"_fingerPrintProtection\" -> sp!!.getBoolean(profile + \"_fingerPrintProtection\", true)\r\n            \"_adBlock\" -> sp!!.getBoolean(profile + \"_adBlock\", true)\r\n            \"_saveData\" -> sp!!.getBoolean(profile + \"_saveData\", true)\r\n            \"_saveHistory\" -> sp!!.getBoolean(profile + \"_saveHistory\", true)\r\n            \"_location\" -> sp!!.getBoolean(profile + \"_location\", false)\r\n            \"_camera\" -> sp!!.getBoolean(profile + \"_camera\", false)\r\n            \"_microphone\" -> sp!!.getBoolean(profile + \"_microphone\", false)\r\n            \"_dom\" -> sp!!.getBoolean(profile + \"_dom\", false)\r\n            else -> false\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun initAlbum() {\r\n        album?.setAlbumTitle(context?.getString(R.string.app_name))\r\n        browserController?.let { album?.setBrowserController(it) }\r\n    }\r\n\r\n    //  Server-side detection for GlobalPrivacyControl\r\n    @get:Synchronized\r\n    val requestHeaders: HashMap<String, String>\r\n        get() {\r\n            val requestHeaders = HashMap<String, String>()\r\n            requestHeaders[\"DNT\"] = \"1\"\r\n            //  Server-side detection for GlobalPrivacyControl\r\n            requestHeaders[\"Sec-GPC\"] = \"1\"\r\n            requestHeaders[\"X-Requested-With\"] = \"com.duckduckgo.mobile.android\"\r\n            profile = sp!!.getString(\"profile\", \"profileStandard\")\r\n            if (sp!!.getBoolean(profile + \"_saveData\", false)) requestHeaders[\"Save-Data\"] = \"on\"\r\n            return requestHeaders\r\n        }\r\n\r\n    override fun onWindowVisibilityChanged(visibility: Int) {\r\n        if (sp!!.getBoolean(\"sp_audioBackground\", false)) {\r\n            val mNotifyMgr =\r\n                context!!.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n            if (visibility == GONE) {\r\n                val intentP = Intent(context, MainActivity::class.java)\r\n                val pendingIntent =\r\n                    PendingIntent.getActivity(context, 0, intentP, PendingIntent.FLAG_IMMUTABLE)\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                    val name = \"Audio background\"\r\n                    val description = \"Play audio on background -> click to open\"\r\n                    val importance =\r\n                        NotificationManager.IMPORTANCE_LOW //Important for heads-up notification\r\n                    val channel = NotificationChannel(\"2\", name, importance)\r\n                    channel.description = description\r\n                    channel.setShowBadge(true)\r\n                    channel.lockscreenVisibility = Notification.VISIBILITY_PUBLIC\r\n                    val notificationManager = context!!.getSystemService(\r\n                        NotificationManager::class.java\r\n                    )\r\n                    notificationManager.createNotificationChannel(channel)\r\n                }\r\n                val mBuilder: NotificationCompat.Builder = NotificationCompat.Builder(\r\n                    context!!, \"2\"\r\n                )\r\n                    .setSmallIcon(R.drawable.icon_audio)\r\n                    .setAutoCancel(true)\r\n                    .setContentTitle(this.title)\r\n                    .setContentText(context!!.getString(R.string.setting_title_audioBackground))\r\n                    .setContentIntent(pendingIntent) //Set the intent that will fire when the user taps the notification\r\n                val buildNotification = mBuilder.build()\r\n                mNotifyMgr.notify(2, buildNotification)\r\n            } else mNotifyMgr.cancel(2)\r\n            super.onWindowVisibilityChanged(VISIBLE)\r\n        } else super.onWindowVisibilityChanged(visibility)\r\n    }\r\n\r\n    @Synchronized\r\n    override fun stopLoading() {\r\n        stopped = true\r\n        super.stopLoading()\r\n    }\r\n\r\n    @Synchronized\r\n    fun reloadWithoutInit() {  //needed for camera usage without deactivating \"save_data\"\r\n        stopped = false\r\n        super.reload()\r\n    }\r\n\r\n    @Synchronized\r\n    override fun reload() {\r\n        stopped = false\r\n        initPreferences(this.url)\r\n        super.reload()\r\n    }\r\n\r\n    @Synchronized\r\n    override fun loadUrl(url: String) {\r\n        Timber.d(\"TAG_NinjaWebView_1\")\r\n        initPreferences(BrowserUnit.queryWrapper(context, url.trim { it <= ' ' }))\r\n        val imm = context!!.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n        imm.hideSoftInputFromWindow(this.windowToken, 0)\r\n        favicon = null\r\n        stopped = false\r\n        super.loadUrl(BrowserUnit.queryWrapper(context, url.trim { it <= ' ' }), requestHeaders)\r\n    }\r\n\r\n    override val albumView: View?\r\n        get() = album?.albumView\r\n\r\n    fun setAlbumTitle(title: String?, url: String?) {\r\n        album?.setAlbumTitle(title)\r\n        val cardView: CardView? = albumView?.findViewById(R.id.cardView)\r\n        cardView?.visibility = VISIBLE\r\n        albumView?.let {\r\n            FaviconHelper.setFavicon(\r\n                context,\r\n                it,\r\n                url,\r\n                R.id.faviconView,\r\n                R.drawable.icon_image_broken\r\n            )\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    override fun activate() {\r\n        requestFocus()\r\n        isForeground = true\r\n        album?.activate()\r\n    }\r\n\r\n    @Synchronized\r\n    override fun deactivate() {\r\n        clearFocus()\r\n        isForeground = false\r\n        album?.deactivate()\r\n    }\r\n\r\n    @Synchronized\r\n    fun updateTitle(progress: Int) {\r\n        if (isForeground && !stopped) browserController?.updateProgress(progress) else if (isForeground) browserController?.updateProgress(\r\n            BrowserUnit.LOADING_STOPPED\r\n        )\r\n    }\r\n\r\n    @Synchronized\r\n    fun updateTitle(title: String?) {\r\n        album?.setAlbumTitle(title)\r\n    }\r\n\r\n    @Synchronized\r\n    fun updateFavicon(url: String?) {\r\n        val cardView: CardView? = albumView?.findViewById(R.id.cardView)\r\n        cardView?.visibility = VISIBLE\r\n        albumView?.let {\r\n            FaviconHelper.setFavicon(\r\n                context,\r\n                it,\r\n                url,\r\n                R.id.faviconView,\r\n                R.drawable.icon_image_broken\r\n            )\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    override fun destroy() {\r\n        stopLoading()\r\n        onPause()\r\n        clearHistory()\r\n        visibility = GONE\r\n        removeAllViews()\r\n        super.destroy()\r\n    }\r\n\r\n    fun getUserAgent(desktopMode: Boolean): String? {\r\n        val mobilePrefix = \"Mozilla/5.0 (Linux; Android \" + Build.VERSION.RELEASE + \")\"\r\n        val desktopPrefix = \"Mozilla/5.0 (X11; Linux \" + System.getProperty(\"os.arch\") + \")\"\r\n        var newUserAgent = WebSettings.getDefaultUserAgent(context)\r\n        val prefix = newUserAgent!!.substring(0, newUserAgent.indexOf(\")\") + 1)\r\n        if (desktopMode) {\r\n            try {\r\n                newUserAgent = newUserAgent.replace(prefix, desktopPrefix)\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        } else {\r\n            try {\r\n                newUserAgent = newUserAgent.replace(prefix, mobilePrefix)\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n\r\n        //Override UserAgent if own UserAgent is defined\r\n        if (!sp!!.contains(\"userAgentSwitch\")) {  //if new switch_text_preference has never been used initialize the switch\r\n            if (Objects.requireNonNull(sp!!.getString(\"sp_userAgent\", \"\")) == \"\") {\r\n                sp!!.edit().putBoolean(\"userAgentSwitch\", false).apply()\r\n            } else sp!!.edit().putBoolean(\"userAgentSwitch\", true).apply()\r\n        }\r\n        val ownUserAgent = sp!!.getString(\"sp_userAgent\", \"\")!!\r\n        if (ownUserAgent != \"\" && sp!!.getBoolean(\"userAgentSwitch\", false)) newUserAgent =\r\n            ownUserAgent\r\n        return newUserAgent\r\n    }\r\n\r\n    fun toggleDesktopMode(reload: Boolean) {\r\n        isDesktopMode = !isDesktopMode\r\n        val newUserAgent = getUserAgent(isDesktopMode)\r\n        settings.setUserAgentString(newUserAgent)\r\n        settings.useWideViewPort = isDesktopMode\r\n        settings.setSupportZoom(isDesktopMode)\r\n        settings.loadWithOverviewMode = isDesktopMode\r\n        if (reload) reload()\r\n    }\r\n\r\n    fun toggleNightMode() {\r\n        isNightMode = !isNightMode\r\n        if (isNightMode) {\r\n            if (WebViewFeature.isFeatureSupported(WebViewFeature.FORCE_DARK)) WebSettingsCompat.setForceDark(\r\n                this.settings,\r\n                WebSettingsCompat.FORCE_DARK_ON\r\n            ) else {\r\n                val paint = Paint()\r\n                val matrix = ColorMatrix()\r\n                matrix.set(NEGATIVE_COLOR)\r\n                val gcm = ColorMatrix()\r\n                gcm.setSaturation(0f)\r\n                val concat = ColorMatrix()\r\n                concat.setConcat(matrix, gcm)\r\n                val filter = ColorMatrixColorFilter(concat)\r\n                paint.colorFilter = filter\r\n                // maybe sometime LAYER_TYPE_NONE would better?\r\n                setLayerType(LAYER_TYPE_HARDWARE, paint)\r\n            }\r\n        } else {\r\n            if (WebViewFeature.isFeatureSupported(WebViewFeature.FORCE_DARK)) WebSettingsCompat.setForceDark(\r\n                this.settings,\r\n                WebSettingsCompat.FORCE_DARK_OFF\r\n            ) else setLayerType(\r\n                LAYER_TYPE_HARDWARE, null\r\n            )\r\n        }\r\n    }\r\n\r\n    fun resetFavicon() {\r\n        favicon = null\r\n    }\r\n\r\n    fun setFavicon(favicon: Bitmap?) {\r\n        this.favicon = favicon\r\n        //Save faviconView for existing bookmarks or start site entries\r\n        val faviconHelper = FaviconHelper(context)\r\n        val action = RecordAction(context)\r\n        action.open(false)\r\n        val list: List<Record> = action.listEntries(context as? Activity)\r\n        action.close()\r\n        for (listItem in list) {\r\n            if (listItem.uRL\r\n                    .equals(url) && faviconHelper.getFavicon(listItem.uRL) == null\r\n            ) faviconHelper.addFavicon(\r\n                context,\r\n                url, getFavicon()\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun getFavicon(): Bitmap? {\r\n        return favicon\r\n    }\r\n\r\n    fun setStopped(stopped: Boolean) {\r\n        this.stopped = stopped\r\n    }\r\n\r\n    companion object {\r\n        private val NEGATIVE_COLOR = floatArrayOf(\r\n            -1.0f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            255f,\r\n            0f,\r\n            -1.0f,\r\n            0f,\r\n            0f,\r\n            255f,\r\n            0f,\r\n            0f,\r\n            -1.0f,\r\n            0f,\r\n            255f,\r\n            0f,\r\n            0f,\r\n            0f,\r\n            1.0f,\r\n            0f\r\n        )\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/other/view/NinjaWebView.kt b/app/src/main/java/web/browser/dragon/utils/other/view/NinjaWebView.kt
--- a/app/src/main/java/web/browser/dragon/utils/other/view/NinjaWebView.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/other/view/NinjaWebView.kt	
@@ -15,9 +15,7 @@
 import android.util.AttributeSet
 import android.view.View
 import android.view.inputmethod.InputMethodManager
-import android.webkit.CookieManager
-import android.webkit.WebSettings
-import android.webkit.WebView
+import android.webkit.*
 import android.widget.TextView
 import androidx.cardview.widget.CardView
 import androidx.core.app.NotificationCompat
@@ -25,17 +23,18 @@
 import androidx.webkit.WebViewFeature
 import com.google.android.material.chip.Chip
 import com.google.android.material.floatingactionbutton.FloatingActionButton
+import kotlinx.android.synthetic.main.content_scrolling.view.*
+import timber.log.Timber
 import web.browser.dragon.R
-import web.browser.dragon.ui.main.MainActivity
 import web.browser.dragon.utils.other.browser.*
 import web.browser.dragon.utils.other.database.FaviconHelper
 import web.browser.dragon.utils.other.database.Record
 import web.browser.dragon.utils.other.database.RecordAction
 import web.browser.dragon.utils.other.unit.BrowserUnit
-import timber.log.Timber
-import java.lang.Exception
+import web.browser.dragon.ui.main.MainActivity
 import java.util.*
 
+
 class NinjaWebView : WebView, AlbumController {
     private var onScrollChangeListener: OnScrollChangeListener? = null
 
@@ -135,10 +134,23 @@
         webViewClient = NinjaWebViewClient(this)
         webChromeClient = NinjaWebChromeClient(this)
         downloadListener = NinjaDownloadListener(this.context)
+        webView.webChromeClient = object : WebChromeClient() {
+
+            override fun onGeolocationPermissionsShowPrompt(
+                origin: String,
+                callback: GeolocationPermissions.Callback
+            ) {
+                callback.invoke(origin, true, false)
+            }
+        }
+
+
+
         initWebView()
         initAlbum()
     }
 
+
     @Synchronized
     private fun initWebView() {
         webViewClient?.let { setWebViewClient(it) }
@@ -155,10 +167,18 @@
         val profileOriginal = profile
         val webSettings = settings
         val userAgent = getUserAgent(isDesktopMode)
-        webSettings.setUserAgentString(userAgent)
+        webSettings.userAgentString = userAgent
         if (Build.VERSION.SDK_INT >= 26) webSettings.safeBrowsingEnabled = true
         webSettings.setSupportZoom(true)
         webSettings.builtInZoomControls = true
+        webSettings.setGeolocationEnabled(true)
+        webSettings.javaScriptEnabled = true
+        webSettings.javaScriptCanOpenWindowsAutomatically = true
+
+        //Не помогает с геолокацией
+//        webSettings.setAppCacheEnabled(true)
+//        webSettings.setDatabaseEnabled(true)
+//        webSettings.setDomStorageEnabled(true)
         webSettings.displayZoomControls = false
         webSettings.setSupportMultipleWindows(true)
         webSettings.textZoom =
@@ -558,6 +578,7 @@
         }
     }
 
+
     @Synchronized
     override fun destroy() {
         stopLoading()
@@ -609,6 +630,7 @@
         if (reload) reload()
     }
 
+
     fun toggleNightMode() {
         isNightMode = !isNightMode
         if (isNightMode) {
@@ -668,6 +690,7 @@
         this.stopped = stopped
     }
 
+
     companion object {
         private val NEGATIVE_COLOR = floatArrayOf(
             -1.0f,
@@ -692,4 +715,8 @@
             0f
         )
     }
+
+
+
+
 }
\ No newline at end of file
Index: app/src/main/java/web/browser/dragon/utils/other/unit/BackupUnit.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.other.unit\r\n\r\nimport android.Manifest\r\nimport android.Manifest.permission\r\nimport android.app.Activity\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Build.VERSION\r\nimport android.os.Environment\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.os.storage.StorageManager\r\nimport android.provider.Settings\r\nimport android.util.Log\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.app.ActivityCompat.startActivityForResult\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.content.ContextCompat.getSystemService\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\nimport com.segment.analytics.kotlin.android.plugins.getSystemService\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.ui.browser.BrowserActivity\r\nimport web.browser.dragon.utils.other.NinjaToast\r\nimport web.browser.dragon.utils.other.browser.List_protected\r\nimport web.browser.dragon.utils.other.browser.List_standard\r\nimport web.browser.dragon.utils.other.browser.List_trusted\r\nimport web.browser.dragon.utils.other.database.Record\r\nimport web.browser.dragon.utils.other.database.RecordAction\r\nimport java.io.*\r\nimport java.lang.Exception\r\nimport java.util.ArrayList\r\nimport java.util.concurrent.Executors\r\n\r\nobject BackupUnit {\r\n    private const val BOOKMARK_TYPE = \"<DT><A HREF=\\\"{url}\\\" ADD_DATE=\\\"{time}\\\">{title}</A>\"\r\n    private const val BOOKMARK_TITLE = \"{title}\"\r\n    private const val BOOKMARK_URL = \"{url}\"\r\n    private const val BOOKMARK_TIME = \"{time}\"\r\n    const val PERMISSION_REQUEST_CODE = 123\r\n    private var isReadPermissionGranted = false\r\n    private var isWritePermissionGranted = false\r\n    private lateinit var permissionLauncher: ActivityResultLauncher<Array<String>>\r\n\r\n    fun checkPermissionStorage(context: Context?): Boolean {\r\n        return if (VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n            Environment.isExternalStorageManager()\r\n        } else {\r\n            val result =\r\n                ContextCompat.checkSelfPermission(context!!, permission.READ_EXTERNAL_STORAGE)\r\n            val result1 =\r\n                ContextCompat.checkSelfPermission(context, permission.WRITE_EXTERNAL_STORAGE)\r\n            result == PackageManager.PERMISSION_GRANTED && result1 == PackageManager.PERMISSION_GRANTED\r\n        }\r\n    }\r\n    fun updateOrRequestPermission(context: Context?):Boolean {\r\n        val hasReadPermission = context?.let {\r\n            ContextCompat.checkSelfPermission(\r\n                it, Manifest.permission.READ_EXTERNAL_STORAGE\r\n            )\r\n        } == PackageManager.PERMISSION_GRANTED\r\n        val hasWritePermission = context?.let {\r\n            ContextCompat.checkSelfPermission(\r\n                it, Manifest.permission.WRITE_EXTERNAL_STORAGE\r\n            )\r\n        } == PackageManager.PERMISSION_GRANTED\r\n        val minSdk29 = Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q\r\n        isReadPermissionGranted = hasReadPermission\r\n        isWritePermissionGranted = hasWritePermission || minSdk29\r\n\r\n        val permissionToRequest = mutableListOf<String>()\r\n        if (!isWritePermissionGranted) {\r\n            permissionToRequest.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)\r\n        }\r\n        if (!isReadPermissionGranted) {\r\n            permissionToRequest.add(Manifest.permission.READ_EXTERNAL_STORAGE)\r\n        }\r\n        if (permissionToRequest.isNotEmpty()) {\r\n            permissionLauncher.launch(permissionToRequest.toTypedArray())\r\n        }\r\n//        permissionLauncher =  when {\r\n//            isReadPermissionGranted -> permissions[Manifest.permission.READ_EXTERNAL_STORAGE]\r\n//                ?: isReadPermissionGranted\r\n//                        isWritePermissionGranted -> permissions[Manifest.permission.WRITE_EXTERNAL_STORAGE]\r\n//                        ?: isWritePermissionGranted\r\n//            else -> {}\r\n//        }\r\n//\r\n//            }\r\n   return true\r\n    }\r\n\r\n\r\n        fun requestPermission(activity: Activity) {\r\n        val builder = AlertDialog.Builder(activity)\r\n        builder.setIcon(R.drawable.icon_alert)\r\n        builder.setTitle(R.string.app_warning)\r\n        builder.setMessage(R.string.app_permission)\r\n        builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n            dialog.cancel()\r\n            if (VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n                try {\r\n                    val intent =\r\n                        Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)\r\n                    intent.addCategory(\"android.intent.category.DEFAULT\")\r\n                    intent.data = Uri.parse(\r\n                        String.format(\r\n                            \"package:%s\",\r\n                            activity.packageName\r\n                        )\r\n                    )\r\n                    activity.startActivityForResult(intent, 100)\r\n                } catch (e: Exception) {\r\n                    val intent = Intent()\r\n                    intent.action = Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION\r\n                    activity.startActivityForResult(intent, 100)\r\n                }\r\n            } else {\r\n                //below android 11\r\n                ActivityCompat.requestPermissions(\r\n                    activity,\r\n                    arrayOf(permission.WRITE_EXTERNAL_STORAGE),\r\n                    PERMISSION_REQUEST_CODE\r\n                )\r\n            }\r\n        }\r\n        builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        HelperUnit.setupDialog(activity, dialog)\r\n    }\r\n\r\n    fun makeBackupDir() {\r\n        val backupDir = File(\r\n            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),\r\n            \"browser_backup//\"\r\n        )\r\n        val wasSuccessful = backupDir.mkdirs()\r\n        if (!wasSuccessful) {\r\n            println(\"was not successful.\")\r\n        }\r\n    }\r\n\r\n    fun backupData(context: Activity, i: Int) {\r\n        val executor = Executors.newSingleThreadExecutor()\r\n        val handler = Handler(Looper.getMainLooper())\r\n        executor.execute {\r\n            when (i) {\r\n                1 -> exportList(context, 1)\r\n                3 -> exportList(context, 3)\r\n                4 -> exportBookmarks(context)\r\n                else -> exportList(context, 2)\r\n            }\r\n            handler.post {\r\n                //UI Thread work here\r\n                NinjaToast.show(context, context.getString(R.string.app_done))\r\n            }\r\n        }\r\n    }\r\n\r\n    fun restoreData(context: Activity, i: Int) {\r\n        val executor = Executors.newSingleThreadExecutor()\r\n        val handler = Handler(Looper.getMainLooper())\r\n        executor.execute {\r\n            when (i) {\r\n                1 -> importList(context, 1)\r\n                3 -> importList(context, 3)\r\n                4 -> importBookmarks(context)\r\n                else -> importList(context, 2)\r\n            }\r\n            handler.post {\r\n                //UI Thread work here\r\n                NinjaToast.show(context, context.getString(R.string.app_done))\r\n            }\r\n        }\r\n    }\r\n\r\n    fun exportList(context: Context?, i: Int) {\r\n        val action = RecordAction(context)\r\n        val list: List<String>\r\n        val filename: String\r\n        action.open(false)\r\n        when (i) {\r\n            1 -> {\r\n                list = action.listDomains(RecordUnit.TABLE_TRUSTED)\r\n                filename = \"list_trusted.txt\"\r\n            }\r\n            3 -> {\r\n                list = action.listDomains(RecordUnit.TABLE_STANDARD)\r\n                filename = \"list_standard.txt\"\r\n            }\r\n            else -> {\r\n                list = action.listDomains(RecordUnit.TABLE_PROTECTED)\r\n                filename = \"list_protected.txt\"\r\n            }\r\n        }\r\n        action.close()\r\n        val file = File(\r\n            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),\r\n            \"browser_backup//$filename\"\r\n        )\r\n        try {\r\n            val writer = BufferedWriter(FileWriter(file, false))\r\n            for (domain in list) {\r\n                writer.write(domain)\r\n                writer.newLine()\r\n            }\r\n            writer.close()\r\n            val wasSuccessful = file.absolutePath\r\n            if (wasSuccessful.isEmpty()) {\r\n                println(\"was not successful.\")\r\n            }\r\n        } catch (ignored: Exception) {\r\n        }\r\n    }\r\n\r\n    fun importList(context: Context?, i: Int) {\r\n        try {\r\n            val filename: String\r\n            var js: List_trusted? = null\r\n            var cookie: List_protected? = null\r\n            var DOM: List_standard? = null\r\n            when (i) {\r\n                1 -> {\r\n                    js = context?.let { List_trusted(it) }\r\n                    filename = \"list_trusted.txt\"\r\n                }\r\n                3 -> {\r\n                    DOM = context?.let { List_standard(it) }\r\n                    filename = \"list_standard.txt\"\r\n                }\r\n                else -> {\r\n                    cookie = context?.let { List_protected(it) }\r\n                    filename = \"list_protected.txt\"\r\n                }\r\n            }\r\n            val file = File(\r\n                Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),\r\n                \"browser_backup//$filename\"\r\n            )\r\n            val action = RecordAction(context)\r\n            action.open(true)\r\n            when (i) {\r\n                1 -> js?.clearDomains()\r\n                3 -> DOM?.clearDomains()\r\n                else -> cookie?.clearDomains()\r\n            }\r\n            val reader = BufferedReader(FileReader(file))\r\n            var line: String?\r\n            while (reader.readLine().also { line = it } != null) {\r\n                when (i) {\r\n                    1 -> if (!action.checkDomain(line, RecordUnit.TABLE_TRUSTED)) {\r\n                        line?.let { js?.addDomain(it) }\r\n                    }\r\n                    3 -> if (!action.checkDomain(line, RecordUnit.TABLE_STANDARD)) {\r\n                        line?.let { DOM?.addDomain(it) }\r\n                    }\r\n                    else -> if (!action.checkDomain(line, RecordUnit.TABLE_PROTECTED)) {\r\n                        line?.let { cookie?.addDomain(it) }\r\n                    }\r\n                }\r\n            }\r\n            reader.close()\r\n            action.close()\r\n        } catch (e: Exception) {\r\n            Log.w(\"browser\", \"Error reading file\", e)\r\n        }\r\n    }\r\n\r\n    fun exportBookmarks(context: Context?) {\r\n        val action = RecordAction(context)\r\n        action.open(false)\r\n        val list: List<Record> = action.listBookmark(context, false, 0)\r\n        action.close()\r\n        val file = File(\r\n            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),\r\n            \"browser_backup//list_bookmarks.html\"\r\n        )\r\n        try {\r\n            val writer = BufferedWriter(FileWriter(file, false))\r\n            for (record in list) {\r\n                var type = BOOKMARK_TYPE\r\n                type = type.replace(BOOKMARK_TITLE, record.title ?: \"\")\r\n                type = type.replace(BOOKMARK_URL, record.uRL ?: \"\")\r\n                type = type.replace(\r\n                    BOOKMARK_TIME,\r\n                    java.lang.String.valueOf(record.iconColor + (if (record.desktopMode == true) 16 else 0).toLong() + (if (record.nightMode == true) 32 else 0).toLong())\r\n                )\r\n                writer.write(type)\r\n                writer.newLine()\r\n            }\r\n            writer.close()\r\n            val wasSuccessful = file.absolutePath\r\n            if (wasSuccessful.isEmpty()) {\r\n                println(\"was not successful.\")\r\n            }\r\n        } catch (ignored: Exception) {\r\n        }\r\n    }\r\n\r\n    fun importBookmarks(context: Context?) {\r\n        val file = File(\r\n            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),\r\n            \"browser_backup//list_bookmarks.html\"\r\n        )\r\n        val list: MutableList<Record> = ArrayList<Record>()\r\n        try {\r\n            if (context != null) {\r\n                BrowserUnit.clearBookmark(context)\r\n            }\r\n            val action = RecordAction(context)\r\n            action.open(true)\r\n            val reader = BufferedReader(FileReader(file))\r\n            var line: String\r\n            while (reader.readLine().also { line = it } != null) {\r\n                line = line.trim { it <= ' ' }\r\n                if (!(line.startsWith(\"<dt><a \") && line.endsWith(\"</a>\") || line.startsWith(\"<DT><A \") && line.endsWith(\r\n                        \"</A>\"\r\n                    ))\r\n                ) {\r\n                    continue\r\n                }\r\n                val title = getBookmarkTitle(line)\r\n                val url = getBookmarkURL(line)\r\n                var date = getBookmarkDate(line)\r\n                if (date > 123) date =\r\n                    11 //if no color defined yet set it red (123 is max: 11 for color + 16 for desktop mode + 32 for List_trusted + 64 for List_standard Content\r\n                if (title.trim { it <= ' ' }.isEmpty() || url.trim { it <= ' ' }.isEmpty()) {\r\n                    continue\r\n                }\r\n                val record: Record = Record()\r\n                record.title = title\r\n                record.uRL = url\r\n                record.iconColor = date and 15\r\n                record.desktopMode = date and 16 == 16L\r\n                record.nightMode = date and 32 != 32L\r\n                if (!action.checkUrl(url, RecordUnit.TABLE_BOOKMARK)) {\r\n                    list.add(record)\r\n                }\r\n            }\r\n            reader.close()\r\n//            list.sort(Comparator.comparing<Record, Any>(Record::title))\r\n            for (record in list) {\r\n                action.addBookmark(record)\r\n            }\r\n            action.close()\r\n        } catch (ignored: Exception) {\r\n        }\r\n        list.size\r\n    }\r\n\r\n    private fun getBookmarkDate(line: String): Long {\r\n        for (string in line.split(\" +\").toTypedArray()) {\r\n            if (string.startsWith(\"ADD_DATE=\\\"\")) {\r\n                val index = string.indexOf(\"\\\">\")\r\n                return string.substring(10, index).toLong()\r\n            }\r\n        }\r\n        return 0\r\n    }\r\n\r\n    private fun getBookmarkTitle(line: String): String {\r\n        var line = line\r\n        line = line.substring(0, line.length - 4) // Remove last </a>\r\n        val index = line.lastIndexOf(\">\")\r\n        return line.substring(index + 1)\r\n    }\r\n\r\n    private fun getBookmarkURL(line: String): String {\r\n        for (string in line.split(\" +\").toTypedArray()) {\r\n            if (string.startsWith(\"href=\\\"\") || string.startsWith(\"HREF=\\\"\")) {\r\n                return string.substring(6, string.length - 1) // Remove href=\\\" and \\\"\r\n            }\r\n        }\r\n        return \"\"\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/other/unit/BackupUnit.kt b/app/src/main/java/web/browser/dragon/utils/other/unit/BackupUnit.kt
--- a/app/src/main/java/web/browser/dragon/utils/other/unit/BackupUnit.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/other/unit/BackupUnit.kt	
@@ -135,6 +135,7 @@
         HelperUnit.setupDialog(activity, dialog)
     }
 
+
     fun makeBackupDir() {
         val backupDir = File(
             Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
Index: app/src/main/java/web/browser/dragon/utils/other/unit/HelperUnit.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.other.unit\r\n\r\nimport android.Manifest\r\nimport android.app.Activity\r\nimport android.app.Dialog\r\nimport android.app.DownloadManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.content.pm.PackageManager\r\nimport android.content.pm.ShortcutInfo\r\nimport android.content.pm.ShortcutManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.PorterDuff\r\nimport android.graphics.drawable.Icon\r\nimport android.graphics.drawable.Icon.createWithResource\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Environment\r\nimport android.os.Handler\r\nimport android.preference.PreferenceManager\r\nimport android.provider.MediaStore\r\nimport android.util.TypedValue\r\nimport android.view.Gravity\r\nimport android.view.View\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.webkit.CookieManager\r\nimport android.webkit.URLUtil\r\nimport android.widget.EditText\r\nimport android.widget.ImageView\r\nimport androidx.appcompat.app.AlertDialog\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.utils.other.DataURIParser\r\nimport web.browser.dragon.utils.other.GridItem\r\nimport web.browser.dragon.utils.other.NinjaToast\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\nimport java.lang.Exception\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nobject HelperUnit {\r\n\r\n    private const val REQUEST_CODE_ASK_PERMISSIONS_1 = 1234\r\n    private const val REQUEST_CODE_ASK_PERMISSIONS_2 = 12345\r\n    private const val REQUEST_CODE_ASK_PERMISSIONS_3 = 123456\r\n    private var sp: SharedPreferences? = null\r\n\r\n    fun grantPermissionsLoc(activity: Activity) {\r\n        val hasACCESS_FINE_LOCATION =\r\n            activity.checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)\r\n        if (hasACCESS_FINE_LOCATION != PackageManager.PERMISSION_GRANTED) {\r\n            val builder = MaterialAlertDialogBuilder(activity)\r\n            builder.setIcon(R.drawable.icon_alert)\r\n            builder.setTitle(R.string.setting_title_location)\r\n            builder.setMessage(R.string.app_permission)\r\n            builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                activity.requestPermissions(\r\n                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                    REQUEST_CODE_ASK_PERMISSIONS_1\r\n                )\r\n            }\r\n            builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n            val dialog = builder.create()\r\n            dialog.show()\r\n            setupDialog(activity, dialog)\r\n        }\r\n    }\r\n\r\n    fun grantPermissionsCamera(activity: Activity) {\r\n        val camera = activity.checkSelfPermission(Manifest.permission.CAMERA)\r\n        if (camera != PackageManager.PERMISSION_GRANTED) {\r\n            val builder = MaterialAlertDialogBuilder(activity)\r\n            builder.setIcon(R.drawable.icon_alert)\r\n            builder.setTitle(R.string.setting_title_camera)\r\n            builder.setMessage(R.string.app_permission)\r\n            builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                activity.requestPermissions(\r\n                    arrayOf(Manifest.permission.CAMERA),\r\n                    REQUEST_CODE_ASK_PERMISSIONS_2\r\n                )\r\n            }\r\n            builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n            val dialog = builder.create()\r\n            dialog.show()\r\n            setupDialog(activity, dialog)\r\n        }\r\n    }\r\n\r\n    fun grantPermissionsMic(activity: Activity) {\r\n        val mic = activity.checkSelfPermission(Manifest.permission.RECORD_AUDIO)\r\n        if (mic != PackageManager.PERMISSION_GRANTED) {\r\n            val builder = MaterialAlertDialogBuilder(activity)\r\n            builder.setIcon(R.drawable.icon_alert)\r\n            builder.setTitle(R.string.setting_title_microphone)\r\n            builder.setMessage(R.string.app_permission)\r\n            builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                activity.requestPermissions(\r\n                    arrayOf(Manifest.permission.RECORD_AUDIO),\r\n                    REQUEST_CODE_ASK_PERMISSIONS_3\r\n                )\r\n            }\r\n            builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n            val dialog = builder.create()\r\n            dialog.show()\r\n            setupDialog(activity, dialog)\r\n        }\r\n    }\r\n\r\n    fun saveAs(dialogToCancel: AlertDialog, activity: Activity, url: String?) {\r\n        try {\r\n            val builder = MaterialAlertDialogBuilder(activity)\r\n            val dialogView = View.inflate(activity, R.layout.dialog_edit_extension, null)\r\n            val editTitle = dialogView.findViewById<EditText>(R.id.dialog_edit_1)\r\n            val editExtension = dialogView.findViewById<EditText>(R.id.dialog_edit_2)\r\n            val filename = URLUtil.guessFileName(url, null, null)\r\n            editTitle.setText(fileName(url))\r\n            val extension = filename.substring(filename.lastIndexOf(\".\"))\r\n            if (extension.length <= 8) {\r\n                editExtension.setText(extension)\r\n            }\r\n            builder.setView(dialogView)\r\n            builder.setTitle(R.string.menu_save_as)\r\n            builder.setIcon(R.drawable.icon_alert)\r\n            builder.setMessage(url)\r\n            builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                val title = editTitle.text.toString().trim { it <= ' ' }\r\n                val extension1 =\r\n                    editExtension.text.toString().trim { it <= ' ' }\r\n                val filename1 = title + extension1\r\n                if (title.isEmpty() || extension1.isEmpty() || !extension1.startsWith(\".\")) {\r\n                    NinjaToast.show(activity, activity.getString(R.string.toast_input_empty))\r\n                } else {\r\n                    if (BackupUnit.updateOrRequestPermission(activity)) {\r\n                        val source = Uri.parse(url)\r\n                        val request = DownloadManager.Request(source)\r\n                        request.addRequestHeader(\r\n                            \"List_protected\",\r\n                            CookieManager.getInstance().getCookie(url)\r\n                        )\r\n                        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED) //Notify client once download is completed!\r\n                        request.setDestinationInExternalPublicDir(\r\n                            Environment.DIRECTORY_DOWNLOADS,\r\n                            filename1\r\n                        )\r\n                        val dm =\r\n                            (activity.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager)\r\n                        dm.enqueue(request)\r\n                        hideSoftKeyboard(editExtension, activity)\r\n                        dialogToCancel.cancel()\r\n                    } else {\r\n                        BackupUnit.requestPermission(activity)\r\n                    }\r\n                }\r\n            }\r\n            builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton ->\r\n                hideSoftKeyboard(editExtension, activity)\r\n                dialogToCancel.cancel()\r\n            }\r\n            val dialog = builder.create()\r\n            dialog.show()\r\n            setupDialog(activity, dialog)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    fun createShortcut(context: Context, title: String?, url: String?, bitmap: Bitmap?) {\r\n        val icon: Icon\r\n        try {\r\n            val i = Intent()\r\n            i.action = Intent.ACTION_VIEW\r\n            i.data = Uri.parse(url)\r\n            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) { // code for adding shortcut on pre oreo device\r\n                val installer = Intent()\r\n                installer.putExtra(\"android.intent.extra.shortcut.INTENT\", i)\r\n                installer.putExtra(\"android.intent.extra.shortcut.NAME\", title)\r\n                installer.putExtra(\r\n                    Intent.EXTRA_SHORTCUT_ICON_RESOURCE,\r\n                    Intent.ShortcutIconResource.fromContext(\r\n                        context.applicationContext,\r\n                        R.drawable.icon_bookmark\r\n                    )\r\n                )\r\n                installer.action = \"com.android.launcher.action.INSTALL_SHORTCUT\"\r\n                context.sendBroadcast(installer)\r\n            } else {\r\n                val shortcutManager = context.getSystemService(\r\n                    ShortcutManager::class.java\r\n                )!!\r\n                if (bitmap != null) {\r\n                    icon = Icon.createWithBitmap(bitmap)\r\n                } else {\r\n                    icon = createWithResource(context, R.drawable.icon_bookmark)\r\n                }\r\n                if (shortcutManager.isRequestPinShortcutSupported) {\r\n                    val pinShortcutInfo = ShortcutInfo.Builder(context, url)\r\n                        .setShortLabel(title!!)\r\n                        .setLongLabel(title) //.setIcon(Icon.createWithResource(context, R.mipmap.ic_launcher))\r\n                        .setIcon(icon)\r\n                        .setIntent(Intent(Intent.ACTION_VIEW, Uri.parse(url)))\r\n                        .build()\r\n                    shortcutManager.requestPinShortcut(pinShortcutInfo, null)\r\n                } else {\r\n                    println(\"failed_to_add\")\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            println(\"failed_to_add\")\r\n        }\r\n    }\r\n\r\n    fun fileName(url: String?): String {\r\n        val sdf = SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\", Locale.getDefault())\r\n        val currentTime = sdf.format(Date())\r\n        val domain =\r\n            Objects.requireNonNull(Uri.parse(url).host)?.replace(\"www.\", \"\")?.trim { it <= ' ' }\r\n        return domain?.replace(\".\", \"_\")?.trim { it <= ' ' } + \"_\" + currentTime.trim { it <= ' ' }\r\n    }\r\n\r\n    fun domain(url: String?): String {\r\n        return if (url == null) {\r\n            \"\"\r\n        } else {\r\n            try {\r\n                Objects.requireNonNull(Uri.parse(url).host)?.replace(\"www.\", \"\")?.trim { it <= ' ' } ?: \"\"\r\n            } catch (e: Exception) {\r\n                \"\"\r\n            }\r\n        }\r\n    }\r\n\r\n    fun initTheme(context: Context) {\r\n        sp = PreferenceManager.getDefaultSharedPreferences(context)\r\n//        when (Objects.requireNonNull(sp?.getString(\"sp_theme\", \"1\"))) {\r\n//            \"2\" -> context.setTheme(R.style.AppTheme_day)\r\n//            \"3\" -> context.setTheme(R.style.AppTheme_night)\r\n//            \"4\" -> context.setTheme(R.style.AppTheme_wallpaper)\r\n//            \"5\" -> context.setTheme(R.style.AppTheme_OLED)\r\n//            else -> context.setTheme(R.style.AppTheme)\r\n//        }\r\n    }\r\n\r\n    fun addFilterItems(activity: Activity, gridList: ArrayList<GridItem?>) {\r\n        val item_01 = GridItem(\r\n            R.drawable.circle_red_big,\r\n            sp!!.getString(\"icon_01\", activity.resources.getString(R.string.color_red))!!, 11\r\n        )\r\n        val item_02 = GridItem(\r\n            R.drawable.circle_pink_big,\r\n            sp!!.getString(\"icon_02\", activity.resources.getString(R.string.color_pink))!!, 10\r\n        )\r\n        val item_03 = GridItem(\r\n            R.drawable.circle_purple_big,\r\n            sp!!.getString(\"icon_03\", activity.resources.getString(R.string.color_purple))!!, 9\r\n        )\r\n        val item_04 = GridItem(\r\n            R.drawable.circle_blue_big,\r\n            sp!!.getString(\"icon_04\", activity.resources.getString(R.string.color_blue))!!, 8\r\n        )\r\n        val item_05 = GridItem(\r\n            R.drawable.circle_teal_big,\r\n            sp!!.getString(\"icon_05\", activity.resources.getString(R.string.color_teal))!!, 7\r\n        )\r\n        val item_06 = GridItem(\r\n            R.drawable.circle_green_big,\r\n            sp!!.getString(\"icon_06\", activity.resources.getString(R.string.color_green))!!, 6\r\n        )\r\n        val item_07 = GridItem(\r\n            R.drawable.circle_lime_big,\r\n            sp!!.getString(\"icon_07\", activity.resources.getString(R.string.color_lime))!!, 5\r\n        )\r\n        val item_08 = GridItem(\r\n            R.drawable.circle_yellow_big,\r\n            sp!!.getString(\"icon_08\", activity.resources.getString(R.string.color_yellow))!!, 4\r\n        )\r\n        val item_09 = GridItem(\r\n            R.drawable.circle_orange_big,\r\n            sp!!.getString(\"icon_09\", activity.resources.getString(R.string.color_orange))!!, 3\r\n        )\r\n        val item_10 = GridItem(\r\n            R.drawable.circle_brown_big,\r\n            sp!!.getString(\"icon_10\", activity.resources.getString(R.string.color_brown))!!, 2\r\n        )\r\n        val item_11 = GridItem(\r\n            R.drawable.circle_grey_big,\r\n            sp!!.getString(\"icon_11\", activity.resources.getString(R.string.color_grey))!!, 1\r\n        )\r\n        if (sp!!.getBoolean(\"filter_01\", true)) {\r\n            gridList.add(gridList.size, item_01)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_02\", true)) {\r\n            gridList.add(gridList.size, item_02)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_03\", true)) {\r\n            gridList.add(gridList.size, item_03)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_04\", true)) {\r\n            gridList.add(gridList.size, item_04)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_05\", true)) {\r\n            gridList.add(gridList.size, item_05)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_06\", true)) {\r\n            gridList.add(gridList.size, item_06)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_07\", true)) {\r\n            gridList.add(gridList.size, item_07)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_08\", true)) {\r\n            gridList.add(gridList.size, item_08)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_09\", true)) {\r\n            gridList.add(gridList.size, item_09)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_10\", true)) {\r\n            gridList.add(gridList.size, item_10)\r\n        }\r\n        if (sp!!.getBoolean(\"filter_11\", true)) {\r\n            gridList.add(gridList.size, item_11)\r\n        }\r\n    }\r\n\r\n    fun setFilterIcons(ib_icon: ImageView, newIcon: Long) {\r\n        var newIcon = newIcon\r\n        newIcon = newIcon and 15\r\n        if (newIcon == 11L) {\r\n            ib_icon.setImageResource(R.drawable.circle_red_big)\r\n        } else if (newIcon == 10L) {\r\n            ib_icon.setImageResource(R.drawable.circle_pink_big)\r\n        } else if (newIcon == 9L) {\r\n            ib_icon.setImageResource(R.drawable.circle_purple_big)\r\n        } else if (newIcon == 8L) {\r\n            ib_icon.setImageResource(R.drawable.circle_blue_big)\r\n        } else if (newIcon == 7L) {\r\n            ib_icon.setImageResource(R.drawable.circle_teal_big)\r\n        } else if (newIcon == 6L) {\r\n            ib_icon.setImageResource(R.drawable.circle_green_big)\r\n        } else if (newIcon == 5L) {\r\n            ib_icon.setImageResource(R.drawable.circle_lime_big)\r\n        } else if (newIcon == 4L) {\r\n            ib_icon.setImageResource(R.drawable.circle_yellow_big)\r\n        } else if (newIcon == 3L) {\r\n            ib_icon.setImageResource(R.drawable.circle_orange_big)\r\n        } else if (newIcon == 2L) {\r\n            ib_icon.setImageResource(R.drawable.circle_brown_big)\r\n        } else if (newIcon == 1L) {\r\n            ib_icon.setImageResource(R.drawable.circle_grey_big)\r\n        }\r\n    }\r\n\r\n    fun saveDataURI(dialogToCancel: AlertDialog, activity: Activity, dataUriParser: DataURIParser) {\r\n        val imagedata: ByteArray = dataUriParser.imagedata\r\n        val filename: String = dataUriParser.filename\r\n        val builder = MaterialAlertDialogBuilder(activity)\r\n        val dialogView = View.inflate(activity, R.layout.dialog_edit_extension, null)\r\n        val editTitle = dialogView.findViewById<EditText>(R.id.dialog_edit_1)\r\n        val editExtension = dialogView.findViewById<EditText>(R.id.dialog_edit_2)\r\n        editTitle.setText(filename.substring(0, filename.indexOf(\".\")))\r\n        val extension = filename.substring(filename.lastIndexOf(\".\"))\r\n        if (extension.length <= 8) {\r\n            editExtension.setText(extension)\r\n        }\r\n        builder.setView(dialogView)\r\n        builder.setTitle(R.string.menu_save_as)\r\n        builder.setMessage(dataUriParser.toString())\r\n        builder.setIcon(R.drawable.icon_alert)\r\n        builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n            val title = editTitle.text.toString().trim { it <= ' ' }\r\n            val extension1 = editExtension.text.toString().trim { it <= ' ' }\r\n            val filename1 = title + extension1\r\n            if (title.isEmpty() || extension1.isEmpty() || !extension1.startsWith(\".\")) {\r\n                NinjaToast.show(activity, activity.getString(R.string.toast_input_empty))\r\n            } else {\r\n                if (BackupUnit.updateOrRequestPermission(activity)) {\r\n                    val file = File(\r\n                        Environment.getExternalStoragePublicDirectory(MediaStore.VOLUME_EXTERNAL_PRIMARY),\r\n                        filename1\r\n                    )\r\n                    try {\r\n                        val fos = FileOutputStream(file)\r\n                        fos.write(imagedata)\r\n                    } catch (e: Exception) {\r\n                        println(\"Error Downloading File: $e\")\r\n                        e.printStackTrace()\r\n                    }\r\n                    dialogToCancel.cancel()\r\n                } else {\r\n                    BackupUnit.requestPermission(activity)\r\n                }\r\n            }\r\n        }\r\n        builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton ->\r\n            builder.setCancelable(\r\n                true\r\n            )\r\n        }\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        setupDialog(activity, dialog)\r\n    }\r\n\r\n    fun showSoftKeyboard(view: View?, context: Activity) {\r\n        assert(view != null)\r\n        val handler = Handler()\r\n        handler.postDelayed({\r\n            if (view!!.requestFocus()) {\r\n                val imm =\r\n                    context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n                imm.showSoftInput(view, InputMethodManager.SHOW_IMPLICIT)\r\n            }\r\n        }, 50)\r\n    }\r\n\r\n    fun hideSoftKeyboard(view: View?, context: Context) {\r\n        assert(view != null)\r\n        val imm = context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n        imm.hideSoftInputFromWindow(view!!.windowToken, 0)\r\n    }\r\n\r\n    fun setupDialog(context: Context, dialog: Dialog) {\r\n        val typedValue = TypedValue()\r\n        context.theme.resolveAttribute(androidx.appcompat.R.attr.colorError, typedValue, true)\r\n        val color = typedValue.data\r\n        val imageView = dialog.findViewById<ImageView>(androidx.navigation.R.id.icon)\r\n        imageView?.setColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n        Objects.requireNonNull(dialog.window)?.setGravity(Gravity.BOTTOM)\r\n    }\r\n\r\n    fun triggerRebirth(context: Context) {\r\n        sp = PreferenceManager.getDefaultSharedPreferences(context)\r\n        sp!!.edit().putInt(\"restart_changed\", 0).apply()\r\n        sp!!.edit().putBoolean(\"restoreOnRestart\", true).apply()\r\n        val builder = MaterialAlertDialogBuilder(context)\r\n        builder.setTitle(R.string.menu_restart)\r\n        builder.setIcon(R.drawable.icon_alert)\r\n        builder.setMessage(R.string.toast_restart)\r\n        builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n            val packageManager = context.packageManager\r\n            val intent = packageManager.getLaunchIntentForPackage(context.packageName)!!\r\n            val componentName = intent.component\r\n            val mainIntent = Intent.makeRestartActivityTask(componentName)\r\n            context.startActivity(mainIntent)\r\n            System.exit(0)\r\n        }\r\n        builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        setupDialog(context, dialog)\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/other/unit/HelperUnit.kt b/app/src/main/java/web/browser/dragon/utils/other/unit/HelperUnit.kt
--- a/app/src/main/java/web/browser/dragon/utils/other/unit/HelperUnit.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/other/unit/HelperUnit.kt	
@@ -45,6 +45,7 @@
     private const val REQUEST_CODE_ASK_PERMISSIONS_1 = 1234
     private const val REQUEST_CODE_ASK_PERMISSIONS_2 = 12345
     private const val REQUEST_CODE_ASK_PERMISSIONS_3 = 123456
+   // private const val REQUEST_CODE_ASK_PERMISSIONS_4 = 1234567
     private var sp: SharedPreferences? = null
 
     fun grantPermissionsLoc(activity: Activity) {
@@ -106,7 +107,11 @@
             dialog.show()
             setupDialog(activity, dialog)
         }
+
     }
+
+
+
 
     fun saveAs(dialogToCancel: AlertDialog, activity: Activity, url: String?) {
         try {
Index: app/src/main/java/web/browser/dragon/utils/other/unit/sdk29AndUp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.browser\r\n\r\nimport android.os.Build\r\n\r\ninline fun <T> sdk29AndUp(onSdk29: () -> T):  T? {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        onSdk29()\r\n    } else null\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/other/unit/sdk29AndUp.kt b/app/src/main/java/web/browser/dragon/utils/other/unit/sdk29AndUp.kt
--- a/app/src/main/java/web/browser/dragon/utils/other/unit/sdk29AndUp.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/other/unit/sdk29AndUp.kt	
@@ -1,4 +1,4 @@
-package web.browser.dragon.ui.browser
+package web.browser.dragon.utils.other.unit
 
 import android.os.Build
 
Index: app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebChromeClient.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.other.browser\r\n\r\nimport android.app.Activity\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Bitmap\r\nimport android.net.Uri\r\nimport android.os.Message\r\nimport android.preference.PreferenceManager\r\nimport android.view.View\r\nimport android.webkit.*\r\nimport android.webkit.WebView.WebViewTransport\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.utils.other.unit.BrowserUnit\r\nimport web.browser.dragon.utils.other.unit.HelperUnit\r\nimport web.browser.dragon.utils.other.view.NinjaWebView\r\nimport java.util.*\r\n\r\nclass NinjaWebChromeClient(ninjaWebView: NinjaWebView) : WebChromeClient() {\r\n\r\n    private val ninjaWebView: NinjaWebView\r\n\r\n    override fun onProgressChanged(view: WebView, progress: Int) {\r\n        super.onProgressChanged(view, progress)\r\n        ninjaWebView.updateTitle(progress)\r\n        if (Objects.requireNonNull(view.title)?.isEmpty() == true) {\r\n            ninjaWebView.updateTitle(view.url)\r\n        } else {\r\n            ninjaWebView.updateTitle(view.title)\r\n        }\r\n        ninjaWebView.updateFavicon(view.url)\r\n    }\r\n\r\n    override fun onCreateWindow(\r\n        view: WebView,\r\n        dialog: Boolean,\r\n        userGesture: Boolean,\r\n        resultMsg: Message\r\n    ): Boolean {\r\n        val context = view.context\r\n        val newWebView = NinjaWebView(context)\r\n        view.addView(newWebView)\r\n        val transport = resultMsg.obj as WebViewTransport\r\n        transport.webView = newWebView\r\n        resultMsg.sendToTarget()\r\n        newWebView.setWebViewClient(object : WebViewClient() {\r\n            override fun shouldOverrideUrlLoading(\r\n                view: WebView,\r\n                request: WebResourceRequest\r\n            ): Boolean {\r\n                newWebView.initPreferences(request.url.toString())\r\n                BrowserUnit.intentURL(context, request.url)\r\n                return true\r\n            }\r\n        })\r\n        return true\r\n    }\r\n\r\n    override fun onShowCustomView(view: View, callback: CustomViewCallback) {\r\n        ninjaWebView.getBrowserController()?.onShowCustomView(view, callback)\r\n        super.onShowCustomView(view, callback)\r\n    }\r\n\r\n    override fun onHideCustomView() {\r\n        ninjaWebView.getBrowserController()?.onHideCustomView()\r\n        super.onHideCustomView()\r\n    }\r\n\r\n    override fun onShowFileChooser(\r\n        webView: WebView,\r\n        filePathCallback: ValueCallback<Array<Uri>>,\r\n        fileChooserParams: FileChooserParams\r\n    ): Boolean {\r\n        ninjaWebView.getBrowserController()?.showFileChooser(filePathCallback)\r\n        return true\r\n    }\r\n\r\n    override fun onGeolocationPermissionsShowPrompt(\r\n        origin: String,\r\n        callback: GeolocationPermissions.Callback\r\n    ) {\r\n        val activity = ninjaWebView.getContext() as Activity\r\n        HelperUnit.grantPermissionsLoc(activity)\r\n        callback.invoke(origin, true, false)\r\n        super.onGeolocationPermissionsShowPrompt(origin, callback)\r\n    }\r\n\r\n    override fun onPermissionRequest(request: PermissionRequest) {\r\n        val sp: SharedPreferences =\r\n            PreferenceManager.getDefaultSharedPreferences(ninjaWebView.getContext())\r\n        val activity = ninjaWebView.getContext() as Activity\r\n        val resources = request.resources\r\n        for (resource in resources) {\r\n            if (PermissionRequest.RESOURCE_VIDEO_CAPTURE == resource) {\r\n                if (sp.getBoolean(ninjaWebView.profile.toString() + \"_camera\", false)) {\r\n                    HelperUnit.grantPermissionsCamera(activity)\r\n                    if (ninjaWebView.getSettings().getMediaPlaybackRequiresUserGesture()) {\r\n                        ninjaWebView.getSettings()\r\n                            .setMediaPlaybackRequiresUserGesture(false) //fix conflict with save data option. Temporarily switch off setMediaPlaybackRequiresUserGesture\r\n                        ninjaWebView.reloadWithoutInit()\r\n                    }\r\n                    request.grant(request.resources)\r\n                }\r\n            } else if (PermissionRequest.RESOURCE_AUDIO_CAPTURE == resource) {\r\n                if (sp.getBoolean(ninjaWebView.profile.toString() + \"_microphone\", false)) {\r\n                    HelperUnit.grantPermissionsMic(activity)\r\n                    request.grant(request.resources)\r\n                }\r\n            } else if (PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID == resource) {\r\n                val builder = MaterialAlertDialogBuilder(ninjaWebView.getContext())\r\n                builder.setIcon(R.drawable.icon_alert)\r\n                builder.setTitle(R.string.app_warning)\r\n                builder.setMessage(R.string.hint_DRM_Media)\r\n                builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                    request.grant(\r\n                        request.resources\r\n                    )\r\n                }\r\n                builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> request.deny() }\r\n                val dialog = builder.create()\r\n                dialog.show()\r\n                HelperUnit.setupDialog(ninjaWebView.getContext(), dialog)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onReceivedIcon(view: WebView, icon: Bitmap) {\r\n        ninjaWebView.setFavicon(icon)\r\n        super.onReceivedIcon(view, icon)\r\n    }\r\n\r\n    override fun onReceivedTitle(view: WebView, sTitle: String) {\r\n        super.onReceivedTitle(view, sTitle)\r\n    }\r\n\r\n    init {\r\n        this.ninjaWebView = ninjaWebView\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebChromeClient.kt b/app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebChromeClient.kt
--- a/app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebChromeClient.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebChromeClient.kt	
@@ -16,12 +16,19 @@
 import web.browser.dragon.utils.other.view.NinjaWebView
 import java.util.*
 
+
+
 class NinjaWebChromeClient(ninjaWebView: NinjaWebView) : WebChromeClient() {
 
+
+
     private val ninjaWebView: NinjaWebView
 
+
     override fun onProgressChanged(view: WebView, progress: Int) {
         super.onProgressChanged(view, progress)
+
+
         ninjaWebView.updateTitle(progress)
         if (Objects.requireNonNull(view.title)?.isEmpty() == true) {
             ninjaWebView.updateTitle(view.url)
@@ -29,6 +36,9 @@
             ninjaWebView.updateTitle(view.title)
         }
         ninjaWebView.updateFavicon(view.url)
+
+
+
     }
 
     override fun onCreateWindow(
@@ -37,6 +47,7 @@
         userGesture: Boolean,
         resultMsg: Message
     ): Boolean {
+
         val context = view.context
         val newWebView = NinjaWebView(context)
         view.addView(newWebView)
@@ -81,9 +92,13 @@
     ) {
         val activity = ninjaWebView.getContext() as Activity
         HelperUnit.grantPermissionsLoc(activity)
-        callback.invoke(origin, true, false)
         super.onGeolocationPermissionsShowPrompt(origin, callback)
+        callback.invoke(origin, true, false)
+
     }
+
+
+
 
     override fun onPermissionRequest(request: PermissionRequest) {
         val sp: SharedPreferences =
@@ -122,6 +137,7 @@
                 HelperUnit.setupDialog(ninjaWebView.getContext(), dialog)
             }
         }
+
     }
 
     override fun onReceivedIcon(view: WebView, icon: Bitmap) {
Index: app/src/main/java/web/browser/dragon/utils/other/browser/BrowserContainer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.other.browser\r\n\r\nimport web.browser.dragon.utils.other.view.NinjaWebView\r\nimport java.util.*\r\n\r\nobject BrowserContainer {\r\n    private val list: MutableList<AlbumController> = LinkedList()\r\n    operator fun get(index: Int): AlbumController {\r\n        return list[index]\r\n    }\r\n\r\n    @Synchronized\r\n    fun add(controller: AlbumController) {\r\n        list.add(controller)\r\n    }\r\n\r\n    @Synchronized\r\n    fun add(controller: AlbumController, index: Int) {\r\n        list.add(index, controller)\r\n    }\r\n\r\n    @Synchronized\r\n    fun remove(controller: AlbumController) {\r\n        (controller as NinjaWebView).destroy()\r\n        list.remove(controller)\r\n    }\r\n\r\n    fun indexOf(controller: AlbumController): Int {\r\n        return list.indexOf(controller)\r\n    }\r\n\r\n    fun list(): List<AlbumController> {\r\n        return list\r\n    }\r\n\r\n    fun size(): Int {\r\n        return list.size\r\n    }\r\n\r\n    @Synchronized\r\n    fun clear() {\r\n        for (albumController in list) {\r\n            (albumController as NinjaWebView).destroy()\r\n        }\r\n        list.clear()\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/other/browser/BrowserContainer.kt b/app/src/main/java/web/browser/dragon/utils/other/browser/BrowserContainer.kt
--- a/app/src/main/java/web/browser/dragon/utils/other/browser/BrowserContainer.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/other/browser/BrowserContainer.kt	
@@ -10,12 +10,12 @@
     }
 
     @Synchronized
-    fun add(controller: AlbumController) {
+    fun add(controller: NinjaWebView) {
         list.add(controller)
     }
 
     @Synchronized
-    fun add(controller: AlbumController, index: Int) {
+    fun add(controller: NinjaWebView, index: Int) {
         list.add(index, controller)
     }
 
Index: app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebViewClient.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.other.browser\r\n\r\nimport android.content.Context\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Bitmap\r\nimport android.net.Uri\r\nimport android.net.http.SslError\r\nimport android.os.Message\r\nimport android.preference.PreferenceManager\r\nimport android.view.View\r\nimport android.webkit.*\r\nimport android.widget.EditText\r\nimport android.widget.ImageView\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\nimport com.google.android.material.textfield.TextInputLayout\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.utils.other.database.Record\r\nimport web.browser.dragon.utils.other.database.RecordAction\r\nimport web.browser.dragon.utils.other.unit.BrowserUnit\r\nimport web.browser.dragon.utils.other.unit.HelperUnit\r\nimport web.browser.dragon.utils.other.unit.RecordUnit\r\nimport web.browser.dragon.utils.other.view.NinjaWebView\r\nimport timber.log.Timber\r\nimport java.io.ByteArrayInputStream\r\nimport java.lang.Exception\r\nimport java.util.*\r\n\r\nclass NinjaWebViewClient(ninjaWebView: NinjaWebView) : WebViewClient() {\r\n    private val ninjaWebView: NinjaWebView = ninjaWebView\r\n    private val context: Context = ninjaWebView.context\r\n    private val sp: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)\r\n\r\n    //    private val adBlock = AdBlock(context)\r\n\r\n    override fun onReceivedError(\r\n        view: WebView?,\r\n        request: WebResourceRequest?,\r\n        error: WebResourceError?\r\n    ) {\r\n        super.onReceivedError(view, request, error)\r\n\r\n        Timber.d(\"TAG_NinjaWebViewClient_2\")\r\n    }\r\n    override fun onPageFinished(view: WebView, url: String) {\r\n        super.onPageFinished(view, url)\r\n\r\n        Timber.d(\"TAG_NinjaWebViewClient_1\")\r\n        ninjaWebView.isBackPressed = false\r\n        if (ninjaWebView.isForeground) {\r\n            ninjaWebView.invalidate()\r\n        } else {\r\n            ninjaWebView.postInvalidate()\r\n        }\r\n        if (sp.getBoolean(\"onPageFinished\", false)) {\r\n            Objects.requireNonNull(sp.getString(\"sp_onPageFinished\", \"\"))?.let {\r\n                view.evaluateJavascript(\r\n                    it,\r\n                    null\r\n                )\r\n            }\r\n        }\r\n        if (ninjaWebView.isSaveData) {\r\n            view.evaluateJavascript(\r\n                \"var links=document.getElementsByTagName('video'); for(let i=0;i<links.length;i++){links[i].pause()};\",\r\n                null\r\n            )\r\n        }\r\n        if (ninjaWebView.isHistory) {\r\n            val action = RecordAction(ninjaWebView.getContext())\r\n            action.open(true)\r\n            if (action.checkUrl(ninjaWebView.getUrl(), RecordUnit.TABLE_HISTORY)) {\r\n                action.deleteURL(ninjaWebView.getUrl(), RecordUnit.TABLE_HISTORY)\r\n            }\r\n            action.addHistory(\r\n                Record(\r\n                    ninjaWebView.getTitle(),\r\n                    ninjaWebView.getUrl(),\r\n                    System.currentTimeMillis(),\r\n                    0,\r\n                    0,\r\n                    ninjaWebView.isDesktopMode,\r\n                    ninjaWebView.isNightMode,\r\n                    0\r\n                )\r\n            )\r\n            action.close()\r\n        }\r\n    }\r\n\r\n    override fun onPageStarted(view: WebView, url: String, favicon: Bitmap?) {\r\n        ninjaWebView.setStopped(false)\r\n        ninjaWebView.resetFavicon()\r\n        super.onPageStarted(view, url, favicon)\r\n        if (sp.getBoolean(\"onPageStarted\", false)) {\r\n            Objects.requireNonNull(sp.getString(\"sp_onPageStarted\", \"\"))?.let {\r\n                view.evaluateJavascript(\r\n                    it,\r\n                    null\r\n                )\r\n            }\r\n        }\r\n        if (ninjaWebView.isFingerPrintProtection) {\r\n            //Block WebRTC requests which can reveal local IP address\r\n            //Tested with https://diafygi.github.io/webrtc-ips/\r\n            view.evaluateJavascript(\r\n                \"['createOffer', 'createAnswer','setLocalDescription', 'setRemoteDescription'].forEach(function(method) {\\n\" +\r\n                        \"    webkitRTCPeerConnection.prototype[method] = function() {\\n\" +\r\n                        \"      console.log('webRTC snoop');\\n\" +\r\n                        \"      return null;\\n\" +\r\n                        \"    };\\n\" +\r\n                        \"  });\", null\r\n            )\r\n\r\n            //Prevent canvas fingerprinting by randomizing\r\n            //can be tested e.g. at https://webbrowsertools.com\r\n            //\r\n            //The Javascript part below is taken from \"Canvas Fingerprint Defender\", Firefox plugin, Version 0.1.9, by ilGur\r\n            //The source code has been published originally under Mozilla Public License V2.0. You can obtain a copy of the license at https://mozilla.org/MPL/2.0/\r\n            //The author has given explicit written permission to use his code under GPL V3 in this project.\r\n            view.evaluateJavascript(\r\n                (\"\\n\" +\r\n                        \"  const toBlob = HTMLCanvasElement.prototype.toBlob;\\n\" +\r\n                        \"  const toDataURL = HTMLCanvasElement.prototype.toDataURL;\\n\" +\r\n                        \"  const getImageData = CanvasRenderingContext2D.prototype.getImageData;\\n\" +\r\n                        \"  //\\n\" +\r\n                        \"  var noisify = function (canvas, context) {\\n\" +\r\n                        \"    if (context) {\\n\" +\r\n                        \"      const shift = {\\n\" +\r\n                        \"        'r': Math.floor(Math.random() * 10) - 5,\\n\" +\r\n                        \"        'g': Math.floor(Math.random() * 10) - 5,\\n\" +\r\n                        \"        'b': Math.floor(Math.random() * 10) - 5,\\n\" +\r\n                        \"        'a': Math.floor(Math.random() * 10) - 5\\n\" +\r\n                        \"      };\\n\" +\r\n                        \"      //\\n\" +\r\n                        \"      const width = canvas.width;\\n\" +\r\n                        \"      const height = canvas.height;\\n\" +\r\n                        \"      if (width && height) {\\n\" +\r\n                        \"        const imageData = getImageData.apply(context, [0, 0, width, height]);\\n\" +\r\n                        \"        for (let i = 0; i < height; i++) {\\n\" +\r\n                        \"          for (let j = 0; j < width; j++) {\\n\" +\r\n                        \"            const n = ((i * (width * 4)) + (j * 4));\\n\" +\r\n                        \"            imageData.data[n + 0] = imageData.data[n + 0] + shift.r;\\n\" +\r\n                        \"            imageData.data[n + 1] = imageData.data[n + 1] + shift.g;\\n\" +\r\n                        \"            imageData.data[n + 2] = imageData.data[n + 2] + shift.b;\\n\" +\r\n                        \"            imageData.data[n + 3] = imageData.data[n + 3] + shift.a;\\n\" +\r\n                        \"          }\\n\" +\r\n                        \"        }\\n\" +\r\n                        \"        //\\n\" +\r\n                        \"        window.top.postMessage(\\\"canvas-fingerprint-defender-alert\\\", '*');\\n\" +\r\n                        \"        context.putImageData(imageData, 0, 0); \\n\" +\r\n                        \"      }\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  };\\n\" +\r\n                        \"  //\\n\" +\r\n                        \"  Object.defineProperty(HTMLCanvasElement.prototype, \\\"toBlob\\\", {\\n\" +\r\n                        \"    \\\"value\\\": function () {\\n\" +\r\n                        \"      noisify(this, this.getContext(\\\"2d\\\"));\\n\" +\r\n                        \"      return toBlob.apply(this, arguments);\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  });\\n\" +\r\n                        \"  //\\n\" +\r\n                        \"  Object.defineProperty(HTMLCanvasElement.prototype, \\\"toDataURL\\\", {\\n\" +\r\n                        \"    \\\"value\\\": function () {\\n\" +\r\n                        \"      noisify(this, this.getContext(\\\"2d\\\"));\\n\" +\r\n                        \"      return toDataURL.apply(this, arguments);\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  });\\n\" +\r\n                        \"  //\\n\" +\r\n                        \"  Object.defineProperty(CanvasRenderingContext2D.prototype, \\\"getImageData\\\", {\\n\" +\r\n                        \"    \\\"value\\\": function () {\\n\" +\r\n                        \"      noisify(this.canvas, this);\\n\" +\r\n                        \"      return getImageData.apply(this, arguments);\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  });\"), null\r\n            )\r\n\r\n            //Prevent WebGL fingerprinting by randomizing\r\n            //can be tested e.g. at https://webbrowsertools.com\r\n            //\r\n            //The Javascript part below is taken from \"WebGL Fingerprint Defender\", Firefox plugin, Version 0.1.5, by ilGur\r\n            //The source code has been published originally under Mozilla Public License V2.0. You can obtain a copy of the license at https://mozilla.org/MPL/2.0/\r\n            //The author has given explicit written permission to use his code under GPL V3 in this project.\r\n            view.evaluateJavascript(\r\n                (\"\\n\" +\r\n                        \"  var config = {\\n\" +\r\n                        \"    \\\"random\\\": {\\n\" +\r\n                        \"      \\\"value\\\": function () {\\n\" +\r\n                        \"        return Math.random();\\n\" +\r\n                        \"      },\\n\" +\r\n                        \"      \\\"item\\\": function (e) {\\n\" +\r\n                        \"        var rand = e.length * config.random.value();\\n\" +\r\n                        \"        return e[Math.floor(rand)];\\n\" +\r\n                        \"      },\\n\" +\r\n                        \"      \\\"number\\\": function (power) {\\n\" +\r\n                        \"        var tmp = [];\\n\" +\r\n                        \"        for (var i = 0; i < power.length; i++) {\\n\" +\r\n                        \"          tmp.push(Math.pow(2, power[i]));\\n\" +\r\n                        \"        }\\n\" +\r\n                        \"        /*  */\\n\" +\r\n                        \"        return config.random.item(tmp);\\n\" +\r\n                        \"      },\\n\" +\r\n                        \"      \\\"int\\\": function (power) {\\n\" +\r\n                        \"        var tmp = [];\\n\" +\r\n                        \"        for (var i = 0; i < power.length; i++) {\\n\" +\r\n                        \"          var n = Math.pow(2, power[i]);\\n\" +\r\n                        \"          tmp.push(new Int32Array([n, n]));\\n\" +\r\n                        \"        }\\n\" +\r\n                        \"        /*  */\\n\" +\r\n                        \"        return config.random.item(tmp);\\n\" +\r\n                        \"      },\\n\" +\r\n                        \"      \\\"float\\\": function (power) {\\n\" +\r\n                        \"        var tmp = [];\\n\" +\r\n                        \"        for (var i = 0; i < power.length; i++) {\\n\" +\r\n                        \"          var n = Math.pow(2, power[i]);\\n\" +\r\n                        \"          tmp.push(new Float32Array([1, n]));\\n\" +\r\n                        \"        }\\n\" +\r\n                        \"        /*  */\\n\" +\r\n                        \"        return config.random.item(tmp);\\n\" +\r\n                        \"      }\\n\" +\r\n                        \"    },\\n\" +\r\n                        \"    \\\"spoof\\\": {\\n\" +\r\n                        \"      \\\"webgl\\\": {\\n\" +\r\n                        \"        \\\"buffer\\\": function (target) {\\n\" +\r\n                        \"          var proto = target.prototype ? target.prototype : target.__proto__;\\n\" +\r\n                        \"          const bufferData = proto.bufferData;\\n\" +\r\n                        \"          Object.defineProperty(proto, \\\"bufferData\\\", {\\n\" +\r\n                        \"            \\\"value\\\": function () {\\n\" +\r\n                        \"              var index = Math.floor(config.random.value() * arguments[1].length);\\n\" +\r\n                        \"              var noise = arguments[1][index] !== undefined ? 0.1 * config.random.value() * arguments[1][index] : 0;\\n\" +\r\n                        \"              //\\n\" +\r\n                        \"              arguments[1][index] = arguments[1][index] + noise;\\n\" +\r\n                        \"              window.top.postMessage(\\\"webgl-fingerprint-defender-alert\\\", '*');\\n\" +\r\n                        \"              //\\n\" +\r\n                        \"              return bufferData.apply(this, arguments);\\n\" +\r\n                        \"            }\\n\" +\r\n                        \"          });\\n\" +\r\n                        \"        },\\n\" +\r\n                        \"        \\\"parameter\\\": function (target) {\\n\" +\r\n                        \"          var proto = target.prototype ? target.prototype : target.__proto__;\\n\" +\r\n                        \"          const getParameter = proto.getParameter;\\n\" +\r\n                        \"          Object.defineProperty(proto, \\\"getParameter\\\", {\\n\" +\r\n                        \"            \\\"value\\\": function () {\\n\" +\r\n                        \"              window.top.postMessage(\\\"webgl-fingerprint-defender-alert\\\", '*');\\n\" +\r\n                        \"              //\\n\" +\r\n                        \"              if (arguments[0] === 3415) return 0;\\n\" +\r\n                        \"              else if (arguments[0] === 3414) return 24;\\n\" +\r\n                        \"              else if (arguments[0] === 36348) return 30;\\n\" +\r\n                        \"              else if (arguments[0] === 7936) return \\\"WebKit\\\";\\n\" +\r\n                        \"              else if (arguments[0] === 37445) return \\\"Google Inc.\\\";\\n\" +\r\n                        \"              else if (arguments[0] === 7937) return \\\"WebKit WebGL\\\";\\n\" +\r\n                        \"              else if (arguments[0] === 3379) return config.random.number([14, 15]);\\n\" +\r\n                        \"              else if (arguments[0] === 36347) return config.random.number([12, 13]);\\n\" +\r\n                        \"              else if (arguments[0] === 34076) return config.random.number([14, 15]);\\n\" +\r\n                        \"              else if (arguments[0] === 34024) return config.random.number([14, 15]);\\n\" +\r\n                        \"              else if (arguments[0] === 3386) return config.random.int([13, 14, 15]);\\n\" +\r\n                        \"              else if (arguments[0] === 3413) return config.random.number([1, 2, 3, 4]);\\n\" +\r\n                        \"              else if (arguments[0] === 3412) return config.random.number([1, 2, 3, 4]);\\n\" +\r\n                        \"              else if (arguments[0] === 3411) return config.random.number([1, 2, 3, 4]);\\n\" +\r\n                        \"              else if (arguments[0] === 3410) return config.random.number([1, 2, 3, 4]);\\n\" +\r\n                        \"              else if (arguments[0] === 34047) return config.random.number([1, 2, 3, 4]);\\n\" +\r\n                        \"              else if (arguments[0] === 34930) return config.random.number([1, 2, 3, 4]);\\n\" +\r\n                        \"              else if (arguments[0] === 34921) return config.random.number([1, 2, 3, 4]);\\n\" +\r\n                        \"              else if (arguments[0] === 35660) return config.random.number([1, 2, 3, 4]);\\n\" +\r\n                        \"              else if (arguments[0] === 35661) return config.random.number([4, 5, 6, 7, 8]);\\n\" +\r\n                        \"              else if (arguments[0] === 36349) return config.random.number([10, 11, 12, 13]);\\n\" +\r\n                        \"              else if (arguments[0] === 33902) return config.random.float([0, 10, 11, 12, 13]);\\n\" +\r\n                        \"              else if (arguments[0] === 33901) return config.random.float([0, 10, 11, 12, 13]);\\n\" +\r\n                        \"              else if (arguments[0] === 37446) return config.random.item([\\\"Graphics\\\", \\\"HD Graphics\\\", \\\"Intel(R) HD Graphics\\\"]);\\n\" +\r\n                        \"              else if (arguments[0] === 7938) return config.random.item([\\\"WebGL 1.0\\\", \\\"WebGL 1.0 (OpenGL)\\\", \\\"WebGL 1.0 (OpenGL Chromium)\\\"]);\\n\" +\r\n                        \"              else if (arguments[0] === 35724) return config.random.item([\\\"WebGL\\\", \\\"WebGL GLSL\\\", \\\"WebGL GLSL ES\\\", \\\"WebGL GLSL ES (OpenGL Chromium\\\"]);\\n\" +\r\n                        \"              //\\n\" +\r\n                        \"              return getParameter.apply(this, arguments);\\n\" +\r\n                        \"            }\\n\" +\r\n                        \"          });\\n\" +\r\n                        \"        }\\n\" +\r\n                        \"      }\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  };\\n\" +\r\n                        \"  //\\n\" +\r\n                        \"  config.spoof.webgl.buffer(WebGLRenderingContext);\\n\" +\r\n                        \"  config.spoof.webgl.buffer(WebGL2RenderingContext);\\n\" +\r\n                        \"  config.spoof.webgl.parameter(WebGLRenderingContext);\\n\" +\r\n                        \"  config.spoof.webgl.parameter(WebGL2RenderingContext);\"), null\r\n            )\r\n\r\n            //Prevent AudioContext fingerprinting by randomizing\r\n            //can be tested e.g. at https://webbrowsertools.com\r\n            //\r\n            //The Javascript part below is taken from \"AudioContext Fingerprint Defender\", Firefox plugin, Version 0.1.6, by ilGur\r\n            //The source code has been published originally under Mozilla Public License V2.0. You can obtain a copy of the license at https://mozilla.org/MPL/2.0/\r\n            //The author has given explicit written permission to use his code under GPL V3 in this project.\r\n            view.evaluateJavascript(\r\n                (\"\\n\" +\r\n                        \"    const context = {\\n\" +\r\n                        \"    \\\"BUFFER\\\": null,\\n\" +\r\n                        \"    \\\"getChannelData\\\": function (e) {\\n\" +\r\n                        \"      const getChannelData = e.prototype.getChannelData;\\n\" +\r\n                        \"      Object.defineProperty(e.prototype, \\\"getChannelData\\\", {\\n\" +\r\n                        \"        \\\"value\\\": function () {\\n\" +\r\n                        \"          const results_1 = getChannelData.apply(this, arguments);\\n\" +\r\n                        \"          if (context.BUFFER !== results_1) {\\n\" +\r\n                        \"            context.BUFFER = results_1;\\n\" +\r\n                        \"            for (var i = 0; i < results_1.length; i += 100) {\\n\" +\r\n                        \"              let index = Math.floor(Math.random() * i);\\n\" +\r\n                        \"              results_1[index] = results_1[index] + Math.random() * 0.0000001;\\n\" +\r\n                        \"            }\\n\" +\r\n                        \"          }\\n\" +\r\n                        \"          //\\n\" +\r\n                        \"          return results_1;\\n\" +\r\n                        \"        }\\n\" +\r\n                        \"      });\\n\" +\r\n                        \"    },\\n\" +\r\n                        \"    \\\"createAnalyser\\\": function (e) {\\n\" +\r\n                        \"      const createAnalyser = e.prototype.__proto__.createAnalyser;\\n\" +\r\n                        \"      Object.defineProperty(e.prototype.__proto__, \\\"createAnalyser\\\", {\\n\" +\r\n                        \"        \\\"value\\\": function () {\\n\" +\r\n                        \"          const results_2 = createAnalyser.apply(this, arguments);\\n\" +\r\n                        \"          const getFloatFrequencyData = results_2.__proto__.getFloatFrequencyData;\\n\" +\r\n                        \"          Object.defineProperty(results_2.__proto__, \\\"getFloatFrequencyData\\\", {\\n\" +\r\n                        \"            \\\"value\\\": function () {\\n\" +\r\n                        \"              const results_3 = getFloatFrequencyData.apply(this, arguments);\\n\" +\r\n                        \"              for (var i = 0; i < arguments[0].length; i += 100) {\\n\" +\r\n                        \"                let index = Math.floor(Math.random() * i);\\n\" +\r\n                        \"                arguments[0][index] = arguments[0][index] + Math.random() * 0.1;\\n\" +\r\n                        \"              }\\n\" +\r\n                        \"              //\\n\" +\r\n                        \"              return results_3;\\n\" +\r\n                        \"            }\\n\" +\r\n                        \"          });\\n\" +\r\n                        \"          //\\n\" +\r\n                        \"          return results_2;\\n\" +\r\n                        \"        }\\n\" +\r\n                        \"      });\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  };\\n\" +\r\n                        \"  //\\n\" +\r\n                        \"  context.getChannelData(AudioBuffer);\\n\" +\r\n                        \"  context.createAnalyser(AudioContext);\\n\" +\r\n                        \"  context.getChannelData(OfflineAudioContext);\\n\" +\r\n                        \"  context.createAnalyser(OfflineAudioContext);  \"), null\r\n            )\r\n\r\n            //Prevent Font fingerprinting by randomizing\r\n            //can be tested e.g. at https://webbrowsertools.com\r\n            //\r\n            //The Javascript part below is taken from \"Font Fingerprint Defender\", Firefox plugin, Version 0.1.3, by ilGur\r\n            //The source code has been published originally under Mozilla Public License V2.0. You can obtain a copy of the license at https://mozilla.org/MPL/2.0/\r\n            //The author has given explicit written permission to use his code under GPL V3 in this project.\r\n            view.evaluateJavascript(\r\n                (\"\\n\" +\r\n                        \"  var rand = {\\n\" +\r\n                        \"    \\\"noise\\\": function () {\\n\" +\r\n                        \"      var SIGN = Math.random() < Math.random() ? -1 : 1;\\n\" +\r\n                        \"      return Math.floor(Math.random() + SIGN * Math.random());\\n\" +\r\n                        \"    },\\n\" +\r\n                        \"    \\\"sign\\\": function () {\\n\" +\r\n                        \"      const tmp = [-1, -1, -1, -1, -1, -1, +1, -1, -1, -1];\\n\" +\r\n                        \"      const index = Math.floor(Math.random() * tmp.length);\\n\" +\r\n                        \"      return tmp[index];\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  };\\n\" +\r\n                        \"  //\\n\" +\r\n                        \"  Object.defineProperty(HTMLElement.prototype, \\\"offsetHeight\\\", {\\n\" +\r\n                        \"    get () {\\n\" +\r\n                        \"      const height = Math.floor(this.getBoundingClientRect().height);\\n\" +\r\n                        \"      const valid = height && rand.sign() === 1;\\n\" +\r\n                        \"      const result = valid ? height + rand.noise() : height;\\n\" +\r\n                        \"      //\\n\" +\r\n                        \"      if (valid && result !== height) {\\n\" +\r\n                        \"        window.top.postMessage(\\\"font-fingerprint-defender-alert\\\", '*');\\n\" +\r\n                        \"      }\\n\" +\r\n                        \"      //\\n\" +\r\n                        \"      return result;\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  });\\n\" +\r\n                        \"  //\\n\" +\r\n                        \"  Object.defineProperty(HTMLElement.prototype, \\\"offsetWidth\\\", {\\n\" +\r\n                        \"    get () {\\n\" +\r\n                        \"      const width = Math.floor(this.getBoundingClientRect().width);\\n\" +\r\n                        \"      const valid = width && rand.sign() === 1;\\n\" +\r\n                        \"      const result = valid ? width + rand.noise() : width;\\n\" +\r\n                        \"      //\\n\" +\r\n                        \"      if (valid && result !== width) {\\n\" +\r\n                        \"        window.top.postMessage(\\\"font-fingerprint-defender-alert\\\", '*');\\n\" +\r\n                        \"      }\\n\" +\r\n                        \"      //\\n\" +\r\n                        \"      return result;\\n\" +\r\n                        \"    }\\n\" +\r\n                        \"  });\"), null\r\n            )\r\n\r\n            //Spoof screen resolution, color depth: set values like in Tor browser, random values for device memory, hardwareConcurrency, remove battery, network connection, keyboard, media devices info, prevent sendBeacon\r\n            view.evaluateJavascript(\r\n                (\"\" +\r\n                        \"Object.defineProperty(window, 'devicePixelRatio',{value:1});\" +\r\n                        \"Object.defineProperty(window.screen, 'width',{value:1000});\" +\r\n                        \"Object.defineProperty(window.screen, 'availWidth',{value:1000});\" +\r\n                        \"Object.defineProperty(window.screen, 'height',{value:900});\" +\r\n                        \"Object.defineProperty(window.screen, 'availHeight',{value:900});\" +\r\n                        \"Object.defineProperty(window.screen, 'colorDepth',{value:24});\" +\r\n                        \"Object.defineProperty(window, 'outerWidth',{value:1000});\" +\r\n                        \"Object.defineProperty(window, 'outerHeight',{value:900});\" +\r\n                        \"Object.defineProperty(window, 'innerWidth',{value:1000});\" +\r\n                        \"Object.defineProperty(window, 'innerHeight',{value:900});\" +\r\n                        \"Object.defineProperty(navigator, 'getBattery',{value:function(){}});\" +\r\n                        \"const ram=Math.pow(2,Math.floor(Math.random() * 4));Object.defineProperty(navigator, 'deviceMemory',{value:ram});\" +\r\n                        \"const hw=Math.pow(2,Math.floor(Math.random() * 4));Object.defineProperty(navigator, 'hardwareConcurrency',{value:hw});\" +\r\n                        \"Object.defineProperty(navigator, 'connection',{value:null});\" +\r\n                        \"Object.defineProperty(navigator, 'keyboard',{value:null});\" +\r\n                        \"Object.defineProperty(navigator, 'sendBeacon',{value:null});\"), null\r\n            )\r\n            if (!ninjaWebView.isCamera) {\r\n                view.evaluateJavascript(\r\n                    \"\" +\r\n                            \"Object.defineProperty(navigator, 'mediaDevices',{value:null});\", null\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onLoadResource(view: WebView, url: String) {\r\n        if (sp.getBoolean(\"onLoadResource\", false)) {\r\n            Objects.requireNonNull(sp.getString(\"sp_onLoadResource\", \"\"))?.let {\r\n                view.evaluateJavascript(\r\n                    it,\r\n                    null\r\n                )\r\n            }\r\n        }\r\n        if (ninjaWebView.isFingerPrintProtection) {\r\n            view.evaluateJavascript(\r\n                \"var test=document.querySelector(\\\"a[ping]\\\"); if(test!==null){test.removeAttribute('ping')};\",\r\n                null\r\n            )\r\n            //do not allow ping on http only pages (tested with http://tests.caniuse.com)\r\n        }\r\n        if (view.settings.useWideViewPort && (view.width < 1300)) view.evaluateJavascript(\r\n            \"document.querySelector('meta[name=\\\"viewport\\\"]').setAttribute('content', 'width=1200px');\",\r\n            null\r\n        )\r\n        //  Client-side detection for GlobalPrivacyControl\r\n        view.evaluateJavascript(\r\n            \"if (navigator.globalPrivacyControl === undefined) { Object.defineProperty(navigator, 'globalPrivacyControl', { value: true, writable: false,configurable: false});} else {try { navigator.globalPrivacyControl = true;} catch (e) { console.error('globalPrivacyControl is not writable: ', e); }};\",\r\n            null\r\n        )\r\n        //  Script taken from:\r\n        //\r\n        //  donotsell.js\r\n        //  DuckDuckGo\r\n        //\r\n        //  Copyright © 2020 DuckDuckGo. All rights reserved.\r\n        //\r\n        //  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n        //  you may not use this file except in compliance with the License.\r\n        //  You may obtain a copy of the License at\r\n        //\r\n        //  http://www.apache.org/licenses/LICENSE-2.0\r\n        //\r\n        //  Unless required by applicable law or agreed to in writing, software\r\n        //  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n        //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n        //  See the License for the specific language governing permissions and\r\n        //  limitations under the License.\r\n        //\r\n        view.evaluateJavascript(\r\n            \"if (navigator.doNotTrack === null) { Object.defineProperty(navigator, 'doNotTrack', { value: 1, writable: false,configurable: false});} else {try { navigator.doNotTrack = 1;} catch (e) { console.error('doNotTrack is not writable: ', e); }};\",\r\n            null\r\n        )\r\n        view.evaluateJavascript(\r\n            \"if (window.doNotTrack === undefined) { Object.defineProperty(window, 'doNotTrack', { value: 1, writable: false,configurable: false});} else {try { window.doNotTrack = 1;} catch (e) { console.error('doNotTrack is not writable: ', e); }};\",\r\n            null\r\n        )\r\n        view.evaluateJavascript(\r\n            \"if (navigator.msDoNotTrack === undefined) { Object.defineProperty(navigator, 'msDoNotTrack', { value: 1, writable: false,configurable: false});} else {try { navigator.msDoNotTrack = 1;} catch (e) { console.error('msDoNotTrack is not writable: ', e); }};\",\r\n            null\r\n        )\r\n    }\r\n\r\n    override fun shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): Boolean {\r\n        val uri = request.url\r\n        if (ninjaWebView.isBackPressed) {\r\n            return false\r\n        } else {\r\n            // handle the url by implementing your logic\r\n            val url = uri.toString()\r\n            if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) return false\r\n            try {\r\n                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\r\n                view.context.startActivity(intent)\r\n                return true\r\n            } catch (e: Exception) {\r\n                Timber.d(\"TAG_webviewclient: shouldOverrideUrlLoading Exception:$e\")\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun shouldInterceptRequest(\r\n        view: WebView,\r\n        request: WebResourceRequest\r\n    ): WebResourceResponse? {\r\n        return if (ninjaWebView.isAdBlock\r\n//            && adBlock.isAd(request.url.toString())\r\n        ) {\r\n            WebResourceResponse(\r\n                BrowserUnit.MIME_TYPE_TEXT_PLAIN,\r\n                BrowserUnit.URL_ENCODING,\r\n                ByteArrayInputStream(\"\".toByteArray())\r\n            )\r\n        } else super.shouldInterceptRequest(view, request)\r\n    }\r\n\r\n    override fun onFormResubmission(view: WebView, doNotResend: Message, resend: Message) {\r\n        val builder = MaterialAlertDialogBuilder(context)\r\n        builder.setTitle(R.string.app_warning)\r\n        builder.setIcon(R.drawable.icon_alert)\r\n        builder.setMessage(R.string.dialog_content_resubmission)\r\n        builder.setPositiveButton(R.string.app_ok) { dialog, whichButton -> resend.sendToTarget() }\r\n        builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        dialog.setOnCancelListener({ dialog1: DialogInterface? -> doNotResend.sendToTarget() })\r\n        HelperUnit.setupDialog(context, dialog)\r\n    }\r\n\r\n    override fun onReceivedSslError(view: WebView, handler: SslErrorHandler, error: SslError) {\r\n        val message: String\r\n        when (error.primaryError) {\r\n            SslError.SSL_UNTRUSTED -> message = \"\\\"Certificate authority is not trusted.\\\"\"\r\n            SslError.SSL_EXPIRED -> message = \"\\\"Certificate has expired.\\\"\"\r\n            SslError.SSL_IDMISMATCH -> message = \"\\\"Certificate Hostname mismatch.\\\"\"\r\n            SslError.SSL_NOTYETVALID -> message = \"\\\"Certificate is not yet valid.\\\"\"\r\n            SslError.SSL_DATE_INVALID -> message = \"\\\"Certificate date is invalid.\\\"\"\r\n            else -> message = \"\\\"Certificate is invalid.\\\"\"\r\n        }\r\n        val text = message + \" - \" + context.getString(R.string.dialog_content_ssl_error)\r\n        val builder = MaterialAlertDialogBuilder(context)\r\n        builder.setIcon(R.drawable.icon_alert)\r\n        builder.setTitle(R.string.app_warning)\r\n        builder.setMessage(text)\r\n        builder.setPositiveButton(R.string.app_ok) { dialog, whichButton -> handler.proceed() }\r\n        builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        dialog.setOnCancelListener({ dialog1: DialogInterface? -> handler.cancel() })\r\n        HelperUnit.setupDialog(context, dialog)\r\n    }\r\n\r\n    override fun onReceivedHttpAuthRequest(\r\n        view: WebView,\r\n        handler: HttpAuthHandler,\r\n        host: String,\r\n        realm: String\r\n    ) {\r\n        val builder = MaterialAlertDialogBuilder(context)\r\n        val dialogView = View.inflate(context, R.layout.dialog_edit_title, null)\r\n        val edit_title_layout: TextInputLayout = dialogView.findViewById(R.id.edit_title_layout)\r\n        val edit_userName_layout: TextInputLayout =\r\n            dialogView.findViewById(R.id.edit_userName_layout)\r\n        val edit_PW_layout: TextInputLayout = dialogView.findViewById(R.id.edit_PW_layout)\r\n        val ib_icon = dialogView.findViewById<ImageView>(R.id.edit_icon)\r\n        ib_icon.visibility = View.GONE\r\n        edit_title_layout.visibility = View.GONE\r\n        edit_userName_layout.visibility = View.VISIBLE\r\n        edit_PW_layout.visibility = View.VISIBLE\r\n        val pass_userNameET = dialogView.findViewById<EditText>(R.id.edit_userName)\r\n        val pass_userPWET = dialogView.findViewById<EditText>(R.id.edit_PW)\r\n        builder.setView(dialogView)\r\n        builder.setTitle(\"HttpAuthRequest\")\r\n        builder.setIcon(R.drawable.icon_alert)\r\n        builder.setMessage(view.url)\r\n        builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n            val user: String = pass_userNameET.getText().toString().trim { it <= ' ' }\r\n            val pass: String = pass_userPWET.getText().toString().trim { it <= ' ' }\r\n            handler.proceed(user, pass)\r\n            dialog.cancel()\r\n        }\r\n        builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        HelperUnit.setupDialog(context, dialog)\r\n        dialog.setOnCancelListener { dialog1: DialogInterface ->\r\n            handler.cancel()\r\n            dialog1.cancel()\r\n        }\r\n    }\r\n\r\n    init {\r\n//        context = ninjaWebView.getContext()\r\n        //        adBlock = AdBlock(context)\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebViewClient.kt b/app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebViewClient.kt
--- a/app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebViewClient.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/other/browser/NinjaWebViewClient.kt	
@@ -15,6 +15,7 @@
 import android.widget.ImageView
 import com.google.android.material.dialog.MaterialAlertDialogBuilder
 import com.google.android.material.textfield.TextInputLayout
+import timber.log.Timber
 import web.browser.dragon.R
 import web.browser.dragon.utils.other.database.Record
 import web.browser.dragon.utils.other.database.RecordAction
@@ -22,9 +23,7 @@
 import web.browser.dragon.utils.other.unit.HelperUnit
 import web.browser.dragon.utils.other.unit.RecordUnit
 import web.browser.dragon.utils.other.view.NinjaWebView
-import timber.log.Timber
 import java.io.ByteArrayInputStream
-import java.lang.Exception
 import java.util.*
 
 class NinjaWebViewClient(ninjaWebView: NinjaWebView) : WebViewClient() {
@@ -587,8 +586,11 @@
         }
     }
 
+
+
+
     init {
 //        context = ninjaWebView.getContext()
         //        adBlock = AdBlock(context)
     }
-}
\ No newline at end of file
+}
Index: app/src/main/java/web/browser/dragon/utils/ogparser/JsoupNetworkCall.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.ogparser\r\n\r\nimport web.browser.dragon.model.OpenGraphResult\r\nimport org.jsoup.Jsoup\r\n\r\nclass JsoupNetworkCall {\r\n\r\n    private val REFERRER = \"http://www.google.com\"\r\n    private val TIMEOUT = 100000\r\n    private val DOC_SELECT_QUERY = \"meta[property^=og:]\"\r\n    private val OPEN_GRAPH_KEY = \"content\"\r\n    private val PROPERTY = \"property\"\r\n    private val OG_IMAGE = \"og:image\"\r\n    private val OG_DESCRIPTION = \"og:description\"\r\n    private val OG_URL = \"og:url\"\r\n    private val OG_TITLE = \"og:title\"\r\n    private val OG_SITE_NAME = \"og:site_name\"\r\n    private val OG_TYPE = \"og:type\"\r\n\r\n    private var openGraphResult: OpenGraphResult? = null\r\n\r\n    fun callUrl(url: String, agent: String): OpenGraphResult? {\r\n        openGraphResult = OpenGraphResult()\r\n        try {\r\n            val response = Jsoup.connect(url)\r\n                .ignoreContentType(true)\r\n                .userAgent(agent)\r\n                .referrer(REFERRER)\r\n                .timeout(TIMEOUT)\r\n                .followRedirects(true)\r\n                .execute()\r\n\r\n            val doc = response.parse()\r\n            val ogTags = doc.select(DOC_SELECT_QUERY)\r\n            when {\r\n                ogTags.size > 0 ->\r\n                    ogTags.forEachIndexed { index, _ ->\r\n                        val tag = ogTags[index]\r\n                        val text = tag.attr(PROPERTY)\r\n\r\n                        when (text) {\r\n                            OG_IMAGE -> {\r\n                                openGraphResult!!.image = (tag.attr(OPEN_GRAPH_KEY))\r\n                            }\r\n                            OG_DESCRIPTION -> {\r\n                                openGraphResult!!.description = (tag.attr(OPEN_GRAPH_KEY))\r\n                            }\r\n                            OG_URL -> {\r\n                                openGraphResult!!.url = (tag.attr(OPEN_GRAPH_KEY))\r\n                            }\r\n                            OG_TITLE -> {\r\n                                openGraphResult!!.title = (tag.attr(OPEN_GRAPH_KEY))\r\n                            }\r\n                            OG_SITE_NAME -> {\r\n                                openGraphResult!!.siteName = (tag.attr(OPEN_GRAPH_KEY))\r\n                            }\r\n                            OG_TYPE -> {\r\n                                openGraphResult!!.type = (tag.attr(OPEN_GRAPH_KEY))\r\n                            }\r\n                        }\r\n                    }\r\n            }\r\n\r\n            if (openGraphResult!!.title.isNullOrEmpty())\r\n                openGraphResult!!.title = doc.title()\r\n            if (openGraphResult!!.description.isNullOrEmpty())\r\n                openGraphResult!!.description = if (doc.select(\"meta[name=description]\").size != 0) doc.select(\"meta[name=description]\")\r\n                    .first()?.attr(\"content\") else \"\"\r\n            if (openGraphResult!!.url.isNullOrEmpty())\r\n                openGraphResult!!.url = getBaseUrl(url)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n\r\n        return openGraphResult\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/ogparser/JsoupNetworkCall.kt b/app/src/main/java/web/browser/dragon/utils/ogparser/JsoupNetworkCall.kt
--- a/app/src/main/java/web/browser/dragon/utils/ogparser/JsoupNetworkCall.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/ogparser/JsoupNetworkCall.kt	
@@ -26,7 +26,7 @@
                 .ignoreContentType(true)
                 .userAgent(agent)
                 .referrer(REFERRER)
-                .timeout(TIMEOUT)
+                .timeout(TIMEOUT).ignoreHttpErrors(true) //org.jsoup.HttpStatusException, проблема решения если ошибка будет повторяться убрать ignoreHttpErrors(true)
                 .followRedirects(true)
                 .execute()
 
Index: app/src/main/java/web/browser/dragon/utils/appsflyer/Utils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.appsflyer\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.net.Uri\r\nimport android.os.BatteryManager\r\nimport android.os.Build\r\nimport android.preference.PreferenceManager\r\nimport android.provider.Settings\r\nimport android.telephony.TelephonyManager\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport ru.tachos.admitadstatisticsdk.AdmitadTracker\r\nimport ru.tachos.admitadstatisticsdk.network_state.NetworkState\r\nimport web.browser.dragon.AppsflyerBasicApp\r\nimport java.net.Inet4Address\r\nimport java.net.InetAddress\r\nimport java.net.NetworkInterface\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\ninternal object Utils {\r\n    private const val KEY_CACHED_GAID = \"KEY_CACHED_GAID\"\r\n    private const val KEY_FIRST_START = \"ADMITAD_TRACKER_KEY_FIRST_START\"\r\n    private const val KEY_ADMITAD_ID = \"ADMITAD_ID\"\r\n    private const val KEY_REFERRER = \"INSTALL_REFERRER\"\r\n    private const val TAG = \"AdmitadTracker\"\r\n    var sLogEnabled = false\r\n    fun collectDeviceInfo(context: Context): JSONObject {\r\n        val jsonObject = JSONObject()\r\n        try {\r\n            @SuppressLint(\"HardwareIds\") val androidId =\r\n                Settings.Secure.getString(context.contentResolver, Settings.Secure.ANDROID_ID)\r\n            if (!TextUtils.isEmpty(androidId)) {\r\n                jsonObject.put(\"hardware_id\", androidId)\r\n                jsonObject.put(\"is_hardware_id_real\", false)\r\n            }\r\n            jsonObject.put(\"brand\", Build.MANUFACTURER)\r\n            jsonObject.put(\"model\", Build.MODEL)\r\n            jsonObject.put(\"product\", Build.PRODUCT)\r\n            jsonObject.put(\"device\", Build.DEVICE)\r\n            val metrics = context.resources.displayMetrics\r\n            jsonObject.put(\"screen_dpi\", (metrics.density * 160f).toDouble())\r\n            jsonObject.put(\"screen_height\", metrics.heightPixels)\r\n            jsonObject.put(\"screen_width\", metrics.widthPixels)\r\n            jsonObject.put(\r\n                \"wifi\",\r\n                NetworkState.getConnectivityStatus(context) == NetworkState.WIFI\r\n            )\r\n            jsonObject.put(\"os\", \"Android\")\r\n            jsonObject.put(\"os_version\", Build.VERSION.RELEASE)\r\n            jsonObject.put(\"sdk\", AdmitadTracker.VERSION_NAME)\r\n            jsonObject.put(\r\n                \"installDate\",\r\n                SimpleDateFormat(\r\n                    \"yyyy-MM-dd'T'HH:mm:ss.SSSSSSZZZZZ\",\r\n                    Locale.getDefault()\r\n                )\r\n                    .format(Calendar.getInstance().time)\r\n            )\r\n            val gaid = getCachedGAID(context)\r\n            if (!TextUtils.isEmpty(gaid)) {\r\n                jsonObject.put(\"google_advertising_id\", getCachedGAID(context))\r\n            }\r\n            val telephonyManager =\r\n                context.getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager\r\n            if (telephonyManager != null) {\r\n                val operatorName = telephonyManager.networkOperatorName\r\n                val countryCode = telephonyManager.simCountryIso\r\n                if (!TextUtils.isEmpty(operatorName)) {\r\n                    jsonObject.put(\"carrier\", operatorName)\r\n                    jsonObject.put(\"operator\", operatorName)\r\n                }\r\n                if (!TextUtils.isEmpty(countryCode)) {\r\n                    jsonObject.put(\"country\", countryCode)\r\n                }\r\n            }\r\n            jsonObject.put(\"lang_code\", Locale.getDefault().language)\r\n            jsonObject.put(\"lang\", Locale.getDefault().displayLanguage)\r\n            try {\r\n                jsonObject.put(\"currency\", Currency.getInstance(Locale.getDefault()).currencyCode)\r\n            } catch (e: IllegalArgumentException) {\r\n                // https://developer.android.com/reference/java/util/Currency.html#getInstance(java.util.Locale)\r\n                // Locale.getDefault() can return:\r\n                // 1) truncated locales (for example \"en\" instead of \"en_US\", because country is optional)\r\n                // 2) deprecated locales (for example \"en_UK\" instead of \"en_GB\")\r\n                // 3) locales without currency (for example Antarctica)\r\n                // All of them throw on getCurrencyCode or returned currency can be null.\r\n                jsonObject.put(\"currency\", \"\")\r\n            } catch (e: NullPointerException) {\r\n                jsonObject.put(\"currency\", \"\")\r\n            }\r\n            val jsonDeviceData = JSONObject()\r\n            jsonDeviceData.put(\"build_display_id\", Build.DISPLAY)\r\n            jsonDeviceData.put(\"arch\", System.getProperty(\"os.arch\"))\r\n            var cpu_abi: String? = \"\"\r\n            var cpu_abi2: String? = \"\"\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                cpu_abi = Arrays.toString(Build.SUPPORTED_32_BIT_ABIS)\r\n                cpu_abi2 = Arrays.toString(Build.SUPPORTED_64_BIT_ABIS)\r\n            }\r\n            jsonDeviceData.put(\"cpu_abi\", cpu_abi)\r\n            jsonDeviceData.put(\"cpu_abi2\", cpu_abi2)\r\n\r\n            // https://developer.android.com/training/monitoring-device-state/battery-monitoring\r\n            val ifilter = IntentFilter(Intent.ACTION_BATTERY_CHANGED)\r\n            val batteryStatus = context.registerReceiver(null, ifilter)\r\n            val level = batteryStatus!!.getIntExtra(BatteryManager.EXTRA_LEVEL, -1)\r\n            val status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1)\r\n            val scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, 1)\r\n            val batteryPct = level / scale.toFloat()\r\n            val state: String\r\n            state = when (status) {\r\n                BatteryManager.BATTERY_STATUS_UNKNOWN -> \"unknown\"\r\n                BatteryManager.BATTERY_STATUS_CHARGING -> \"charging\"\r\n                BatteryManager.BATTERY_STATUS_DISCHARGING -> \"discharging\"\r\n                BatteryManager.BATTERY_STATUS_NOT_CHARGING -> \"not charging\"\r\n                BatteryManager.BATTERY_STATUS_FULL -> \"full\"\r\n                else -> \"unknown\"\r\n            }\r\n            jsonDeviceData.put(\"battery_level\", batteryPct.toDouble())\r\n            jsonDeviceData.put(\"battery_state\", state)\r\n            jsonDeviceData.put(\"localip\", localIpAddress)\r\n            jsonObject.put(\"deviceData\", jsonDeviceData)\r\n        } catch (e: JSONException) {\r\n            e.printStackTrace()\r\n        }\r\n        return jsonObject\r\n    }\r\n\r\n    fun getCachedGAID(context: Context?): String? {\r\n        return PreferenceManager.getDefaultSharedPreferences(context).getString(KEY_CACHED_GAID, \"\")\r\n    }\r\n\r\n    fun cacheGAID(context: Context?, gaid: String?) {\r\n        PreferenceManager.getDefaultSharedPreferences(context).edit()\r\n            .putString(KEY_CACHED_GAID, gaid).apply()\r\n    }\r\n\r\n    fun getAdmitadUid(context: Context?): String? {\r\n        return PreferenceManager.getDefaultSharedPreferences(context).getString(KEY_ADMITAD_ID, \"\")\r\n    }\r\n\r\n    fun cacheUid(context: Context?, gaid: String?) {\r\n        PreferenceManager.getDefaultSharedPreferences(context).edit()\r\n            .putString(KEY_ADMITAD_ID, gaid).apply()\r\n    }\r\n\r\n    fun getReferrer(context: Context?): String? {\r\n        return PreferenceManager.getDefaultSharedPreferences(context).getString(KEY_REFERRER, \"\")\r\n    }\r\n\r\n    fun cacheReferrer(context: Context?, referrer: String?) {\r\n        val cachedReferrer = getReferrer(context)\r\n        if (!TextUtils.isEmpty(referrer) && !TextUtils.equals(cachedReferrer, referrer)) {\r\n            PreferenceManager.getDefaultSharedPreferences(context).edit()\r\n                .putString(KEY_REFERRER, referrer).apply()\r\n        }\r\n    }\r\n\r\n    fun isFirstLaunch(context: Context?): Boolean {\r\n        val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)\r\n        val isFirstStart = sharedPreferences.getBoolean(KEY_FIRST_START, true)\r\n        if (isFirstStart) {\r\n            sharedPreferences.edit().putBoolean(KEY_FIRST_START, false).apply()\r\n        }\r\n        return isFirstStart\r\n    }// keep first non-WiFi address if we won't find WiFi\r\n\r\n    // WiFi interfaces are prioritized\r\n    val localIpAddress: String?\r\n        get() {\r\n            var address = \"\"\r\n            try {\r\n                val interfaces: List<NetworkInterface> =\r\n                    Collections.list(NetworkInterface.getNetworkInterfaces())\r\n                for (intf in interfaces) {\r\n                    val addrs: List<InetAddress> = Collections.list(intf.inetAddresses)\r\n                    for (addr in addrs) {\r\n                        if (!addr.isLoopbackAddress && addr is Inet4Address) {\r\n                            if (intf.name.contains(\"wlan\")) {\r\n                                // WiFi interfaces are prioritized\r\n                                return addr.getHostAddress()\r\n                            } else if (TextUtils.isEmpty(address)) {\r\n                                // keep first non-WiFi address if we won't find WiFi\r\n                                address = addr.getHostAddress()\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                if (sLogEnabled) {\r\n                    Log.e(TAG, e.message!!)\r\n                }\r\n            }\r\n            return address\r\n        }\r\n}\r\n\r\n//class Admitad : AppsflyerBasicApp(), TrackerListener {\r\n//    override fun onCreate() {\r\n//        super.onCreate()\r\n////        setContentView(R.layout.activity_main)\r\n//        AdmitadTracker.setLogEnabled(true)\r\n//        AdmitadTracker.initialize(\r\n//            applicationContext,\r\n//            \"9407de3a7178dc79e91b95c8c8395eca9796753a\",\r\n//            object : TrackerInitializationCallback,\r\n//                ru.tachos.admitadstatisticsdk.TrackerInitializationCallback {\r\n//                override fun onInitializationSuccess() {}\r\n//                override fun onInitializationFailed(exception: Exception?) {}\r\n//            })\r\n//        AdmitadTracker.getInstance()!!.admitadUid\r\n//        onNewIntent(onNewIntent(intent = Unit))\r\n//        Log.d(\"test\", \"newIntent = ${onNewIntent(intent = Unit)}\")\r\n////         orderClick()\r\n//    }\r\n//\r\n//     private fun onNewIntent(intent: Unit) {\r\n////        super.onNewIntent(intent)\r\n////        setIntent(intent)\r\n//        if (intent.data != null) {\r\n//            AdmitadTracker.getInstance()?.handleDeeplink(intent.data)\r\n//        }\r\n//    }\r\n//\r\n////    override fun onSuccess(result: AdmitadEvent?) {\r\n////        logConsole(\"Event send successfully + $result\")\r\n////    }\r\n//\r\n//    override fun onSuccess(result: ru.tachos.admitadstatisticsdk.AdmitadEvent?) {\r\n//        Log.d(\"test\", \"onSucccess = $result\")\r\n//    }\r\n//\r\n//    override fun onFailure(errorCode: Int, errorText: String?) {\r\n//        Log.d(\"test\", \"onFailure = errorCode : $errorCode, errorText : $errorText \")\r\n//    }\r\n//\r\n//    fun registrationClick(v: View?) {\r\n//        AdmitadTracker.getInstance()?.logRegistration(\"TestRegistrationUid\")\r\n//    }\r\n//\r\n//    fun orderClick() {\r\n//        val r = Random()\r\n//        val order_id = r.nextInt(10000)\r\n//        val order: ru.tachos.admitadstatisticsdk.AdmitadOrder = ru.tachos.admitadstatisticsdk.AdmitadOrder.Builder(\"id$order_id\", \"100.00\")\r\n//            .setCurrencyCode(\"RUB\")\r\n//            .putItem(ru.tachos.admitadstatisticsdk.AdmitadOrder.Item(\"Item1\", \"ItemName1\", 3))\r\n//            .putItem(ru.tachos.admitadstatisticsdk.AdmitadOrder.Item(\"Item2\", \"ItemName2\", 5))\r\n//            .setUserInfo(ru.tachos.admitadstatisticsdk.AdmitadOrder.UserInfo().putExtra(\"Surname\", \"Kek\").putExtra(\"Age\", \"10\"))\r\n//            .setPromocode(\"PROMO\") // setting up promocode for order\r\n//            .build()\r\n//        AdmitadTracker.getInstance()?.logOrder(order, object : ru.tachos.admitadstatisticsdk.TrackerListener {\r\n//            override fun onSuccess(result: ru.tachos.admitadstatisticsdk.AdmitadEvent?) {\r\n//                Log.d(\"test\", \"orderClick = $result\")\r\n//            }\r\n//\r\n//            override fun onFailure(errorCode: Int, errorText: String?) {\r\n//                Log.d(\"test\", \"orderClick = onFailure = errorCode : $errorCode, errorText : $errorText \")\r\n//            }\r\n//        })\r\n//    }\r\n//\r\n//    fun purchaseClick(v: View?) {\r\n//        val r = Random()\r\n//        val purchase_id = r.nextInt(10000)\r\n//        val order: AdmitadOrder = AdmitadOrder.Builder(\"id$purchase_id\", \"1756.00\")\r\n//            .setCurrencyCode(\"USD\")\r\n//            .putItem(AdmitadOrder.Item(\"Item1\", \"ItemName1\", 7))\r\n//            .putItem(AdmitadOrder.Item(\"Item2\", \"ItemName2\", 8))\r\n//            .setUserInfo(AdmitadOrder.UserInfo().putExtra(\"Name\", \"Keksel\").putExtra(\"Age\", \"1430\"))\r\n//            .build()\r\n//        AdmitadTracker.getInstance()?.logPurchase(order)\r\n//    }\r\n//\r\n//    fun returnClick(v: View?) {\r\n//        AdmitadTracker.getInstance()?.logUserReturn(\"TestReturnUserUid\", 5)\r\n//    }\r\n//\r\n//    fun loyaltyClick(v: View?) {\r\n//        AdmitadTracker.getInstance()?.logUserLoyalty(\"TestUserLoyaltyUid\", 10)\r\n//    }\r\n//\r\n//    fun manyEventsQueue(v: View?) {\r\n//        for (i in 0..99) {\r\n//            AdmitadTracker.getInstance()?.logRegistration(\"userRegistration$i\")\r\n//            AdmitadTracker.getInstance()?.logUserLoyalty(\"userLoyalty$i\", i)\r\n//        }\r\n//    }\r\n//\r\n//    fun setupNewAdmitadUid(v: View?) {\r\n//        AdmitadTracker.getInstance()\r\n//            ?.handleDeeplink(Uri.parse(\"schema://host?uid=\" + UUID.randomUUID()))\r\n//        logConsole(\"Current admitad_uid: \" + AdmitadTracker.getInstance()!!.admitadUid)\r\n//    }\r\n//\r\n//    private fun logConsole(message: String) {\r\n//        Log.d(\"MainActivity\", \"$message\")\r\n//    }\r\n//}\r\n//\r\n\r\n
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/appsflyer/Utils.kt b/app/src/main/java/web/browser/dragon/utils/appsflyer/Utils.kt
--- a/app/src/main/java/web/browser/dragon/utils/appsflyer/Utils.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/appsflyer/Utils.kt	
@@ -4,7 +4,6 @@
 import android.content.Context
 import android.content.Intent
 import android.content.IntentFilter
-import android.net.Uri
 import android.os.BatteryManager
 import android.os.Build
 import android.preference.PreferenceManager
@@ -12,12 +11,10 @@
 import android.telephony.TelephonyManager
 import android.text.TextUtils
 import android.util.Log
-import android.view.View
 import org.json.JSONException
 import org.json.JSONObject
 import ru.tachos.admitadstatisticsdk.AdmitadTracker
 import ru.tachos.admitadstatisticsdk.network_state.NetworkState
-import web.browser.dragon.AppsflyerBasicApp
 import java.net.Inet4Address
 import java.net.InetAddress
 import java.net.NetworkInterface
Index: app/src/main/java/web/browser/dragon/utils/appsflyer/Admitad.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils.appsflyer\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport ru.tachos.admitadstatisticsdk.*\r\nimport web.browser.dragon.*\r\nimport web.browser.dragon.R\r\nimport java.util.*\r\n\r\nclass Admitad : AppCompatActivity(), TrackerListener {\r\n     override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        AdmitadTracker.setLogEnabled(true)\r\n        AdmitadTracker.initialize(\r\n            applicationContext,\r\n            \"9407de3a7178dc79e91b95c8c8395eca9796753a\",\r\n            object : TrackerInitializationCallback {\r\n                override fun onInitializationSuccess() {}\r\n                override fun onInitializationFailed(exception: Exception?) {}\r\n            })\r\n        AdmitadTracker.getInstance()!!.admitadUid\r\n        onNewIntent(intent)\r\n         Log.d(\"test\", \"newIntent = $intent\")\r\n//         orderClick()\r\n    }\r\n\r\n     override fun onNewIntent(intent: Intent) {\r\n        super.onNewIntent(intent)\r\n        setIntent(intent)\r\n        if (intent.data != null) {\r\n            AdmitadTracker.getInstance()?.handleDeeplink(intent.data)\r\n            Log.d(\"test\", \"newIntent = ${AdmitadTracker.getInstance()?.handleDeeplink(intent.data)}\")\r\n\r\n        }\r\n    }\r\n\r\n//    override fun onSuccess(result: AdmitadEvent?) {\r\n//        logConsole(\"Event send successfully + $result\")\r\n//    }\r\n\r\n    override fun onSuccess(result: ru.tachos.admitadstatisticsdk.AdmitadEvent?) {\r\n        Log.d(\"test\", \"onSucccess = $result\")\r\n    }\r\n\r\n    override fun onFailure(errorCode: Int, errorText: String?) {\r\n        Log.d(\"test\", \"onFailure = errorCode : $errorCode, errorText : $errorText \")\r\n    }\r\n\r\n    fun registrationClick(v: View?) {\r\n        AdmitadTracker.getInstance()?.logRegistration(\"TestRegistrationUid\")\r\n    }\r\n\r\n    fun orderClick() {\r\n        val r = Random()\r\n        val order_id = r.nextInt(10000)\r\n        val order: ru.tachos.admitadstatisticsdk.AdmitadOrder = ru.tachos.admitadstatisticsdk.AdmitadOrder.Builder(\"id$order_id\", \"100.00\")\r\n            .setCurrencyCode(\"RUB\")\r\n            .putItem(ru.tachos.admitadstatisticsdk.AdmitadOrder.Item(\"Item1\", \"ItemName1\", 3))\r\n            .putItem(ru.tachos.admitadstatisticsdk.AdmitadOrder.Item(\"Item2\", \"ItemName2\", 5))\r\n            .setUserInfo(ru.tachos.admitadstatisticsdk.AdmitadOrder.UserInfo().putExtra(\"Surname\", \"Kek\").putExtra(\"Age\", \"10\"))\r\n            .setPromocode(\"PROMO\") // setting up promocode for order\r\n            .build()\r\n        AdmitadTracker.getInstance()?.logOrder(order, object : ru.tachos.admitadstatisticsdk.TrackerListener {\r\n            override fun onSuccess(result: ru.tachos.admitadstatisticsdk.AdmitadEvent?) {\r\n                Log.d(\"test\", \"orderClick on Success= $result\")\r\n            }\r\n\r\n            override fun onFailure(errorCode: Int, errorText: String?) {\r\n                Log.d(\"test\", \"orderClick = onFailure = errorCode : $errorCode, errorText : $errorText \")\r\n            }\r\n        })\r\n    }\r\n\r\n    fun purchaseClick(v: View?) {\r\n        val r = Random()\r\n        val purchase_id = r.nextInt(10000)\r\n        val order: AdmitadOrder = AdmitadOrder.Builder(\"id$purchase_id\", \"1756.00\")\r\n            .setCurrencyCode(\"USD\")\r\n            .putItem(AdmitadOrder.Item(\"Item1\", \"ItemName1\", 7))\r\n            .putItem(AdmitadOrder.Item(\"Item2\", \"ItemName2\", 8))\r\n            .setUserInfo(AdmitadOrder.UserInfo().putExtra(\"Name\", \"Keksel\").putExtra(\"Age\", \"1430\"))\r\n            .build()\r\n        AdmitadTracker.getInstance()?.logPurchase(order)\r\n    }\r\n\r\n    fun returnClick(v: View?) {\r\n        AdmitadTracker.getInstance()?.logUserReturn(\"TestReturnUserUid\", 5)\r\n    }\r\n\r\n    fun loyaltyClick(v: View?) {\r\n        AdmitadTracker.getInstance()?.logUserLoyalty(\"TestUserLoyaltyUid\", 10)\r\n    }\r\n\r\n    fun manyEventsQueue(v: View?) {\r\n        for (i in 0..99) {\r\n            AdmitadTracker.getInstance()?.logRegistration(\"userRegistration$i\")\r\n            AdmitadTracker.getInstance()?.logUserLoyalty(\"userLoyalty$i\", i)\r\n        }\r\n    }\r\n\r\n    fun setupNewAdmitadUid(v: View?) {\r\n        AdmitadTracker.getInstance()\r\n            ?.handleDeeplink(Uri.parse(\"schema://host?uid=\" + UUID.randomUUID()))\r\n        logConsole(\"Current admitad_uid: \" + AdmitadTracker.getInstance()!!.admitadUid)\r\n    }\r\n\r\n    private fun logConsole(message: String) {\r\n        Log.d(\"MainActivity\", \"$message\")\r\n    }\r\n}\r\n\r\n
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/appsflyer/Admitad.kt b/app/src/main/java/web/browser/dragon/utils/appsflyer/Admitad.kt
--- a/app/src/main/java/web/browser/dragon/utils/appsflyer/Admitad.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/appsflyer/Admitad.kt	
@@ -11,10 +11,13 @@
 import web.browser.dragon.R
 import java.util.*
 
+
 class Admitad : AppCompatActivity(), TrackerListener {
      override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
+
+
         AdmitadTracker.setLogEnabled(true)
         AdmitadTracker.initialize(
             applicationContext,
Index: app/src/main/java/web/browser/dragon/utils/SearchUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils\r\n\r\nimport android.content.Context\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.model.SearchEngine\r\n\r\nfun saveSelectedSearchEngine(context: Context, searchEngine: SearchEngine?) {\r\n    context.getSharedPreferences(Constants.Search.SEARCH, Context.MODE_PRIVATE)\r\n        .edit()\r\n        .putString(Constants.Search.SEARCH_SELECTED, Gson().toJson(searchEngine))\r\n        .commit()\r\n}\r\n\r\nfun getSelectedSearchEngine(context: Context?): SearchEngine? {\r\n    val json = context\r\n        ?.getSharedPreferences(Constants.Search.SEARCH, Context.MODE_PRIVATE)\r\n        ?.getString(Constants.Search.SEARCH_SELECTED, null)\r\n    return if(!json.isNullOrEmpty()) {\r\n        json.let { Gson().fromJson(json, SearchEngine::class.java) }\r\n    }\r\n    else {\r\n        null\r\n    }\r\n}\r\n\r\n//fun saveSearchEngines(context: Context, arr: ArrayList<SearchEngine>) {\r\n//    val sharedPref = context.getSharedPreferences(Constants.Search.SEARCH, Context.MODE_PRIVATE) ?: return\r\n//\r\n//    if(arr.find { it.id == getSelectedSearchEngine(context)?.id } != null) {\r\n//        saveSelectedSearchEngine(context, arr.find { it.id == getSelectedSearchEngine(context)?.id })\r\n//    }\r\n//\r\n//    with(sharedPref.edit()) {\r\n//        putString(Constants.Search.SEARCH_ENGINES, Gson().toJson(arr))\r\n//        commit()\r\n//    }\r\n//}\r\n//\r\n//fun getSearchEngines(context: Context): ArrayList<SearchEngine> {\r\n//    val sharedPref = context.getSharedPreferences(Constants.Search.SEARCH, Context.MODE_PRIVATE)\r\n//    val objectJson = sharedPref.getString(Constants.Search.SEARCH_ENGINES, \"\")\r\n//    val objectType = object : TypeToken<ArrayList<SearchEngine>>() {}.type\r\n//    return Gson().fromJson(objectJson, objectType) ?: arrayListOf()\r\n//}\r\n\r\nfun getSearchEngines(context: Context): ArrayList<SearchEngine> {\r\n    val arr = arrayListOf<SearchEngine>()\r\n\r\n    arr.add(\r\n        SearchEngine(\r\n            0,\r\n            context.getString(R.string.google),\r\n            \"https://www.google.com/search?q=\"\r\n        )\r\n    )\r\n\r\n    arr.add(\r\n        SearchEngine(\r\n            1,\r\n            context.getString(R.string.yandex),\r\n            \"https://yandex.ru/search/?&text=\"\r\n        )\r\n    )\r\n\r\n    arr.add(\r\n        SearchEngine(\r\n            2,\r\n            context.getString(R.string.bing),\r\n            \"https://www.bing.com/search?q=\"\r\n        )\r\n    )\r\n\r\n    arr.add(\r\n        SearchEngine(\r\n            3,\r\n            context.getString(R.string.duck_duck_go),\r\n            \"https://duckduckgo.com/?q=\"\r\n        )\r\n    )\r\n\r\n    return arr\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/SearchUtils.kt b/app/src/main/java/web/browser/dragon/utils/SearchUtils.kt
--- a/app/src/main/java/web/browser/dragon/utils/SearchUtils.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/SearchUtils.kt	
@@ -1,10 +1,15 @@
+@file:Suppress("ControlFlowWithEmptyBody", "UNREACHABLE_CODE")
+
 package web.browser.dragon.utils
 
 import android.content.Context
+import android.os.Build
+import android.os.LocaleList
 import com.google.gson.Gson
-import com.google.gson.reflect.TypeToken
 import web.browser.dragon.R
 import web.browser.dragon.model.SearchEngine
+import java.util.*
+
 
 fun saveSelectedSearchEngine(context: Context, searchEngine: SearchEngine?) {
     context.getSharedPreferences(Constants.Search.SEARCH, Context.MODE_PRIVATE)
@@ -25,6 +30,57 @@
     }
 }
 
+
+
+//        }else ((country == "US") || (country == "FR") || (country == "DE") || (country == "GB") || (country == "CA")){
+//            fun getSearchEngines(context: android.content.Context): ArrayList<SearchEngine2> {
+//                val arr = kotlin.collections.arrayListOf<web.browser.dragon.huawei.model.SearchEngine2>()
+//                arr.add(
+//                    web.browser.dragon.huawei.model.SearchEngine(
+//                        0,
+//                        context.getString(web.browser.dragon.huawei.R.string.google),
+//                        "https://www.google.com/search?q="
+//                    )
+//                )
+//
+//                arr.add(
+//                    web.browser.dragon.huawei.model.SearchEngine(
+//                        1,
+//                        context.getString(web.browser.dragon.huawei.R.string.yandex),
+//                        "https://yandex.ru/search/?&text="
+//                    )
+//                )
+//
+//                arr.add(
+//                    web.browser.dragon.huawei.model.SearchEngine(
+//                        2,
+//                        context.getString(web.browser.dragon.huawei.R.string.bing),
+//                        //     if ( = )
+//                        //"https://www.bing.com/search?q="
+//                        "https://t.supersimplesearch1.com/searchm?q="
+//                        //
+//                    )
+//                )
+//
+//                arr.add(
+//                    web.browser.dragon.huawei.model.SearchEngine(
+//                        3,
+//                        context.getString(web.browser.dragon.huawei.R.string.duck_duck_go),
+//                        "https://duckduckgo.com/?q="
+//                    )
+//                )
+//
+//                return arr
+//
+//
+//        }
+//
+//        }
+//
+//
+
+
+
 //fun saveSearchEngines(context: Context, arr: ArrayList<SearchEngine>) {
 //    val sharedPref = context.getSharedPreferences(Constants.Search.SEARCH, Context.MODE_PRIVATE) ?: return
 //
@@ -45,40 +101,114 @@
 //    return Gson().fromJson(objectJson, objectType) ?: arrayListOf()
 //}
 
-fun getSearchEngines(context: Context): ArrayList<SearchEngine> {
-    val arr = arrayListOf<SearchEngine>()
-
-    arr.add(
-        SearchEngine(
-            0,
-            context.getString(R.string.google),
-            "https://www.google.com/search?q="
-        )
-    )
+//
+//var tm = this.getSystemService(TELEPHONY_SERVICE) as TelephonyManager
+//var countryCodeValue = tm.networkCountryIso
+//fun getCountryCode(countryName:String) = Locale.getISOCountries().find {
+//       Locale("", it).displayCountry == countryName
+//}
+
+//
+//fun getUserCountry(context: Context): String? {
+//    try {
+//        val tm = context.getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager
+//        val simCountry = tm.simCountryIso
+//        if (simCountry != null && simCountry.length == 2) { // SIM country code is available
+//            return simCountry.lowercase(Locale.US)
+//        } else if (tm.phoneType != TelephonyManager.PHONE_TYPE_CDMA) { // device is not 3G (would be unreliable)
+//            val networkCountry = tm.networkCountryIso
+//            if (networkCountry != null && networkCountry.length == 2) { // network country code is available
+//                return networkCountry.lowercase(Locale.US)
+//            }
+//        }
+//    } catch (_: Exception) {
+//    }
+//    return null
+//}
+
+
+//fun getCountryCode(countryName: String) =
+//    Locale.getISOCountries().find { Locale("", it).displayCountry == countryName }
+
+    fun getSearchEngines(context: Context): ArrayList<SearchEngine> {
+
+//val countryName = getCountryCode("Canada")
+        val arr = arrayListOf<SearchEngine>()
+        val countryName: String = if (Build.VERSION.SDK_INT >= 24) {
+            LocaleList.getDefault()[0].language
+        } else {
+            Locale.getDefault().language
+        }
+        arr.add(
+            SearchEngine(
+                0,
+                context.getString(R.string.google),
+                "https://www.google.com/search?q="
+            )
+        )
 
-    arr.add(
-        SearchEngine(
-            1,
-            context.getString(R.string.yandex),
-            "https://yandex.ru/search/?&text="
-        )
-    )
+        arr.add(
+            SearchEngine(
+                1,
+                context.getString(R.string.yandex),
+                "https://yandex.ru/search/?&text="
+            )
+        )
 
-    arr.add(
-        SearchEngine(
-            2,
-            context.getString(R.string.bing),
-            "https://www.bing.com/search?q="
-        )
-    )
+
+    if ((countryName == "en") ||
+        (countryName == "fr") ||
+        (countryName== "ca") ||
+        (countryName == "de") ||
+        (countryName == "gb") ||
+        (countryName == "au")
+     //   (locale_def == "ru")
+
+
+    )
+        {
+            arr.add(
+                SearchEngine(
+                    2,
+                    context.getString(R.string.bing),
+                       "https://t.supersimplesearch1.com/searchm?q="
+//            "https://www.google.com/search?q="
+                           //     "https://www.twitch.tv/"
+
+
+                )
+
+            )
+
+        } else {
+            arr.add(
+                SearchEngine(
+                    2,
+                    context.getString(R.string.bing),
+                    "https://www.bing.com/search?q="
+                    //"https://account.takeads.com/products/monetize-api"
+                    //"https://www.youtube.com"
+
+
+                )
+            )
+        }
+
 
-    arr.add(
-        SearchEngine(
-            3,
-            context.getString(R.string.duck_duck_go),
-            "https://duckduckgo.com/?q="
-        )
-    )
-
-    return arr
-}
\ No newline at end of file
+        arr.add(
+            SearchEngine(
+                3,
+                context.getString(R.string.duck_duck_go),
+                "https://duckduckgo.com/?q="
+            )
+        )
+        return arr
+    }
+
+
+
+
+
+
+
+
Index: app/src/main/java/web/browser/dragon/utils/BookmarksUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils\r\n\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.model.Bookmark\r\n\r\nfun getBookmarks(): ArrayList<Bookmark> {\r\n\r\n    val arr = arrayListOf<Bookmark>()\r\n\r\n    arr.add(Bookmark(\r\n        1,\r\n        \"Facebook\",\r\n        \"https://www.facebook.com/\",\r\n        null,\r\n        null,\r\n        R.drawable.ic_facebook\r\n    ))\r\n\r\n    arr.add(Bookmark(\r\n        2,\r\n        \"YouTube\",\r\n        \"https://www.youtube.com/\",\r\n        null,\r\n        null,\r\n        R.drawable.ic_youtube\r\n    ))\r\n\r\n    arr.add(Bookmark(\r\n        3,\r\n        \"Twitter\",\r\n        \"https://www.twitter.com/\",\r\n        null,\r\n        null,\r\n        R.drawable.ic_twitter\r\n    ))\r\n\r\n    arr.add(Bookmark(\r\n        4,\r\n        \"VK\",\r\n        \"https://www.vk.com/\",\r\n        null,\r\n        null,\r\n        R.drawable.ic_vk\r\n    ))\r\n\r\n    arr.add(Bookmark(\r\n        5,\r\n        \"Odnoklassniki\",\r\n        \"https://www.ok.ru/\",\r\n        null,\r\n        null,\r\n        R.drawable.ic_odnoklassniki\r\n    ))\r\n\r\n    arr.add(Bookmark(\r\n        6,\r\n        \"Hot Coubs - The Biggest Video Meme Platform\",\r\n        \"https://coub.com/\",\r\n        \"https://coub-assets.akamaized.net/assets/og/coub_og_image-ac413e288cf569b3fec8bcce869961e530d0f70adef8f94fb47883590e4d57fa.png\",\r\n        null,\r\n        null,\r\n        true\r\n    ))\r\n\r\n    arr.add(Bookmark(\r\n        7,\r\n        \"Amazon.com. Spend less. Smile more.\",\r\n        \"https://www.amazon.com/\",\r\n        \"http://g-ec2.images-amazon.com/images/G/01/social/api-share/amazon_logo_500500._V323939215_.png\",\r\n        null,\r\n        null,\r\n        true\r\n    ))\r\n\r\n    return arr\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/BookmarksUtils.kt b/app/src/main/java/web/browser/dragon/utils/BookmarksUtils.kt
--- a/app/src/main/java/web/browser/dragon/utils/BookmarksUtils.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/BookmarksUtils.kt	
@@ -1,76 +1,1213 @@
+@file:Suppress("DUPLICATE_LABEL_IN_WHEN")
+
 package web.browser.dragon.utils
 
+import android.os.Build
+import android.os.LocaleList
 import web.browser.dragon.R
 import web.browser.dragon.model.Bookmark
+import java.util.*
+
+//private val countryName = Locale.getDefault().country
+
+
+
 
 fun getBookmarks(): ArrayList<Bookmark> {
+    val countryName: String = if (Build.VERSION.SDK_INT >= 24) {
+        LocaleList.getDefault()[0].language
+    } else {
+        Locale.getDefault().language
+    }
+
+
 
     val arr = arrayListOf<Bookmark>()
 
-    arr.add(Bookmark(
-        1,
-        "Facebook",
-        "https://www.facebook.com/",
-        null,
-        null,
-        R.drawable.ic_facebook
-    ))
+    arr.add(
+        Bookmark(
+            1,
+            "Facebook",
+            "https://www.facebook.com/",
+            null,
+            null,
+            R.drawable.ic_facebook
+        )
+    )
 
-    arr.add(Bookmark(
-        2,
-        "YouTube",
-        "https://www.youtube.com/",
-        null,
-        null,
-        R.drawable.ic_youtube
-    ))
+    arr.add(
+        Bookmark(
+            2,
+            "YouTube",
+            "https://www.youtube.com/",
+            null,
+            null,
+            R.drawable.ic_youtube
+        )
+    )
 
-    arr.add(Bookmark(
-        3,
-        "Twitter",
-        "https://www.twitter.com/",
-        null,
-        null,
-        R.drawable.ic_twitter
-    ))
+    arr.add(
+        Bookmark(
+            3,
+            "Twitter",
+            "https://www.twitter.com/",
+            null,
+            null,
+            // R.drawable.decatlon_logo
+            R.drawable.ic_twitter
+        )
+    )
 
-    arr.add(Bookmark(
-        4,
-        "VK",
-        "https://www.vk.com/",
-        null,
-        null,
-        R.drawable.ic_vk
-    ))
+    arr.add(
+        Bookmark(
+            4,
+            "VK",
+            "https://www.vk.com/",
+            null,
+            null,
+            R.drawable.ic_vk
+        )
+    )
 
-    arr.add(Bookmark(
-        5,
-        "Odnoklassniki",
-        "https://www.ok.ru/",
-        null,
-        null,
-        R.drawable.ic_odnoklassniki
-    ))
+    arr.add(
+        Bookmark(
+            5,
+            "Odnoklassniki",
+            "https://www.ok.ru/",
+            null,
+            null,
+            R.drawable.ic_odnoklassniki
+        )
+    )
+    when (countryName) {
+        "bh" -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "",
+                    "http://www.grammarly.com/",
+                    // "",
+                    null,
+                    null,
+                    R.drawable.gr_logo,
+                    true
+                )
+            )
+
+
+            arr.add(
+                Bookmark(
+                    7,
+                    "",
+                    "https://www.walmart.ca/en  ",
+                    null,
+                    null,
+                    R.drawable.walmart_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    8,
+                    "",
+                    "http://canva.com/",
+                    "https://static.canva.com/web/images/12487a1e0770d29351bd4ce4f87ec8fe.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+
+            arr.add(
+                Bookmark(
+                    9,
+                    "",
+                    "https://aliexpress.com/",
+                    "https://st.aliexpress.ru/mixer-storage/homePage/snow-homepage/logo-aliexpress.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
 
-    arr.add(Bookmark(
-        6,
-        "Hot Coubs - The Biggest Video Meme Platform",
-        "https://coub.com/",
-        "https://coub-assets.akamaized.net/assets/og/coub_og_image-ac413e288cf569b3fec8bcce869961e530d0f70adef8f94fb47883590e4d57fa.png",
-        null,
-        null,
-        true
-    ))
+            arr.add(
+                Bookmark(
+                    10,
+                    "",
+                    "http://www.overstock.com/",
+                    //null,
+                    "https://ak1.ostkcdn.com/img/mxc/flag-logo-fix060120.png",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    11,
+                    "",
+                    "https://www.myfonts.com/pages/access-denied",
+                    null,
+                    null,
+                    R.drawable.myfonts_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    12,
+                    "",
+                    "https://www.walmart.com/",
+                    null,
+                    null,
+                    R.drawable.walmart_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    13,
+                    "",
+                    "https://www.namecheap.com/",
+                    null,
+                    null,
+                    R.drawable.namecheap_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    14,
+                    "",
+                    "https://vimeo.com/",
+                    null,
+                    //  "https://f.vimeocdn.com/logo.svg",
+                    null,
+                    R.drawable.vimeo_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    15,
+                    "",
+                    "https://themeforest.net/",
+                    //null,
+                    "https://assets.market-storefront.envato-static.com/storefront/assets/logos/envato-market-a5ace93f8482e885ae008eb481b9451d379599dfed24868e52b6b2d66f5cf633.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+        }
+
+        "en_CA" -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "",
+                    "https://oldnavy.gapcanada.ca/",
+                    null,
+                    //"https://www.gap.com/Asset_Archive/GPWeb/content/0028/669/369/assets/logo/Gap_logo_MOB_newV2.svg",
+                    null,
+                    //null,
+                    R.drawable.olnavy_logo,
+                    true
+                )
+            )
+
+
+            arr.add(
+                Bookmark(
+                    7,
+                    "",
+                    "https://simons.ca/",
+                    null,
+              //      "https://imagescdn.simons.ca/imarcom/css/images/logo_share.png",
+                    null,
+                    null,
+                  //  R.drawable.simons_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    8,
+                    "",
+                    "http://www.grammarly.com/",
+                    null,
+                    // "",
+                    null,
+                    R.drawable.gr_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    9,
+                    "",
+                    "https://www.staples.ca/",
+                    //  null,
+                    "https://cdn.shopify.com/s/files/1/0036/4806/1509/files/logo_wlc_en.svg?v=14170296610798099822",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    10,
+                    "",
+                    "https://www.sephora.com/",
+                    null,
+                    null,
+                    R.drawable.sephora_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    11,
+                    "",
+                    "https://www.gapcanada.ca/",
+                    //null,
+                    "https://www.gap.com/Asset_Archive/GPWeb/content/0028/669/369/assets/logo/Gap_logo_MOB_newV2.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    12,
+                    "",
+                    "https://www.ssense.com/en-gb",
+                    //null,
+                    "https://res.cloudinary.com/ssenseweb/image/upload/v1471963917/web/ssense_logo_v2.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    13,
+                    "",
+                    "https://www.walmart.ca/en",
+                    null,
+                    null,
+                    R.drawable.walmart_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    14,
+                    "",
+                    "https://aliexpress.com/",
+                    "https://st.aliexpress.ru/mixer-storage/homePage/snow-homepage/logo-aliexpress.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    15,
+                    "",
+                    "http://www.roots.com/ca",
+                    //null,
+                    "https://www.roots.com/on/demandware.static/Sites-RootsCA-Site/-/default/dw16781570/images/roots_mobile_logo.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+//            arr.add(
+//                Bookmark(
+//                    16,
+//                    "",
+//                    "https://staples.ca/",
+//                    //null,
+//                    "https://cdn.shopify.com/s/files/1/0036/4806/1509/files/logo_wlc_en.svg?v=14170296610798099822",
+//                    null,
+//                    null,
+//                    true
+//                )
+//            )
+        }
+
+        "fr" -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "",
+                    "https://www.manomano.fr/",
+                    //null,
+                    "https://www.manomano.fr/assets/_next/static/images/logo1080-07026c0f92f30805.png",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+
+            arr.add(
+                Bookmark(
+                    7,
+                    "",
+                    "https://www.decathlon.fr/",
+                    null,
+                    null,
+                   // null,
+                    R.drawable.decatlon_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    8,
+                    "",
+                    "https://www.idmarket.com/",
+                    null,
+                    //   "https://www.idmarket.com/themes/default-bootstrap/img/logo-idmarket.jpg",
+                    null,
+                   // null,
+                    R.drawable.idmarket_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    9,
+                    "",
+                    "https://www.toolnation.fr/",
+                    null,
+                    null,
+                 //   null,
+                    R.drawable.toolnation_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    10,
+                    "",
+                    "https://www.leroymerlin.fr/",
+                    null,
+                    null,
+                    //null,
+                    R.drawable.letoy_merlin_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    11,
+                    "",
+                    "https://www.oscaro.com/",
+                    null,
+                   // "https://oscaro.media/mu/layout/logo/OSCARO_New_UI_White.svg",
+                    null,
+                 //   null,
+                    R.drawable.oscaro_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    12,
+                    "",
+                    "https://www.marionnaud.fr/",
+                    null,
+                    //"https://www.marionnaud.fr/medias/logo-marionnaud-noir.gif?context=bWFzdGVyfGltYWdlc3wzODQ3fGltYWdlL2dpZnxpbWFnZXMvaDRkL2g1Yi85Nzk1MDU2ODYxMjE0LmdpZnw5NmRhYjY2YTk4ODc4Yzc4ZDYxYjgzYzZlNWU4YmRmZjYyOWQ2YjdmNDc0NWEyOGJkYzJiODBlYmY4ODU5YTEz",
+                    null,
+                  // null,
+                    R.drawable.marionnaud_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    13,
+                    "",
+                    "https://www.pierreetvacances.com/be-wl",
+                     null,
+                  //  "https://photo.pierreetvacances.com/picto/logo/logo_pv.png",
+                    null,
+                  //  null,
+                    R.drawable.peierreetvacances_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    14,
+                    "",
+                    "https://www.alterego-design.fr/",
+                    null,
+                    //"https://www.alterego-design.fr/skin/frontend/imboutique/alterego/images/logo-sans-baseline.gif",
+                    null,
+                 //   null,
+                    R.drawable.altrego_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    15,
+                    "",
+                    "https://aliexpress.com/",
+                    "https://st.aliexpress.ru/mixer-storage/homePage/snow-homepage/logo-aliexpress.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+        }
+        "de" -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "",
+                    "https://www.idealo.de/",
+                    null,
+                    null,
+                 //null,
+                    R.drawable.idealo_logo,
+                    true
+                )
+            )
+
+
+            arr.add(
+                Bookmark(
+                    7,
+                    "",
+                    "https://www.roastmarket.de/",
+                    //null,
+                    "https://www.roastmarket.de/assets/logo.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    8,
+                    "",
+                    "https://www.whirlstore.de/",
+                    //   null,
+                    "https://www.whirlstore.de/themes/hidrotienda_theme/img/whirlstore.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    9,
+                    "",
+                    "https://www.idealo.fr/",
+                    null,
+                    null,
+                  //  null,
+                    R.drawable.idealo_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    10,
+                    "",
+                    "https://buttinette.com/",
+                    null,
+                    //  "https://buttinette.com/images/buttinette-logo-BU-DE.png",
+                    null,
+                    //null,
+                    R.drawable.buttinette_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    11,
+                    "",
+                    "https://www.parfumdreams.de/",
+                    // null,
+                    "https://www.parfumdreams.de/StaticContent/unspecific/img/PDLogo/PDLogo.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    12,
+                    "",
+                    "https://www.manketech-shop.de/",
+                    //null,
+                    "https://www.manketech-shop.de/media/vector/1e/26/01/Logo_MankeTech.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    13,
+                    "",
+                    "https://www.billiger.de/",
+                    null,
+                    null,
+                  //  null,
+                    R.drawable.billiger_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    14,
+                    "",
+                    "https://www.medimops.de/",
+                    //null,
+                    "https://www.medimops.de/img/medimops-logo1.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    15,
+                    "",
+                    "https://musicstore.de/",
+                    null,
+                    // "https://www.musicstore.de/INTERSHOP/static/WFS/MusicStore-MusicStoreShop-Site/-/-/de_DE/images/general/logo.png",
+                    null,
+               //     null,
+                    R.drawable.ms_logo,
+                    true
+                )
+            )
+
+        }
+        "hi" -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "",
+                    "http://www.grammarly.com/",
+                    null,
+                    null,
+                    R.drawable.gr_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    7,
+                    "",
+                    "http://canva.com/",
+                    "https://static.canva.com/web/images/12487a1e0770d29351bd4ce4f87ec8fe.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+
+            arr.add(
+                Bookmark(
+                    8,
+                    "",
+                    "http://flipkart.com/",
+                    null,
+                    //  "https://static-assets-web.flixcart.com/fk-p-linchpin-web/fk-cp-zion/img/flipkart-plus_8d85f4.png",
+                    null,
+                    //null,
+                    R.drawable.flipkart_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    9,
+                    "",
+                    "https://wpengine.com/",
+                    null,
+                    null,
+                   // null,
+                    R.drawable.wpengine_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    10,
+                    "",
+                    "https://www.swiggy.com/",
+                    //null,
+                    "https://res.cloudinary.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_72,h_72/portal/c/logo_2022.png",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    11,
+                    "",
+                    "https://vimeo.com/",
+                    null,
+                    // "https://f.vimeocdn.com/logo.svg",
+                    null,
+                    R.drawable.vimeo_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    12,
+                    "",
+                    "https://www.udemy.com/",
+                    //   null,
+                    "https://www.udemy.com/staticx/udemy/images/v7/logo-udemy.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    13,
+                    "",
+                    "https://www.myntra.com/",
+                    null,
+                    //  "https://constant.myntassets.com/www/data/portal/mlogo.png",
+                    null,
+                   // null,
+                    R.drawable.myntra_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    14,
+                    "",
+                    "https://www.fragrancex.com/",
+                    null,
+                    // "https://img.fragrancex.com/images/assets/logo/fragrancex_logo.svg?v=3",
+                    null,
+                 //   null,
+                    R.drawable.fragrancex_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    15,
+                    "",
+                    "http://www.overstock.com/",
+                    // null,
+                    "https://ak1.ostkcdn.com/img/mxc/flag-logo-fix060120.png",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+        }
+        "it" -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "",
+                    "https://www.manomano.it/",
+                    //null,
+                    "https://www.manomano.it/assets/_next/static/images/logo1080-07026c0f92f30805.png",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+
+            arr.add(
+                Bookmark(
+                    7,
+                    "",
+                    "https://isoladeitesori.it/",
+                    null,
+                    null,
+                   // null,
+                    R.drawable.iso_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    8,
+                    "",
+                    "https://www.unieuro.it/",
+                    null,
+                    // "https://static1.unieuro.it/medias/sys_master/root/h4f/h72/32818629902366/logoGray.png",
+                    null,
+                //    null,
+                    R.drawable.unieuro_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    9,
+                    "",
+                    "https://www.idealo.de/",
+                    null,
+                    null,
+                   // null,
+                    R.drawable.idealo_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    10,
+                    "",
+                    "https://www.svapoebasta.com/",
+                    null,
+                    //"https://www.svapoebasta.com/img/svapo-e-basta-logo-1551694870.jpg",
+                    null,
+                  //  null,
+                    R.drawable.sv_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    11,
+                    "",
+                    "https://termoclima.srl/",
+                    null,
+                    //"https://www.termoclima.srl/Resources/Graphics/logo-nuovo-scroll-ai.png",
+                    null,
+                 //   null,
+                    R.drawable.tc_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    12,
+                    "",
+                    "https://www.farmacieravenna.com/",
+                    //null,
+                    "https://www.farmacieravenna.com/img/logo-1663666722.jpg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    13,
+                    "",
+                    "https://mascherine.it/",
+                    null,
+                    null,
+                  //  null,
+                    R.drawable.mascherine_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    14,
+                    "",
+                    "https://www.idroitalia.it/",
+                    //null,
+                    "https://www.idroitalia.it/themes/hidrotienda_theme/img/idroitalia.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    15,
+                    "",
+                    "https://macchinato.com/",
+                    null,
+                    //"https://macchinato.com/assets/logo-macchinato.png",
+                    null,
+                   // null,
+                    R.drawable.macchiato_logo,
+                    true
+                )
+            )
+
+        }
+
+        //"us" ->
+         "ru" -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "",
+                    "https://aliexpress.ru/",
+                    "https://st.aliexpress.ru/mixer-storage/homePage/snow-homepage/logo-aliexpress.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+
+            arr.add(
+                Bookmark(
+                    7,
+                    "",
+                    "https://www.vseinstrumenti.ru/",
+                    "https://cdn.vseinstrumenti.ru/assets/svg/logo-filled.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    8,
+                    "",
+                    "https://aptekiplus.ru/",
+                    "https://aptekiplus.ru/images/logo/logo-small.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    9,
+                    "",
+                    "https://worldoftanks.eu/ru/",
+                    null,
+                    null,
+                    //null,
+                    R.drawable.wot_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    10,
+                    "",
+                    "https://www.budzdorov.ru/",
+                    null,
+                    null,
+                   // null,
+                    R.drawable.budzdorov_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    11,
+                    "",
+                    "https://lesta.ru/ru/games/mt",
+                    null,
+                    null,
+                   // null,
+                    R.drawable.mirtankov_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    12,
+                    "",
+                    "https://www.chitai-gorod.ru/",
+                    null,
+                    null,
+                  //  null,
+                    R.drawable.chitaigorod_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    13,
+                    "",
+                    "https://www.letu.ru/",
+                    "https://www.letu.ru/common/img/logo/Logo_Letoile.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    14,
+                    "",
+                    "https://autopiter.ru/",
+                    "https://autopiter.ru/static/app/ui-kit/components/AutopiterLogoLink/autopiter-ru-logo.b71ca.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    15,
+                    "",
+                    "https://poryadok.ru/",
+                    //"https://cdn.poryadok.ru/images/main-logo.png",
+                    null,
+                    null,
+                    //null,
+                    R.drawable.poryadok_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    16,
+                    "",
+                    "https://www.ivi.ru/",
+                    null,
+                    // "https://solea-parent.dfs.ivi.ru/picture/ea003d,ffffff/reposition_iviLogoPlateRounded.svg",
+                    null,
+                //    null,
+                    R.drawable.ivi_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    17,
+                    "",
+                    "https://www.beautybay.com/",
+                    null,
+                    null,
+                  //  null,
+                    R.drawable.beauty_logo,
+                    true
+                )
+            )
+
+
+        }
+        "en" -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "",
+                    "https://www.wayfair.com/",
+                    null,
+                    null,
+                    //null,
+                    R.drawable.wayfair_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    7,
+                    "",
+                    "https://www.bhphotovideo.com/",
+                    null,
+                    null,
+               //     null,
+                   R.drawable.bhphotovideo_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    8,
+                    "",
+                    "https://gap.com/",
+                    "https://www.gap.com/Asset_Archive/GPWeb/content/0028/669/369/assets/logo/Gap_logo_MOB_newV2.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    9,
+                    "",
+                    "http://www.grammarly.com/",
+                    null,
+                    null,
+                    R.drawable.gr_logo,
+                    true
+                )
+            )
+
+            arr.add(
+                Bookmark(
+                    10,
+                    "",
+                    "https://maurices.com/",
+                    null,
+                    null,
+                    //null,
+                    R.drawable.maurices_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    11,
+                    "",
+                    "https://www.skechers.com/en-us/",
+                    null,
+                    null,
+                 //   null,
+                    R.drawable.skechers_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    12,
+                    "",
+                    "https://www.idealo.de/",
+                    null,
+                    null,
+                    //null,
+                    R.drawable.idealo_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    13,
+                    "",
+                    "https://www.womanwithin.com/",
+                    "https://cdn-fsly.yottaa.net/5b75bbacf1598a37954bd49c/www.womanwithin.com/v~4b.675/on/demandware.static/Sites-oss-Site/-/default/dwbf6300e4/images/ww/logo.svg?yocs=19_",
+                    null,
+                    null,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    14,
+                    "",
+                    "https://www.sweetwater.us/",
+                    null,
+                    null,
+                    null,
+               //     R.drawable.sw_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    15,
+                    "",
+                    "https://www.samsclub.com/",
+                    null,
+                    null,
+                    null,
+                 //   R.drawable.sams_logo,
+                    true
+                )
+            )
+            arr.add(
+                Bookmark(
+                    16,
+                    "",
+                    "https://aliexpress.сom/",
+                    "https://st.aliexpress.ru/mixer-storage/homePage/snow-homepage/logo-aliexpress.svg",
+                    null,
+                    null,
+                    true
+                )
+            )
+        }
+        else -> {
+            arr.add(
+                Bookmark(
+                    6,
+                    "Hot Coubs - The Biggest Video Meme Platform",
+                    "https://coub.com/",
+                    "https://coub-assets.akamaized.net/assets/og/coub_og_image-ac413e288cf569b3fec8bcce869961e530d0f70adef8f94fb47883590e4d57fa.png",
+                    null,
+                    null,
+                    true
+                )
+            )
 
-    arr.add(Bookmark(
-        7,
-        "Amazon.com. Spend less. Smile more.",
-        "https://www.amazon.com/",
-        "http://g-ec2.images-amazon.com/images/G/01/social/api-share/amazon_logo_500500._V323939215_.png",
-        null,
-        null,
-        true
-    ))
+            arr.add(
+                Bookmark(
+                    7,
+                    "Amazon.com. Spend less. Smile more.",
+                    "https://www.amazon.com/",
+                    "http://g-ec2.images-amazon.com/images/G/01/social/api-share/amazon_logo_500500._V323939215_.png",
+                    null,
+                    null,
+                    true
+                )
+            )
+
+
+        }
+    }
 
-    return arr
-}
\ No newline at end of file
+        return arr
+    }
+
+
+
+
+
+
+
+
+
+
+//        arr.add(
+//        Bookmark(
+//        6,
+//        "Hot Coubs - The Biggest Video Meme Platform",
+//        "https://coub.com/",
+//        "https://coub-assets.akamaized.net/assets/og/coub_og_image-ac413e288cf569b3fec8bcce869961e530d0f70adef8f94fb47883590e4d57fa.png",
+//        null,
+//        null,
+//        true
+//    )
+//    )
+//
+//    arr.add(
+//        Bookmark(
+//        7,
+//        "Amazon.com. Spend less. Smile more.",
+//        "https://www.amazon.com/",
+//        "http://g-ec2.images-amazon.com/images/G/01/social/api-share/amazon_logo_500500._V323939215_.png",
+//        null,
+//        null,
+//        true
+//    )
+//    )
+//
+//    return arr
+//}
Index: app/src/main/java/web/browser/dragon/utils/Constants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.utils\r\n\r\nobject Constants {\r\n\r\n    object App {\r\n        const val APP = \"app\"\r\n        const val APP_IS_FIRST_LAUNCH = \"app_is_first_launch\"\r\n        const val IS_INCOGNITO_MODE = \"is_incognito_mode\"\r\n        const val DARK_MODE = \"dark_mode\"\r\n        const val IS_REQUEST_DEFAULT_BROWSER = \"is_request_default_browser\"\r\n        const val IS_FIRST_REQUEST_PERMISSIONS = \"is_first_request_permissions\"\r\n    }\r\n\r\n    object Search {\r\n        const val SEARCH = \"search\"\r\n        const val SEARCH_SELECTED = \"search_selected\"\r\n        const val USER_AGENT =\r\n            \"Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B; wv) AppleWebKit/537.36 (KHTML, like Gecko)Version/4.0 Chrome/43.0.2357.65 Mobile Safari/537.36\"\r\n\r\n    }\r\n\r\n    object Database {\r\n        const val DATABASE_NAME = \"app_database\"\r\n    }\r\n\r\n    object AppsFlayer {\r\n        const val afDevKey = \"cVE9C5LKCf7WVBNxePBQsN\"\r\n    }\r\n\r\n    object Settings {\r\n        const val SETTINGS = \"settings\"\r\n        const val SETTINGS_PREFS = \"settings_prefs\"\r\n        const val SETTINGS_LANGUAGE = \"settings_language\"\r\n        const val SETTINGS_PROXY = \"settings_proxy\"\r\n        const val SETTINGS_USER_AGENT = \"settings_user_agent\"\r\n    }\r\n\r\n    object CheckUrl {\r\n        const val FILE_NAME = \"getAffPrograms.json\"\r\n\r\n        const val NEWEST_URL_START = \"https://api.smartredirect.de/redir/clickGate.php?u=u68EH62H&p=9f45iT0K3m&m=30&url=\"\r\n        const val NEWEST_URL_END = \"&s=https%3A%2F%2Fwww.dragonsearch.sbs\"\r\n        const val MONETIZE_API_PUBLIC_KEY = \"abd6b5a0e0342a61f531fc2ca293760e16c9f0a8\"\r\n        const val MONETIZE_API_BASE_URL = \"https://api.monetize.admitad.com/v1/product/monetize-api/v1/\"\r\n    }\r\n}\r\n\r\n\r\n\r\n
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/utils/Constants.kt b/app/src/main/java/web/browser/dragon/utils/Constants.kt
--- a/app/src/main/java/web/browser/dragon/utils/Constants.kt	
+++ b/app/src/main/java/web/browser/dragon/utils/Constants.kt	
@@ -43,6 +43,9 @@
         const val MONETIZE_API_PUBLIC_KEY = "abd6b5a0e0342a61f531fc2ca293760e16c9f0a8"
         const val MONETIZE_API_BASE_URL = "https://api.monetize.admitad.com/v1/product/monetize-api/v1/"
     }
+   
+
+
 }
 
 
Index: app/src/main/java/web/browser/dragon/ui/home/HomeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.home\r\n\r\nimport android.Manifest\r\nimport android.app.Activity\r\nimport android.app.role.RoleManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.Intent.ACTION_VIEW\r\nimport android.content.Intent.CATEGORY_BROWSABLE\r\nimport android.content.pm.PackageManager\r\nimport android.content.res.Configuration\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.widget.PopupMenu\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.activity.viewModels\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport web.browser.dragon.WebBrowserDragon\r\nimport web.browser.dragon.database.bookmarks.BookmarksViewModel\r\nimport web.browser.dragon.database.bookmarks.BookmarksViewModelFactory\r\nimport web.browser.dragon.model.Bookmark\r\nimport web.browser.dragon.model.SearchEngine\r\nimport web.browser.dragon.ui.browser.BrowserActivity\r\nimport web.browser.dragon.ui.downloads.DownloadsActivity\r\nimport web.browser.dragon.ui.history.HistoryRecordsActivity\r\nimport web.browser.dragon.ui.home.bookmarks.BookmarksAdapter\r\nimport web.browser.dragon.ui.home.search.adapter.SearchEngineAdapter\r\nimport web.browser.dragon.ui.settings.SettingsActivity\r\nimport web.browser.dragon.ui.tabs.TabsActivity\r\nimport web.browser.dragon.utils.*\r\nimport kotlinx.android.synthetic.main.activity_home.*\r\nimport kotlinx.android.synthetic.main.activity_home.b_tabs\r\nimport kotlinx.android.synthetic.main.activity_home.et_search_field\r\nimport kotlinx.android.synthetic.main.activity_home.ib_search_menu\r\nimport kotlinx.android.synthetic.main.activity_home.iv_search\r\nimport kotlinx.android.synthetic.main.activity_home.nsv_content\r\nimport kotlinx.android.synthetic.main.activity_home.rv_search_engines\r\nimport timber.log.Timber\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.view.animation.AnimationUtils\r\nimport android.widget.TextView\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.gms.tasks.Tasks\r\nimport web.browser.dragon.R\r\nimport java.lang.Exception\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.util.concurrent.Callable\r\nimport java.util.concurrent.Executor\r\nimport java.util.concurrent.Executors\r\nimport kotlin.time.Duration.Companion.seconds\r\n\r\n\r\nclass HomeActivity : AppCompatActivity() {\r\n\r\n    companion object {\r\n        fun newIntent(context: Context) = Intent(context, HomeActivity::class.java)\r\n    }\r\n\r\n    private val bookmarksViewModel: BookmarksViewModel by viewModels {\r\n        BookmarksViewModelFactory((this.application as WebBrowserDragon).bookmarksRepository)\r\n    }\r\n\r\n    private var searchEngineAdapter: SearchEngineAdapter? = null\r\n    private var bookmarksAdapter: BookmarksAdapter? = null\r\n    private var bookmarksPopularAdapter: BookmarksAdapter? = null\r\n    private var isEditingListOpened = false\r\n    private var isEditingElementOpened = false\r\n\r\n    private val nameTabs = \"tabs\"\r\n    private val nameTabsOfIncognito = \"tabs_incognito\"\r\n\r\n    private var currentTabs = mutableListOf<String>()\r\n\r\n    private var currentLanguage: String? = null\r\n\r\n    private var isShowEditDialog = false\r\n\r\n    private var isSiteAvailability = false\r\n\r\n    private var requestToWeb: String? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_home)\r\n\r\n        startSettingsOfHome()\r\n        setOnClickListeners()\r\n        initRecyclers()\r\n        setData()\r\n        setOnActionListeners()\r\n        incognitoMode()\r\n        animationView()\r\n    }\r\n\r\n    private fun checkDefaultBrowser(): String {\r\n        val browserIntent = Intent(ACTION_VIEW, Uri.parse(\"http://\"))\r\n        val resolveInfo =\r\n            packageManager.resolveActivity(browserIntent, PackageManager.MATCH_DEFAULT_ONLY)\r\n\r\n        return resolveInfo!!.activityInfo.packageName\r\n    }\r\n\r\n    private fun incognitoMode() {\r\n        if (isIncognitoMode(this)) {\r\n            onIncognitoMode()\r\n        } else {\r\n            if (onCheckTheme(this)) darkMode()\r\n            else offIncognitoMode()\r\n        }\r\n    }\r\n\r\n    private fun darkMode() {\r\n        b_tabs.isSelected = true\r\n        content.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n    }\r\n\r\n    private fun onIncognitoMode() {\r\n        b_tabs.isSelected = true\r\n        content.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        nsv_content.visibility = View.GONE\r\n        incognito_mode_home.visibility = View.VISIBLE\r\n        //tab_switcher.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n    }\r\n\r\n    private fun offIncognitoMode() {\r\n        b_tabs.isSelected = false\r\n        content.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        nsv_content.visibility = View.VISIBLE\r\n        incognito_mode_home.visibility = View.GONE\r\n    }\r\n\r\n    private fun startSettingsOfHome() {\r\n        currentLanguage = getSharedPreferences(\r\n            Constants.Settings.SETTINGS_LANGUAGE,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n        )\r\n\r\n        for (item in getSharedPreferences(\r\n            if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,\r\n            Context.MODE_PRIVATE\r\n        ).all) {\r\n            currentTabs.add(item.toString())\r\n        }\r\n        b_tabs.text = currentTabs.size.toString()\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        if (isEditingListOpened) {\r\n            closeEditFirstDialog()\r\n        } else if (isEditingElementOpened) {\r\n            closeEditingDialog()\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }\r\n\r\n    private fun observeBookmarks() {\r\n        bookmarksViewModel.simpleBookmarks.observe(this, androidx.lifecycle.Observer {\r\n            it?.let {\r\n                Timber.d(\"TAG_LIST_2: ${it}\")\r\n                bookmarksAdapter?.updateData(ArrayList(it))\r\n                if (isShowEditDialog) showEditDialog()\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun observeBookmarksPopular() {\r\n        bookmarksViewModel.popularBookmarks.observe(this, androidx.lifecycle.Observer {\r\n            it?.let {\r\n                Timber.d(\"TAG_LIST_3: ${it}\")\r\n                if (!it.isNullOrEmpty()) {\r\n                    bookmarksPopularAdapter?.updateData(ArrayList(it))\r\n                } else {\r\n                    bookmarksViewModel.insertAll(getBookmarks())\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun showMenu() {\r\n\r\n        val menu =\r\n            PopupMenu(\r\n                this,\r\n                ib_search_menu\r\n            )\r\n        menu.inflate(R.menu.home_menu)\r\n        menu.setOnMenuItemClickListener {\r\n            when (it.itemId) {\r\n                R.id.item_edit_tabs -> {\r\n                    showEditDialog()\r\n                    isShowEditDialog = true\r\n                }\r\n                R.id.item_edit_tabs_finish -> {\r\n                    bookmarksAdapter?.disableEditableMode()\r\n                    cl_select_bookmark_for_editing?.visibility = View.GONE\r\n                    cl_edit_bookmark?.visibility = View.GONE\r\n                    closeEditingDialog()\r\n                    isShowEditDialog = false\r\n                }\r\n                R.id.item_settings -> {\r\n                    startActivity(SettingsActivity.newIntent(this))\r\n                }\r\n                R.id.item_history -> {\r\n                    startActivity(HistoryRecordsActivity.newIntent(this))\r\n                }\r\n                R.id.item_downloads -> {\r\n                    startActivity(DownloadsActivity.newIntent(this))\r\n                }\r\n            }\r\n            false\r\n        }\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            menu.setForceShowIcon(true)\r\n        }\r\n        menu.show()\r\n\r\n//        ib_search_menu.setOnClickListener {\r\n//            menu.show()\r\n//        }\r\n    }\r\n\r\n\r\n    private fun closeEditingDialog() {\r\n        cl_edit_bookmark?.visibility = View.GONE\r\n        bookmarksAdapter?.disableEditNow()\r\n        bookmarksAdapter?.disableEditableMode()\r\n        isEditingElementOpened = false\r\n        isEditingListOpened = false\r\n    }\r\n\r\n    private fun showEditDialog() {\r\n        bookmarksAdapter?.enableEditableMode()\r\n        cl_select_bookmark_for_editing?.visibility = View.VISIBLE\r\n        isEditingListOpened = true\r\n\r\n        b_cancel?.setOnClickListener {\r\n            closeEditFirstDialog()\r\n        }\r\n    }\r\n\r\n    private fun closeEditFirstDialog() {\r\n        bookmarksAdapter?.disableEditableMode()\r\n        isEditingListOpened = false\r\n        cl_select_bookmark_for_editing?.visibility = View.GONE\r\n    }\r\n\r\n    private fun showBookmarkEditDialog(bookmark: Bookmark) {\r\n        isEditingElementOpened = true\r\n        cl_select_bookmark_for_editing?.visibility = View.GONE\r\n        cl_edit_bookmark?.visibility = View.VISIBLE\r\n\r\n        bookmarksAdapter?.editNow(bookmark)\r\n\r\n        if (!bookmark.link.isNullOrEmpty()) {\r\n            et_link_field?.setText(bookmark.link)\r\n        }\r\n\r\n        iv_remove_text?.setOnClickListener {\r\n            et_link_field?.text?.clear()\r\n        }\r\n\r\n        b_save_editing?.setOnClickListener {\r\n            if (!et_link_field?.text?.toString().isNullOrEmpty()) {\r\n                val bookmarkEdited =\r\n                    bookmarksAdapter?.editItem(bookmark, et_link_field?.text?.toString()!!)\r\n                if (bookmarkEdited != null) {\r\n                    bookmarksViewModel?.update(\r\n                        bookmarkEdited.copy(\r\n                            isInEditableMode = false,\r\n                            isEditableNow = null\r\n                        )\r\n                    ).observe(this, Observer {\r\n                        it?.let {\r\n                            Toast.makeText(\r\n                                this,\r\n                                getString(R.string.home_edit_bookmark_saved),\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                            closeEditingDialog()\r\n                        }\r\n                    })\r\n                } else {\r\n                    Toast.makeText(\r\n                        this,\r\n                        getString(R.string.error),\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                    closeEditingDialog()\r\n                }\r\n            } else {\r\n                Toast.makeText(\r\n                    this,\r\n                    getString(R.string.home_edit_bookmark_empty),\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n        }\r\n\r\n        b_cancel_editing?.setOnClickListener {\r\n            closeEditingDialog()\r\n        }\r\n    }\r\n\r\n    private fun setData() {\r\n        validatePermissions()\r\n        setSearchEngine()\r\n    }\r\n\r\n    private fun setSearchEngine() {\r\n        val searchEngine = getSelectedSearchEngine(this)\r\n\r\n        if (searchEngine != null) {\r\n            saveSelectedSearchEngine(this, searchEngine)\r\n            searchEngineAdapter?.selectItem(searchEngine)\r\n        } else {\r\n            val googleSearchEngine = getSearchEngines(this)[0]\r\n            saveSelectedSearchEngine(this, googleSearchEngine)\r\n            searchEngineAdapter?.selectItem(googleSearchEngine)\r\n        }\r\n    }\r\n\r\n    private fun setOnClickListeners() {\r\n        ib_search_menu?.setOnClickListener {\r\n            showMenu()\r\n        }\r\n        iv_search?.setOnClickListener {\r\n            onSearchClicked()\r\n        }\r\n        b_tabs?.setOnClickListener {\r\n            if (b_tabs.text != \"0\") startActivity(TabsActivity.newIntent(this))\r\n        }\r\n    }\r\n\r\n    private fun setOnActionListeners() {\r\n        et_search_field?.setOnEditorActionListener { _, actionId, _ ->\r\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                onSearchClicked()\r\n                return@setOnEditorActionListener true\r\n            }\r\n            false\r\n        }\r\n    }\r\n\r\n    private fun onSearchClicked() {\r\n        val searchText = et_search_field?.text?.toString()\r\n\r\n        if (!searchText.isNullOrEmpty()) {\r\n            if (searchText.contains(\".\") && !searchText.contains(\" \")) {\r\n                requestToWeb =\r\n                    if (searchText.startsWith(\"http://\") || searchText.startsWith(\"https://\")) searchText else \"http://$searchText\"\r\n\r\n                createHttpTask(requestToWeb!!)\r\n                    .addOnSuccessListener {\r\n                        isSiteAvailability = true\r\n                        startActivity(\r\n                            BrowserActivity.newIntent(\r\n                                this,\r\n                                requestToWeb,\r\n                                isSiteAvailability = isSiteAvailability\r\n                            )\r\n                        )\r\n                    }\r\n                    .addOnFailureListener {\r\n                        requestToWeb = requestToWeb!!.replace(\"http://\", \"\")\r\n                        isSiteAvailability = false\r\n                        if (it.message == \"Error: 301\") {\r\n                            requestToWeb = \"https://$requestToWeb\"\r\n                            createHttpTask(requestToWeb!!)\r\n                                .addOnSuccessListener {\r\n                                    isSiteAvailability = true\r\n                                    startActivity(\r\n                                        BrowserActivity.newIntent(\r\n                                            this,\r\n                                            requestToWeb,\r\n                                            isSiteAvailability = isSiteAvailability\r\n                                        )\r\n                                    )\r\n\r\n                                }\r\n                                .addOnFailureListener {\r\n                                    requestToWeb = requestToWeb!!.replace(\"https://\", \"\")\r\n                                    isSiteAvailability = false\r\n                                    startActivity(\r\n                                        BrowserActivity.newIntent(\r\n                                            this,\r\n                                            requestToWeb,\r\n                                            isSiteAvailability = isSiteAvailability\r\n                                        )\r\n                                    )\r\n                                }\r\n                        } else {\r\n                            startActivity(\r\n                                BrowserActivity.newIntent(\r\n                                    this,\r\n                                    requestToWeb,\r\n                                    isSiteAvailability = isSiteAvailability\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n            } else {\r\n                isSiteAvailability = false\r\n                requestToWeb = searchText\r\n                startActivity(\r\n                    BrowserActivity.newIntent(\r\n                        this,\r\n                        requestToWeb,\r\n                        isSiteAvailability = isSiteAvailability\r\n                    )\r\n                )\r\n            }\r\n        } else {\r\n            Toast.makeText(this, getString(R.string.search_empty_error), Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    private fun initRecyclers() {\r\n        searchEngineAdapter = SearchEngineAdapter(arrayListOf()) {\r\n            onSearchEngineClicked(it)\r\n        }\r\n        rv_search_engines?.layoutManager =\r\n            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        rv_search_engines?.adapter = searchEngineAdapter\r\n\r\n        searchEngineAdapter?.updateData(getSearchEngines(this))\r\n\r\n        bookmarksAdapter = BookmarksAdapter(arrayListOf(), {\r\n            onBookmarkClicked(it)\r\n        }, {\r\n            onBookmarkEditClicked(it)\r\n        }, {\r\n            onBookmarkDeleteClicked(it)\r\n        })\r\n        rv_bookmarks?.layoutManager = GridLayoutManager(this, 2)\r\n        rv_bookmarks?.adapter = bookmarksAdapter\r\n\r\n        bookmarksPopularAdapter = BookmarksAdapter(arrayListOf(), {\r\n            onPopularBookmarkClicked(it)\r\n        }, {}, {})\r\n        rv_popular?.layoutManager = GridLayoutManager(this, 2)\r\n        rv_popular?.adapter = bookmarksPopularAdapter\r\n\r\n        observeBookmarks()\r\n        observeBookmarksPopular()\r\n    }\r\n\r\n    private fun onSearchEngineClicked(searchEngine: SearchEngine) {\r\n        saveSelectedSearchEngine(this, searchEngine)\r\n        searchEngineAdapter?.selectItem(searchEngine)\r\n    }\r\n\r\n    private fun onBookmarkClicked(bookmark: Bookmark) {\r\n        Timber.d(\"TAG_LIST_1: ${bookmark}\")\r\n\r\n        currentTabs.add(bookmark.link)\r\n        startActivity(BrowserActivity.newIntent(this, bookmark.link, isSiteAvailability = true))\r\n    }\r\n\r\n    private fun onBookmarkEditClicked(bookmark: Bookmark) {\r\n        showBookmarkEditDialog(bookmark)\r\n    }\r\n\r\n    private fun onBookmarkDeleteClicked(bookmark: Bookmark) {\r\n        bookmarksViewModel.delete(bookmark).observe(this, Observer {\r\n            it?.let {\r\n                bookmarksAdapter?.removeItem(bookmark)\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun onPopularBookmarkClicked(bookmark: Bookmark) {\r\n        startActivity(BrowserActivity.newIntent(this, bookmark.link, isSiteAvailability = true))\r\n    }\r\n\r\n    private val activityResultLauncher =\r\n        registerForActivityResult(\r\n            ActivityResultContracts.RequestMultiplePermissions()\r\n        ) { }\r\n\r\n    private val startForResult = registerForActivityResult(\r\n        ActivityResultContracts.StartActivityForResult()\r\n    ) { activityResult ->\r\n        if (activityResult.resultCode == Activity.RESULT_OK) {\r\n            // Perhaps log the result here.\r\n        }\r\n    }\r\n\r\n    private fun grantPermissions() {\r\n\r\n        activityResultLauncher.launch(\r\n            arrayOf(\r\n                Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                Manifest.permission.READ_EXTERNAL_STORAGE,\r\n                Manifest.permission.MANAGE_EXTERNAL_STORAGE,\r\n                Manifest.permission.CAMERA\r\n            )\r\n        )\r\n        setFirstRequestPermissions(this, false)\r\n\r\n        if (checkDefaultBrowser() != packageName && !isRequestDefaultBrowser(this)) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n                setRequestDefaultBrowser(this, true)\r\n                val roleManager = getSystemService(Context.ROLE_SERVICE) as RoleManager\r\n                if (roleManager.isRoleAvailable(RoleManager.ROLE_BROWSER) &&\r\n                    !roleManager.isRoleHeld(RoleManager.ROLE_BROWSER)\r\n                ) {\r\n                    val intent = roleManager.createRequestRoleIntent(RoleManager.ROLE_BROWSER)\r\n                    startForResult.launch(intent)\r\n                }\r\n            } else {\r\n                val intent = Intent(CATEGORY_BROWSABLE, Uri.parse(\"http://\"))\r\n                intent.action = ACTION_VIEW\r\n                intent.putExtra(\"from_home\", true)\r\n                startActivity(intent)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun validatePermissions() {\r\n\r\n        if (isFirstRequestPermissions(this)) {\r\n            grantPermissions()\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        currentTabs.clear()\r\n        for (item in getSharedPreferences(\r\n            if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,\r\n            Context.MODE_PRIVATE\r\n        ).all) {\r\n            currentTabs.add(item.toString())\r\n        }\r\n        b_tabs.text = currentTabs.size.toString()\r\n\r\n        val newestLanguage = getSharedPreferences(\r\n            Constants.Settings.SETTINGS_LANGUAGE,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n        )\r\n        if (currentLanguage == null) currentLanguage = getSharedPreferences(\r\n            Constants.Settings.SETTINGS_LANGUAGE,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n        )\r\n        if (currentLanguage != newestLanguage) {\r\n            recreate()\r\n        }\r\n\r\n        incognitoMode()\r\n    }\r\n\r\n    override fun attachBaseContext(base: Context) {\r\n        super.attachBaseContext(applySelectedAppLanguage(base))\r\n    }\r\n\r\n    private fun applySelectedAppLanguage(context: Context): Context {\r\n        val newestLanguage =\r\n            context.getSharedPreferences(Constants.Settings.SETTINGS_LANGUAGE, Context.MODE_PRIVATE)\r\n                .getString(\r\n                    Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n                )\r\n        val locale = Locale(newestLanguage)\r\n        val newConfig = Configuration(context.resources.configuration)\r\n        Locale.setDefault(locale)\r\n        newConfig.setLocale(locale)\r\n        return context.createConfigurationContext(newConfig)\r\n    }\r\n\r\n    private val NUMBER_TABS = \"NUMBER_TABS\"\r\n\r\n    private val mExecutor: Executor = Executors.newSingleThreadExecutor()\r\n\r\n    private fun createHttpTask(u: String): Task<String> {\r\n        return Tasks.call(mExecutor, Callable<String> {\r\n            val url = URL(u)\r\n            val conn: HttpURLConnection = url.openConnection() as HttpURLConnection\r\n            conn.requestMethod = \"GET\"\r\n            conn.connectTimeout = 1000\r\n            conn.readTimeout = 1000\r\n            val rc = conn.responseCode\r\n            if (rc != HttpURLConnection.HTTP_OK) {\r\n                conn.disconnect()\r\n                throw Exception(\"Error: ${rc}\")\r\n            } else {\r\n                conn.disconnect()\r\n                return@Callable \"TRUE\"\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun animationView() {\r\n        val ttb = AnimationUtils.loadAnimation(this, R.anim.ttb)\r\n        //ImageView\r\n        val stb = AnimationUtils.loadAnimation(this, R.anim.stb)\r\n        //LinearLayout\r\n        val btt = AnimationUtils.loadAnimation(this, R.anim.btt)\r\n        val btt2 = AnimationUtils.loadAnimation(this, R.anim.btt2)\r\n        val btt3 = AnimationUtils.loadAnimation(this, R.anim.btt3)\r\n        val btt4 = AnimationUtils.loadAnimation(this, R.anim.btt4)\r\n        //Button\r\n        val button_course = AnimationUtils.loadAnimation(this, R.anim.button_course)\r\n\r\n        val rc = findViewById(R.id.rv_search_engines) as RecyclerView\r\n        val cl_main_bar = findViewById(R.id.cl_main_bar) as ConstraintLayout\r\n        val rv_bookmarks = findViewById(R.id.rv_bookmarks) as RecyclerView\r\n        val tv_bookmarks_title = findViewById(R.id.tv_bookmarks_title) as TextView\r\n\r\n        val tv_popular_title = findViewById(R.id.tv_popular_title) as TextView\r\n        val rv_popular = findViewById(R.id.rv_popular) as RecyclerView\r\n\r\n        rc.startAnimation(btt)\r\n        cl_main_bar.startAnimation(btt2)\r\n        rv_bookmarks.startAnimation(btt3)\r\n        tv_bookmarks_title.startAnimation(btt3)\r\n\r\n        tv_popular_title.startAnimation(btt4)\r\n        rv_popular.startAnimation(btt4)\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/home/HomeActivity.kt b/app/src/main/java/web/browser/dragon/ui/home/HomeActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/home/HomeActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/home/HomeActivity.kt	
@@ -33,7 +33,6 @@
 import web.browser.dragon.ui.home.search.adapter.SearchEngineAdapter
 import web.browser.dragon.ui.settings.SettingsActivity
 import web.browser.dragon.ui.tabs.TabsActivity
-import web.browser.dragon.utils.*
 import kotlinx.android.synthetic.main.activity_home.*
 import kotlinx.android.synthetic.main.activity_home.b_tabs
 import kotlinx.android.synthetic.main.activity_home.et_search_field
@@ -46,20 +45,24 @@
 import kotlin.collections.ArrayList
 import android.net.Uri
 import android.os.Build
+import android.os.Looper
+import android.telephony.TelephonyManager
 import android.view.animation.AnimationUtils
 import android.widget.TextView
 import androidx.constraintlayout.widget.ConstraintLayout
 import androidx.recyclerview.widget.RecyclerView
+import com.google.android.gms.location.*
 import com.google.android.gms.tasks.Task
 import com.google.android.gms.tasks.Tasks
 import web.browser.dragon.R
+import web.browser.dragon.utils.*
 import java.lang.Exception
 import java.net.HttpURLConnection
 import java.net.URL
 import java.util.concurrent.Callable
 import java.util.concurrent.Executor
 import java.util.concurrent.Executors
-import kotlin.time.Duration.Companion.seconds
+
 
 
 class HomeActivity : AppCompatActivity() {
@@ -72,6 +75,7 @@
         BookmarksViewModelFactory((this.application as WebBrowserDragon).bookmarksRepository)
     }
 
+
     private var searchEngineAdapter: SearchEngineAdapter? = null
     private var bookmarksAdapter: BookmarksAdapter? = null
     private var bookmarksPopularAdapter: BookmarksAdapter? = null
@@ -87,14 +91,53 @@
 
     private var isShowEditDialog = false
 
+
     private var isSiteAvailability = false
 
     private var requestToWeb: String? = null
 
+   lateinit var fusedLocationProviderClient: FusedLocationProviderClient
+
+
+
+   private var fusedLocationProvider: FusedLocationProviderClient? = null
+    private val locationRequest: LocationRequest = LocationRequest.create().apply {
+        interval = 30
+        fastestInterval = 10
+        priority = LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY
+        maxWaitTime = 60
+    }
+
+
+
+
+
+
+    private var locationCallback: LocationCallback = object : LocationCallback() {
+        override fun onLocationResult(locationResult: LocationResult) {
+            val locationList = locationResult.locations
+            if (locationList.isNotEmpty()) {
+                //The last location in the list is the newest
+                val location = locationList.last()
+             //   Toast.makeText(
+//                    this@HomeActivity,
+             //       "Got Location: " + location.toString(),
+            //        Toast.LENGTH_LONG
+             //   )
+                //    .show()
+            }
+        }
+    }
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_home)
 
+        fusedLocationProvider = LocationServices.getFusedLocationProviderClient(this)
+
+
+
+
         startSettingsOfHome()
         setOnClickListeners()
         initRecyclers()
@@ -109,8 +152,9 @@
         val resolveInfo =
             packageManager.resolveActivity(browserIntent, PackageManager.MATCH_DEFAULT_ONLY)
 
-        return resolveInfo!!.activityInfo.packageName
+        return resolveInfo?.activityInfo!!.packageName
     }
+
 
     private fun incognitoMode() {
         if (isIncognitoMode(this)) {
@@ -178,6 +222,7 @@
         })
     }
 
+
     private fun observeBookmarksPopular() {
         bookmarksViewModel.popularBookmarks.observe(this, androidx.lifecycle.Observer {
             it?.let {
@@ -324,8 +369,7 @@
 
     private fun setSearchEngine() {
         val searchEngine = getSelectedSearchEngine(this)
-
-        if (searchEngine != null) {
+         if (searchEngine != null) {
             saveSelectedSearchEngine(this, searchEngine)
             searchEngineAdapter?.selectItem(searchEngine)
         } else {
@@ -363,7 +407,10 @@
         if (!searchText.isNullOrEmpty()) {
             if (searchText.contains(".") && !searchText.contains(" ")) {
                 requestToWeb =
-                    if (searchText.startsWith("http://") || searchText.startsWith("https://")) searchText else "http://$searchText"
+                    if (searchText.startsWith("http://") ||
+                        searchText.startsWith("https://"))
+                        searchText
+                    else "http://$searchText"
 
                 createHttpTask(requestToWeb!!)
                     .addOnSuccessListener {
@@ -404,6 +451,7 @@
                                         )
                                     )
                                 }
+
                         } else {
                             startActivity(
                                 BrowserActivity.newIntent(
@@ -453,6 +501,9 @@
         bookmarksPopularAdapter = BookmarksAdapter(arrayListOf(), {
             onPopularBookmarkClicked(it)
         }, {}, {})
+
+
+
         rv_popular?.layoutManager = GridLayoutManager(this, 2)
         rv_popular?.adapter = bookmarksPopularAdapter
 
@@ -505,10 +556,14 @@
 
         activityResultLauncher.launch(
             arrayOf(
+
                 Manifest.permission.WRITE_EXTERNAL_STORAGE,
                 Manifest.permission.READ_EXTERNAL_STORAGE,
                 Manifest.permission.MANAGE_EXTERNAL_STORAGE,
-                Manifest.permission.CAMERA
+                Manifest.permission.CAMERA,
+                Manifest.permission.ACCESS_FINE_LOCATION,
+                Manifest.permission.ACCESS_COARSE_LOCATION
+
             )
         )
         setFirstRequestPermissions(this, false)
@@ -537,11 +592,32 @@
         if (isFirstRequestPermissions(this)) {
             grantPermissions()
         }
+        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
+            == PackageManager.PERMISSION_GRANTED
+        ) {
+
+            fusedLocationProvider?.requestLocationUpdates(
+                locationRequest,
+                locationCallback,
+                Looper.getMainLooper()
+            )
+        }
     }
 
     override fun onResume() {
         super.onResume()
 
+        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
+            == PackageManager.PERMISSION_GRANTED
+        ) {
+
+            fusedLocationProvider?.requestLocationUpdates(
+                locationRequest,
+                locationCallback,
+                Looper.getMainLooper()
+            )
+        }
+
         currentTabs.clear()
         for (item in getSharedPreferences(
             if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,
@@ -569,6 +645,19 @@
 
         incognitoMode()
     }
+//    override fun onPause() {
+//        //Save open Tabs in shared preferences
+//        super.onPause()
+//        if (ContextCompat.checkSelfPermission(
+//                this,
+//                Manifest.permission.ACCESS_FINE_LOCATION
+//            )
+//            == PackageManager.PERMISSION_GRANTED
+//        ) {
+//
+//            fusedLocationProvider?.removeLocationUpdates(locationCallback)
+//        }
+//    }
 
     override fun attachBaseContext(base: Context) {
         super.attachBaseContext(applySelectedAppLanguage(base))
@@ -591,6 +680,8 @@
 
     private val mExecutor: Executor = Executors.newSingleThreadExecutor()
 
+
+
     private fun createHttpTask(u: String): Task<String> {
         return Tasks.call(mExecutor, Callable<String> {
             val url = URL(u)
@@ -637,4 +728,6 @@
         tv_popular_title.startAnimation(btt4)
         rv_popular.startAnimation(btt4)
     }
-}
\ No newline at end of file
+
+}
+
Index: app/src/main/java/web/browser/dragon/ui/main/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.main\r\n\r\nimport android.Manifest\r\nimport android.animation.ObjectAnimator\r\nimport android.annotation.SuppressLint\r\nimport android.app.Dialog\r\nimport android.app.DownloadManager\r\nimport android.app.NotificationManager\r\nimport android.app.SearchManager\r\nimport android.content.*\r\nimport android.content.pm.PackageManager\r\nimport android.content.res.Configuration\r\nimport android.graphics.Bitmap\r\nimport android.media.MediaPlayer\r\nimport android.media.MediaPlayer.OnCompletionListener\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.HandlerThread\r\nimport android.preference.PreferenceManager\r\nimport android.print.PrintAttributes\r\nimport android.print.PrintDocumentAdapter\r\nimport android.print.PrintManager\r\nimport android.text.Editable\r\nimport android.text.TextUtils\r\nimport android.text.TextWatcher\r\nimport android.text.method.KeyListener\r\nimport android.util.Log\r\nimport android.util.TypedValue\r\nimport android.view.*\r\nimport android.view.ContextMenu.ContextMenuInfo\r\nimport android.view.View.OnFocusChangeListener\r\nimport android.view.View.OnLongClickListener\r\nimport android.webkit.ValueCallback\r\nimport android.webkit.WebBackForwardList\r\nimport android.webkit.WebChromeClient.CustomViewCallback\r\nimport android.webkit.WebStorage\r\nimport android.webkit.WebView.HitTestResult\r\nimport android.widget.*\r\nimport android.widget.AdapterView.OnItemClickListener\r\nimport android.widget.AdapterView.OnItemLongClickListener\r\nimport android.widget.TextView.OnEditorActionListener\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.widget.PopupMenu\r\nimport androidx.cardview.widget.CardView\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.appsflyer.AppsFlyerLib\r\nimport com.google.android.material.badge.BadgeDrawable\r\nimport com.google.android.material.badge.BadgeUtils\r\nimport com.google.android.material.chip.Chip\r\nimport com.google.android.material.color.DynamicColors\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\nimport com.google.android.material.navigation.NavigationBarView\r\nimport com.google.android.material.progressindicator.LinearProgressIndicator\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.material.tabs.TabLayout.OnTabSelectedListener\r\nimport com.google.android.material.textfield.TextInputLayout\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.utils.Constants\r\nimport web.browser.dragon.utils.other.DataURIParser\r\nimport web.browser.dragon.utils.other.GridItem\r\nimport web.browser.dragon.utils.other.NinjaToast\r\nimport web.browser.dragon.utils.other.browser.*\r\nimport web.browser.dragon.utils.other.database.FaviconHelper\r\nimport web.browser.dragon.utils.other.database.Record\r\nimport web.browser.dragon.utils.other.database.RecordAction\r\nimport web.browser.dragon.utils.other.database.RecordAction.Companion.BOOKMARK_ITEM\r\nimport web.browser.dragon.utils.other.database.RecordAction.Companion.STARTSITE_ITEM\r\nimport web.browser.dragon.utils.other.unit.BrowserUnit\r\nimport web.browser.dragon.utils.other.unit.HelperUnit\r\nimport web.browser.dragon.utils.other.unit.RecordUnit\r\nimport web.browser.dragon.utils.other.view.*\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport java.util.*\r\nimport java.util.concurrent.atomic.AtomicInteger\r\nimport kotlin.collections.ArrayList\r\n\r\nclass MainActivity : AppCompatActivity(), BrowserController {\r\n\r\n    companion object {\r\n        fun newIntent(context: Context, url: String? = null): Intent {\r\n            val intent = Intent(context, MainActivity::class.java)\r\n            intent.putExtra(EXTRA_URL, url)\r\n            return intent\r\n        }\r\n        \r\n        const val EXTRA_URL = \"extra_url\"\r\n    }\r\n\r\n    private var overViewTab: String? = null\r\n    private var downloadReceiver: BroadcastReceiver? = null\r\n\r\n    private var adapter: RecordAdapter? = null\r\n    private var sp: SharedPreferences? = null\r\n    private var listTrusted: List_trusted? = null\r\n    private var listStandard: List_standard? = null\r\n    private var listProtected: List_protected? = null\r\n    private var animation: ObjectAnimator? = null\r\n    private var newIcon: Long = 0\r\n    private var filter = false\r\n    private var isNightMode = false\r\n    private var orientationChanged = false\r\n    private var filterBy: Long = 0\r\n    private var ninjaWebView: NinjaWebView? = null\r\n    private var listener: KeyListener? = null\r\n    private var customView: View? = null\r\n    private var badgeDrawable: BadgeDrawable? = null\r\n    private val progressBar: LinearProgressIndicator? = null\r\n    private var videoView: VideoView? = null\r\n    private var fullscreenHolder: FrameLayout? = null\r\n\r\n    private var searchOnSite = false\r\n\r\n    private var filePathCallback: ValueCallback<Array<Uri>>? = null\r\n    private var currentAlbumController: AlbumController? = null\r\n\r\n    private val INPUT_FILE_REQUEST_CODE = 1\r\n    private var mFilePathCallback: ValueCallback<Array<Uri>>? = null\r\n\r\n    // Classes\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        sp = PreferenceManager.getDefaultSharedPreferences(this)\r\n\r\n        if (supportActionBar != null) supportActionBar!!.hide()\r\n        val window = this.window\r\n        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\r\n        window.statusBarColor = ContextCompat.getColor(this, R.color.md_theme_light_onBackground)\r\n\r\n        if (sp!!.getBoolean(\r\n                \"sp_screenOn\",\r\n                false\r\n            )\r\n        ) getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n        if (sp!!.getBoolean(\"nightModeOnStart\", false)) isNightMode = true\r\n\r\n        HelperUnit.initTheme(this)\r\n        DynamicColors.applyToActivitiesIfAvailable(this.getApplication())\r\n\r\n        val mOrientationListener: OrientationEventListener = object : OrientationEventListener(\r\n            applicationContext\r\n        ) {\r\n            override fun onOrientationChanged(orientation: Int) {\r\n                orientationChanged = true\r\n            }\r\n        }\r\n        if (mOrientationListener.canDetectOrientation()) mOrientationListener.enable()\r\n\r\n        sp!!.edit()\r\n            .putInt(\"restart_changed\", 0)\r\n            .putBoolean(\"pdf_create\", false)\r\n            .putString(\"profile\", sp!!.getString(\"profile_toStart\", \"profileStandard\")).apply()\r\n\r\n        overViewTab =\r\n            when (Objects.requireNonNull(sp!!.getString(\"start_tab\", \"3\"))) {\r\n                \"3\" -> getString(R.string.album_title_bookmarks)\r\n                \"4\" -> getString(R.string.album_title_history)\r\n                else -> getString(R.string.album_title_home)\r\n            }\r\n        setContentView(R.layout.activity_main)\r\n\r\n            // Calculate ActionBar height\r\n        val tv = TypedValue()\r\n        if (theme.resolveAttribute(\r\n                android.R.attr.actionBarSize,\r\n                tv,\r\n                true\r\n            ) && !sp!!.getBoolean(\"hideToolbar\", true)\r\n        ) {\r\n            val actionBarHeight =\r\n                TypedValue.complexToDimensionPixelSize(tv.data, resources.displayMetrics)\r\n            main_content.setPadding(0, 0, 0, actionBarHeight)\r\n        }\r\n\r\n        downloadReceiver = object : BroadcastReceiver() {\r\n            override fun onReceive(context: Context, intent: Intent) {\r\n                val builder = MaterialAlertDialogBuilder(context)\r\n                builder.setTitle(R.string.menu_download)\r\n                builder.setIcon(R.drawable.icon_alert)\r\n                builder.setMessage(R.string.toast_downloadComplete)\r\n                builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                    startActivity(\r\n                        Intent(\r\n                            DownloadManager.ACTION_VIEW_DOWNLOADS\r\n                        )\r\n                    )\r\n                }\r\n                builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n                val dialog: Dialog = builder.create()\r\n                dialog.show()\r\n                HelperUnit.setupDialog(context, dialog)\r\n            }\r\n        }\r\n\r\n        val filter = IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE)\r\n        registerReceiver(downloadReceiver, filter)\r\n\r\n        initOmniBox()\r\n        initSearchPanel()\r\n        initOverview()\r\n        dispatchIntent(intent)\r\n\r\n        //restore open Tabs from shared preferences if app got killed\r\n        if (sp!!.getBoolean(\"sp_restoreTabs\", false)\r\n            || sp!!.getBoolean(\"sp_reloadTabs\", false)\r\n            || sp!!.getBoolean(\"restoreOnRestart\", false)\r\n        ) {\r\n            val saveDefaultProfile = sp!!.getString(\"profile\", \"profileStandard\")\r\n            val openTabs: java.util.ArrayList<String>\r\n            val openTabsProfile: java.util.ArrayList<String>\r\n            openTabs = java.util.ArrayList(\r\n                Arrays.asList(\r\n                    *TextUtils.split(\r\n                        sp!!.getString(\"openTabs\", \"\"),\r\n                        \"‚‗‚\"\r\n                    )\r\n                )\r\n            )\r\n            openTabsProfile = java.util.ArrayList(\r\n                Arrays.asList(\r\n                    *TextUtils.split(\r\n                        sp!!.getString(\r\n                            \"openTabsProfile\",\r\n                            \"\"\r\n                        ), \"‚‗‚\"\r\n                    )\r\n                )\r\n            )\r\n            if (openTabs.size > 0) {\r\n                for (counter in openTabs.indices) {\r\n                    addAlbum(\r\n                        getString(R.string.app_name),\r\n                        openTabs[counter],\r\n                        BrowserContainer.size() < 1,\r\n                        false,\r\n                        openTabsProfile[counter]\r\n                    )\r\n                }\r\n            }\r\n            sp!!.edit().putString(\"profile\", saveDefaultProfile).apply()\r\n            sp!!.edit().putBoolean(\"restoreOnRestart\", false).apply()\r\n        }\r\n\r\n        //if still no open Tab open default page\r\n        if (BrowserContainer.size() < 1) {\r\n            if (sp!!.getBoolean(\"start_tabStart\", false)) showOverview()\r\n            addAlbum(\r\n                getString(R.string.app_name),\r\n                Objects.requireNonNull(\r\n                    \"https://vk.com\"\r\n                ),\r\n                true,\r\n                false,\r\n                \"\"\r\n            )\r\n            intent.action = \"\"\r\n        }\r\n    }\r\n\r\n    // Overrides\r\n    override fun onPause() {\r\n        //Save open Tabs in shared preferences\r\n        saveOpenedTabs()\r\n        super.onPause()\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        if (requestCode != INPUT_FILE_REQUEST_CODE || mFilePathCallback == null) {\r\n            super.onActivityResult(requestCode, resultCode, data)\r\n            return\r\n        }\r\n        var results: Array<Uri>? = null\r\n        // Check that the response is a good one\r\n        if (resultCode == RESULT_OK) {\r\n            if (data != null) {\r\n                // If there is not data, then we may have taken a photo\r\n                val dataString = data.dataString\r\n                if (dataString != null) results = arrayOf(Uri.parse(dataString))\r\n            }\r\n        }\r\n        mFilePathCallback!!.onReceiveValue(results)\r\n        mFilePathCallback = null\r\n    }\r\n\r\n    override fun onNewIntent(intent: Intent?) {\r\n        super.onNewIntent(intent)\r\n        setIntent(intent)\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if (sp!!.getBoolean(\"sp_camera\", false)) {\r\n            if (ContextCompat.checkSelfPermission(\r\n                    this,\r\n                    Manifest.permission.CAMERA\r\n                ) != PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CAMERA), 1)\r\n            }\r\n        }\r\n        if (sp!!.getInt(\"restart_changed\", 1) == 1) {\r\n            saveOpenedTabs()\r\n            HelperUnit.triggerRebirth(this)\r\n        }\r\n        if (sp!!.getBoolean(\"pdf_create\", false)) {\r\n            sp!!.edit().putBoolean(\"pdf_create\", false).apply()\r\n            val builder = MaterialAlertDialogBuilder(this)\r\n            builder.setTitle(R.string.menu_download)\r\n            builder.setIcon(R.drawable.icon_alert)\r\n            builder.setMessage(R.string.toast_downloadComplete)\r\n            builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                startActivity(\r\n                    Intent(\r\n                        DownloadManager.ACTION_VIEW_DOWNLOADS\r\n                    )\r\n                )\r\n            }\r\n            builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n            val dialog = builder.create()\r\n            dialog.show()\r\n            HelperUnit.setupDialog(this, dialog)\r\n        }\r\n        dispatchIntent(intent)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        val notificationManager =\r\n            applicationContext.getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n        notificationManager.cancel(2)\r\n        notificationManager.cancel(1)\r\n        if (sp!!.getBoolean(\"sp_clear_quit\", true)) {\r\n            val clearCache = sp!!.getBoolean(\"sp_clear_cache\", true)\r\n            val clearCookie = sp!!.getBoolean(\"sp_clear_cookie\", false)\r\n            val clearHistory = sp!!.getBoolean(\"sp_clear_history\", false)\r\n            val clearIndexedDB = sp!!.getBoolean(\"sp_clearIndexedDB\", true)\r\n            if (clearCache) BrowserUnit.clearCache(this)\r\n            if (clearCookie) BrowserUnit.clearCookie()\r\n            if (clearHistory) BrowserUnit.clearHistory(this)\r\n            if (clearIndexedDB) {\r\n                BrowserUnit.clearIndexedDB(this)\r\n                WebStorage.getInstance().deleteAllData()\r\n            }\r\n        }\r\n        BrowserContainer.clear()\r\n        if (!sp!!.getBoolean(\"sp_reloadTabs\", false) || sp!!.getInt(\"restart_changed\", 1) == 1) {\r\n            sp!!.edit().putString(\"openTabs\", \"\").apply() //clear open tabs in preferences\r\n            sp!!.edit().putString(\"openTabsProfile\", \"\").apply()\r\n        }\r\n        unregisterReceiver(downloadReceiver)\r\n        super.onDestroy()\r\n    }\r\n\r\n    override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {\r\n        when (keyCode) {\r\n            KeyEvent.KEYCODE_MENU -> {\r\n                showOverflow()\r\n                if (bottomAppBar.visibility == View.GONE) hideOverview() else if (fullscreenHolder != null || customView != null || videoView != null) Log.v(\r\n                    ContentValues.TAG,\r\n                    \"FOSS Browser in fullscreen mode\"\r\n                ) else if (list_search.visibility == View.VISIBLE) omniBox_input.clearFocus() else if (searchBox.getVisibility() == View.VISIBLE) {\r\n                    searchOnSite = false\r\n                    searchBox_input.setText(\"\")\r\n                    searchBox.setVisibility(View.GONE)\r\n                    omniBox.visibility = View.VISIBLE\r\n                } else if (ninjaWebView!!.canGoBack()) {\r\n                    val mWebBackForwardList = ninjaWebView!!.copyBackForwardList()\r\n                    val historyUrl =\r\n                        mWebBackForwardList.getItemAtIndex(mWebBackForwardList.currentIndex - 1).url\r\n                    ninjaWebView!!.initPreferences(historyUrl)\r\n                    goBack_skipRedirects()\r\n                } else removeAlbum(currentAlbumController!!)\r\n                return true\r\n            }\r\n            KeyEvent.KEYCODE_BACK -> {\r\n                if (bottomAppBar.visibility == View.GONE) hideOverview() else if (fullscreenHolder != null || customView != null || videoView != null) Log.v(\r\n                    ContentValues.TAG,\r\n                    \"FOSS Browser in fullscreen mode\"\r\n                ) else if (list_search.visibility == View.VISIBLE) omniBox_input.clearFocus() else if (searchBox.getVisibility() == View.VISIBLE) {\r\n                    searchOnSite = false\r\n                    searchBox_input.setText(\"\")\r\n                    searchBox.setVisibility(View.GONE)\r\n                    omniBox.visibility = View.VISIBLE\r\n                } else if (ninjaWebView!!.canGoBack()) {\r\n                    val mWebBackForwardList = ninjaWebView!!.copyBackForwardList()\r\n                    val historyUrl =\r\n                        mWebBackForwardList.getItemAtIndex(mWebBackForwardList.currentIndex - 1).url\r\n                    ninjaWebView!!.initPreferences(historyUrl)\r\n                    goBack_skipRedirects()\r\n                } else removeAlbum(currentAlbumController!!)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    @Synchronized\r\n    override fun showAlbum(controller: AlbumController) {\r\n        if (sp!!.getBoolean(\"hideToolbar\", true)) {\r\n            val animation = ObjectAnimator.ofFloat(bottomAppBar, \"translationY\", 0f)\r\n            animation.duration =\r\n                resources.getInteger(android.R.integer.config_shortAnimTime).toLong()\r\n            animation.start()\r\n        }\r\n        val av = controller as View\r\n        currentAlbumController?.deactivate()\r\n        currentAlbumController = controller\r\n        currentAlbumController?.activate()\r\n        main_content.removeAllViews()\r\n        main_content.addView(av)\r\n        updateOmniBox()\r\n        if (searchBox.getVisibility() == View.VISIBLE) {\r\n            searchOnSite = false\r\n            searchBox_input.setText(\"\")\r\n            searchBox.setVisibility(View.GONE)\r\n            omniBox.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    fun initSearch() {\r\n        val action = RecordAction(this)\r\n        val list: List<Record> = action.listEntries(this)\r\n        val adapter = CompleteAdapter(this, R.layout.item_icon_left, list)\r\n        list_search.setAdapter(adapter)\r\n        list_search.setTextFilterEnabled(true)\r\n        adapter.notifyDataSetChanged()\r\n        list_search.setOnItemClickListener(OnItemClickListener { parent: AdapterView<*>?, view: View, position: Int, id: Long ->\r\n            omniBox_input.clearFocus()\r\n            val url =\r\n                (view.findViewById<View>(R.id.record_item_time) as TextView).text\r\n                    .toString()\r\n            for (record in list) {\r\n                if (record.uRL.equals(url)) {\r\n                    if (record.type == BOOKMARK_ITEM || record.type == STARTSITE_ITEM) {\r\n                        if (record.desktopMode !== ninjaWebView?.isDesktopMode) ninjaWebView?.toggleDesktopMode(\r\n                            false\r\n                        )\r\n                        if (record.nightMode == ninjaWebView?.isNightMode && !isNightMode) {\r\n                            ninjaWebView?.toggleNightMode()\r\n                            isNightMode = ninjaWebView?.isNightMode == true\r\n                        }\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n            ninjaWebView?.loadUrl(url)\r\n        })\r\n        list_search.setOnItemLongClickListener(OnItemLongClickListener { adapterView: AdapterView<*>?, view: View, i: Int, l: Long ->\r\n            val title =\r\n                (view.findViewById<View>(R.id.record_item_title) as TextView).text\r\n                    .toString()\r\n            val url =\r\n                (view.findViewById<View>(R.id.record_item_time) as TextView).text\r\n                    .toString()\r\n            showContextMenuLink(title, url, HitTestResult.SRC_ANCHOR_TYPE)\r\n            omnibox_close.performClick()\r\n            true\r\n        })\r\n        omniBox_input.addTextChangedListener(object : TextWatcher {\r\n            override fun afterTextChanged(s: Editable) {}\r\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {\r\n                adapter.getFilter().filter(s)\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setSelectedTab() {\r\n        if (overViewTab == getString(R.string.album_title_home)) bottom_navigation.setSelectedItemId(\r\n            R.id.page_1\r\n        ) else if (overViewTab == getString(R.string.album_title_bookmarks)) bottom_navigation.setSelectedItemId(\r\n            R.id.page_2\r\n        ) else if (overViewTab == getString(R.string.album_title_history)) bottom_navigation.setSelectedItemId(\r\n            R.id.page_3\r\n        )\r\n    }\r\n\r\n    private fun showOverview() {\r\n        setSelectedTab()\r\n        bottomSheetDialog_OverView.setVisibility(View.VISIBLE)\r\n        val animation = ObjectAnimator.ofFloat(bottomSheetDialog_OverView, \"translationY\", 0f)\r\n        animation?.duration = resources.getInteger(android.R.integer.config_shortAnimTime).toLong()\r\n        animation?.start()\r\n        bottomAppBar.setVisibility(View.GONE)\r\n    }\r\n\r\n    override fun hideOverview() {\r\n        val animation = ObjectAnimator.ofFloat(\r\n            bottomSheetDialog_OverView,\r\n            \"translationY\",\r\n            bottomSheetDialog_OverView.getHeight().toFloat()\r\n        )\r\n        animation?.duration = resources.getInteger(android.R.integer.config_shortAnimTime).toLong()\r\n        animation?.start()\r\n        bottomAppBar.setVisibility(View.VISIBLE)\r\n    }\r\n\r\n    fun showTabView() {\r\n        bottom_navigation.setSelectedItemId(R.id.page_0)\r\n        bottomSheetDialog_OverView.setVisibility(View.VISIBLE)\r\n        val animation = ObjectAnimator.ofFloat(bottomSheetDialog_OverView, \"translationY\", 0f)\r\n        animation?.duration = resources.getInteger(android.R.integer.config_shortAnimTime).toLong()\r\n        animation?.start()\r\n        bottomAppBar.setVisibility(View.GONE)\r\n    }\r\n\r\n    private fun printPDF() {\r\n        val title: String = HelperUnit.fileName(ninjaWebView?.url)\r\n        val printManager = getSystemService(PRINT_SERVICE) as PrintManager\r\n        val printAdapter: PrintDocumentAdapter? = ninjaWebView?.createPrintDocumentAdapter(title)\r\n        if (printAdapter != null) {\r\n            Objects.requireNonNull(printManager)\r\n                .print(title, printAdapter, PrintAttributes.Builder().build())\r\n        }\r\n        sp!!.edit().putBoolean(\"pdf_create\", true).apply()\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    private fun dispatchIntent(intent: Intent) {\r\n        val action = intent.action\r\n        val url = intent.getStringExtra(Intent.EXTRA_TEXT)\r\n        if (\"\" == action) Log.i(\r\n            ContentValues.TAG,\r\n            \"resumed FOSS browser\"\r\n        ) else if (intent.action != null && intent.action == Intent.ACTION_PROCESS_TEXT) {\r\n            val text = getIntent().getCharSequenceExtra(Intent.EXTRA_PROCESS_TEXT)!!\r\n            addAlbum(null, text.toString(), true, false, \"\")\r\n            getIntent().action = \"\"\r\n            hideOverview()\r\n            if (this != null) {\r\n                BrowserUnit.openInBackground(this, intent, text.toString())\r\n            }\r\n        } else if (intent.action != null && intent.action == Intent.ACTION_WEB_SEARCH) {\r\n            addAlbum(\r\n                null,\r\n                Objects.requireNonNull(intent.getStringExtra(SearchManager.QUERY)),\r\n                true,\r\n                false,\r\n                \"\"\r\n            )\r\n            getIntent().action = \"\"\r\n            hideOverview()\r\n            if (this != null) {\r\n                BrowserUnit.openInBackground(\r\n                    this,\r\n                    intent,\r\n                    intent.getStringExtra(SearchManager.QUERY)\r\n                )\r\n            }\r\n        } else if (filePathCallback != null) {\r\n            filePathCallback = null\r\n            getIntent().action = \"\"\r\n        } else if (url != null && Intent.ACTION_SEND == action) {\r\n            addAlbum(getString(R.string.app_name), url, true, false, \"\")\r\n            getIntent().action = \"\"\r\n            hideOverview()\r\n            if (this != null) {\r\n                BrowserUnit.openInBackground(this, intent, url)\r\n            }\r\n        } else if (Intent.ACTION_VIEW == action) {\r\n            val data = Objects.requireNonNull(getIntent().data).toString()\r\n            addAlbum(getString(R.string.app_name), data, true, false, \"\")\r\n            getIntent().action = \"\"\r\n            hideOverview()\r\n            if (this != null) {\r\n                BrowserUnit.openInBackground(this, intent, data)\r\n            }\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\r\n        \"ClickableViewAccessibility\",\r\n        \"UnsafeExperimentalUsageError\",\r\n        \"UnsafeOptInUsageError\"\r\n    )\r\n    private fun initOmniBox() {\r\n        listener = omniBox_input.getKeyListener() // Save the default KeyListener!!!\r\n        omniBox_input.setKeyListener(null) // Disable input\r\n        omniBox_input.setEllipsize(TextUtils.TruncateAt.END)\r\n        omniBox_tab.setOnClickListener(View.OnClickListener { v: View? -> showTabView() })\r\n        omniBox_tab.setOnLongClickListener(OnLongClickListener { view: View? ->\r\n            performGesture(\"setting_gesture_tabButton\")\r\n            false\r\n        })\r\n        omnibox_close.setOnClickListener(View.OnClickListener { view: View? ->\r\n            if (Objects.requireNonNull(\r\n                    omniBox_input.getText()\r\n                )?.length!! > 0\r\n            ) omniBox_input.setText(\"\") else omniBox_input.clearFocus()\r\n        })\r\n        val typedValue = TypedValue()\r\n        val theme = this!!.theme\r\n        theme.resolveAttribute(com.google.android.material.R.attr.colorSecondary, typedValue, true)\r\n        val color = typedValue.data\r\n        badgeDrawable = BadgeDrawable.create(this)\r\n        badgeDrawable?.setBadgeGravity(BadgeDrawable.TOP_END)\r\n        badgeDrawable?.setVerticalOffset(20)\r\n        badgeDrawable?.setHorizontalOffset(20)\r\n        badgeDrawable?.setNumber(BrowserContainer.size())\r\n        badgeDrawable?.setBackgroundColor(color)\r\n        BadgeUtils.attachBadgeDrawable(badgeDrawable!!, omniBox_tab, findViewById(androidx.constraintlayout.widget.R.id.layout))\r\n        omnibox_overflow?.setOnClickListener { v: View? -> showOverflow() }\r\n        omnibox_overflow?.setOnLongClickListener { v: View? ->\r\n            performGesture(\"setting_gesture_tabButton\")\r\n            false\r\n        }\r\n        omnibox_overflow?.setOnTouchListener(object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeTop() {\r\n                performGesture(\"setting_gesture_nav_up\")\r\n            }\r\n\r\n            override fun onSwipeBottom() {\r\n                performGesture(\"setting_gesture_nav_down\")\r\n            }\r\n\r\n            override fun onSwipeRight() {\r\n                performGesture(\"setting_gesture_nav_right\")\r\n            }\r\n\r\n            override fun onSwipeLeft() {\r\n                performGesture(\"setting_gesture_nav_left\")\r\n            }\r\n        })\r\n        omnibox_overview?.setOnTouchListener(object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeTop() {\r\n                performGesture(\"setting_gesture_nav_up\")\r\n            }\r\n\r\n            override fun onSwipeBottom() {\r\n                performGesture(\"setting_gesture_nav_down\")\r\n            }\r\n\r\n            override fun onSwipeRight() {\r\n                performGesture(\"setting_gesture_nav_right\")\r\n            }\r\n\r\n            override fun onSwipeLeft() {\r\n                performGesture(\"setting_gesture_nav_left\")\r\n            }\r\n        })\r\n        omniBox_tab.setOnTouchListener(object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeTop() {\r\n                performGesture(\"setting_gesture_nav_up\")\r\n            }\r\n\r\n            override fun onSwipeBottom() {\r\n                performGesture(\"setting_gesture_nav_down\")\r\n            }\r\n\r\n            override fun onSwipeRight() {\r\n                performGesture(\"setting_gesture_nav_right\")\r\n            }\r\n\r\n            override fun onSwipeLeft() {\r\n                performGesture(\"setting_gesture_nav_left\")\r\n            }\r\n        })\r\n        omniBox_input.setOnTouchListener(object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeTop() {\r\n                performGesture(\"setting_gesture_tb_up\")\r\n            }\r\n\r\n            override fun onSwipeBottom() {\r\n                performGesture(\"setting_gesture_tb_down\")\r\n            }\r\n\r\n            override fun onSwipeRight() {\r\n                performGesture(\"setting_gesture_tb_right\")\r\n            }\r\n\r\n            override fun onSwipeLeft() {\r\n                performGesture(\"setting_gesture_tb_left\")\r\n            }\r\n        })\r\n        omniBox_input?.setOnEditorActionListener(OnEditorActionListener { v: TextView?, actionId: Int, event: KeyEvent? ->\r\n            val query: String =\r\n                Objects.requireNonNull(omniBox_input.getText()).toString().trim { it <= ' ' }\r\n            ninjaWebView?.loadUrl(query)\r\n            false\r\n        })\r\n        omniBox_input?.setOnFocusChangeListener(OnFocusChangeListener { v: View?, hasFocus: Boolean ->\r\n            if (omniBox_input.hasFocus()) {\r\n                omnibox_close.setVisibility(View.VISIBLE)\r\n                list_search.setVisibility(View.VISIBLE)\r\n                omnibox_overflow.visibility = View.GONE\r\n                omnibox_overview.setVisibility(View.GONE)\r\n                omniBox_tab.setVisibility(View.GONE)\r\n                val url: String = ninjaWebView?.url ?: \"\"\r\n                ninjaWebView?.stopLoading()\r\n                omniBox_input.setKeyListener(listener)\r\n                if (url == null || url.isEmpty()) omniBox_input.setText(\"\") else omniBox_input.setText(\r\n                    url\r\n                )\r\n                initSearch()\r\n                omniBox_input.selectAll()\r\n            } else {\r\n                HelperUnit.hideSoftKeyboard(omniBox_input, this)\r\n                omnibox_close.setVisibility(View.GONE)\r\n                list_search.setVisibility(View.GONE)\r\n                omnibox_overflow.visibility = View.VISIBLE\r\n                omnibox_overview.setVisibility(View.VISIBLE)\r\n                omniBox_tab.setVisibility(View.VISIBLE)\r\n                omniBox_input.setKeyListener(null)\r\n                omniBox_input.setEllipsize(TextUtils.TruncateAt.END)\r\n                omniBox_input.setText(ninjaWebView?.getTitle())\r\n                updateOmniBox()\r\n            }\r\n        })\r\n        omnibox_overview.setOnClickListener(View.OnClickListener { v: View? -> showOverview() })\r\n        omnibox_overview.setOnLongClickListener(OnLongClickListener { v: View? ->\r\n            performGesture(\"setting_gesture_overViewButton\")\r\n            false\r\n        })\r\n    }\r\n\r\n    private fun performGesture(gesture: String) {\r\n        val gestureAction = Objects.requireNonNull(sp!!.getString(gesture, \"0\"))\r\n        when (gestureAction) {\r\n            \"01\" -> {\r\n            }\r\n            \"02\" -> if (ninjaWebView?.canGoForward() == true) {\r\n                val mWebBackForwardList: WebBackForwardList? = ninjaWebView?.copyBackForwardList()\r\n                val historyUrl =\r\n                    mWebBackForwardList?.getItemAtIndex(mWebBackForwardList.currentIndex + 1)?.url\r\n                ninjaWebView?.initPreferences(historyUrl)\r\n                ninjaWebView?.goForward()\r\n            } else NinjaToast.show(this, R.string.toast_webview_forward)\r\n            \"03\" -> if (ninjaWebView?.canGoBack() == true) {\r\n                val mWebBackForwardList: WebBackForwardList? = ninjaWebView?.copyBackForwardList()\r\n                val historyUrl =\r\n                    mWebBackForwardList?.getItemAtIndex(mWebBackForwardList.currentIndex - 1)?.url\r\n                ninjaWebView?.initPreferences(historyUrl)\r\n                goBack_skipRedirects()\r\n            } else {\r\n                removeAlbum(currentAlbumController!!)\r\n            }\r\n            \"04\" -> ninjaWebView?.pageUp(true)\r\n            \"05\" -> ninjaWebView?.pageDown(true)\r\n            \"06\" -> nextAlbumController(false)?.let { showAlbum(it) }\r\n            \"07\" -> nextAlbumController(true)?.let { showAlbum(it) }\r\n            \"08\" -> showOverview()\r\n            \"09\" -> addAlbum(\r\n                getString(R.string.app_name), Objects.requireNonNull(\r\n                    sp!!.getString(\r\n                        \"favoriteURL\",\r\n                        \"https://github.com/scoute-dich/browser/blob/master/README.md\"\r\n                    )\r\n                ), true, false, \"\"\r\n            )\r\n            \"10\" -> removeAlbum(currentAlbumController!!)\r\n            \"11\" -> showTabView()\r\n            \"12\" -> shareLink(ninjaWebView?.getTitle(), ninjaWebView?.url)\r\n            \"13\" -> searchOnSite()\r\n            \"14\" -> saveBookmark()\r\n            \"15\" -> save_atHome(ninjaWebView?.getTitle(), ninjaWebView?.url)\r\n            \"16\" -> ninjaWebView?.reload()\r\n            \"17\" -> Objects.requireNonNull(\r\n                sp!!.getString(\r\n                    \"favoriteURL\",\r\n                    \"https://github.com/scoute-dich/browser/blob/master/README.md\"\r\n                )\r\n            )?.let {\r\n                ninjaWebView?.loadUrl(\r\n                    it\r\n                )\r\n            }\r\n            \"18\" -> {\r\n                bottom_navigation.setSelectedItemId(R.id.page_2)\r\n                showOverview()\r\n                show_dialogFilter()\r\n            }\r\n            \"19\" -> show_dialogFastToggle()\r\n            \"20\" -> {\r\n                ninjaWebView?.toggleNightMode()\r\n                isNightMode = ninjaWebView?.isNightMode == true\r\n            }\r\n            \"21\" -> ninjaWebView?.toggleDesktopMode(true)\r\n            \"22\" -> {\r\n                sp!!.edit().putBoolean(\"sp_screenOn\", !sp!!.getBoolean(\"sp_screenOn\", false))\r\n                    .apply()\r\n                saveOpenedTabs()\r\n                if (this != null) {\r\n                    HelperUnit.triggerRebirth(this)\r\n                }\r\n            }\r\n            \"23\" -> sp!!.edit()\r\n                .putBoolean(\"sp_audioBackground\", !sp!!.getBoolean(\"sp_audioBackground\", false))\r\n                .apply()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private fun initOverview() {\r\n        val intPage = AtomicInteger()\r\n        val navListener = label@ this?.let {\r\n            NavigationBarView.OnItemSelectedListener { menuItem: MenuItem ->\r\n                if (menuItem.itemId == R.id.page_1) {\r\n                    listOpenedTabs.setVisibility(View.GONE)\r\n                    list_overView.visibility = View.VISIBLE\r\n                    omnibox_overview.setImageResource(R.drawable.icon_web)\r\n                    overViewTab = getString(R.string.album_title_home)\r\n                    intPage.set(R.id.page_1)\r\n                    val action = RecordAction(this)\r\n                    action.open(false)\r\n                    val list: List<Record> = action.listStartSite(this)\r\n                    action.close()\r\n                    adapter = this?.let { RecordAdapter(it, list) }\r\n                    list_overView.adapter = adapter\r\n                    adapter?.notifyDataSetChanged()\r\n                    list_overView.onItemClickListener =\r\n                        OnItemClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                            if (list[position].type === BOOKMARK_ITEM || list[position]\r\n                                    .type === STARTSITE_ITEM\r\n                            ) {\r\n                                if (list[position].desktopMode != ninjaWebView?.isDesktopMode\r\n                                ) ninjaWebView?.toggleDesktopMode(false)\r\n                                if (list[position].nightMode == ninjaWebView?.isNightMode && !isNightMode\r\n                                ) {\r\n                                    ninjaWebView?.toggleNightMode()\r\n                                    isNightMode = ninjaWebView?.isNightMode == true\r\n                                }\r\n                            }\r\n                            list[position].uRL?.let { ninjaWebView?.loadUrl(it) }\r\n                            hideOverview()\r\n                        }\r\n                    list_overView.onItemLongClickListener =\r\n                        OnItemLongClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                            list[position].uRL?.let {\r\n                                list[position].title?.let { it1 ->\r\n                                    adapter?.let { it2 ->\r\n                                        showContextMenuList(\r\n                                            it1,\r\n                                            it,\r\n                                            it2,\r\n                                            ArrayList(list),\r\n                                            position\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                            true\r\n                        }\r\n                } else if (menuItem.itemId == R.id.page_2) {\r\n                    listOpenedTabs.setVisibility(View.GONE)\r\n                    list_overView.visibility = View.VISIBLE\r\n                    omnibox_overview.setImageResource(R.drawable.icon_bookmark)\r\n                    overViewTab = getString(R.string.album_title_bookmarks)\r\n                    intPage.set(R.id.page_2)\r\n                    val action = RecordAction(this)\r\n                    action.open(false)\r\n                    val list: List<Record>\r\n                    list = action.listBookmark(this, filter, filterBy)\r\n                    action.close()\r\n//                    adapter = this?.let { RecordAdapter(it, list) }\r\n                    adapter = object : RecordAdapter(it, list) {\r\n                        override fun getView(\r\n                            position: Int,\r\n                            convertView: View?,\r\n                            parent: ViewGroup\r\n                        ): View {\r\n                            val v: View = super.getView(position, convertView, parent)\r\n                            val record_item_icon =\r\n                                v.findViewById<ImageView>(R.id.record_item_icon)\r\n                            record_item_icon.visibility = View.VISIBLE\r\n                            return v\r\n                        }\r\n                    }\r\n                    list_overView.adapter = adapter\r\n                    adapter?.notifyDataSetChanged()\r\n                    filter = false\r\n                    list_overView.onItemClickListener =\r\n                        OnItemClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                            if (list[position].type === BOOKMARK_ITEM || list[position]\r\n                                    .type === STARTSITE_ITEM\r\n                            ) {\r\n                                if (list[position].desktopMode != ninjaWebView?.isDesktopMode\r\n                                ) ninjaWebView?.toggleDesktopMode(false)\r\n                                if (list[position].nightMode == ninjaWebView?.isNightMode && !isNightMode\r\n                                ) {\r\n                                    ninjaWebView?.toggleNightMode()\r\n                                    isNightMode = ninjaWebView?.isNightMode == true\r\n                                }\r\n                            }\r\n                            list[position].uRL?.let { ninjaWebView?.loadUrl(it) }\r\n                            hideOverview()\r\n                        }\r\n                    list_overView.onItemLongClickListener =\r\n                        OnItemLongClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                            list[position].uRL?.let {\r\n                                list[position].title?.let { it1 ->\r\n                                    adapter?.let { it2 ->\r\n                                        showContextMenuList(\r\n                                            it1,\r\n                                            it,\r\n                                            it2,\r\n                                            ArrayList(list),\r\n                                            position\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                            true\r\n                        }\r\n                } else if (menuItem.itemId == R.id.page_3) {\r\n                    listOpenedTabs.setVisibility(View.GONE)\r\n                    list_overView.visibility = View.VISIBLE\r\n                    omnibox_overview.setImageResource(R.drawable.icon_history)\r\n                    overViewTab = getString(R.string.album_title_history)\r\n                    intPage.set(R.id.page_3)\r\n                    val action = RecordAction(this)\r\n                    action.open(false)\r\n                    val list: List<Record>\r\n                    list = action.listHistory()\r\n                    action.close()\r\n                    adapter = object : RecordAdapter(this, list) {\r\n                        override fun getView(\r\n                            position: Int,\r\n                            convertView: View?,\r\n                            parent: ViewGroup\r\n                        ): View {\r\n                            val v: View = super.getView(position, convertView, parent)\r\n                            val record_item_time =\r\n                                v.findViewById<TextView>(R.id.record_item_time)\r\n                            record_item_time.visibility = View.VISIBLE\r\n                            return v\r\n                        }\r\n                    }\r\n                    list_overView.adapter = adapter\r\n                    adapter?.notifyDataSetChanged()\r\n                    list_overView.onItemClickListener =\r\n                        OnItemClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                            if (list[position].type === BOOKMARK_ITEM || list[position]\r\n                                    .type === STARTSITE_ITEM\r\n                            ) {\r\n                                if (list[position].desktopMode !== ninjaWebView?.isDesktopMode\r\n                                ) ninjaWebView?.toggleDesktopMode(false)\r\n                                if (list[position].nightMode === ninjaWebView?.isNightMode && !isNightMode\r\n                                ) {\r\n                                    ninjaWebView?.toggleNightMode()\r\n                                    isNightMode = ninjaWebView?.isNightMode == true\r\n                                }\r\n                            }\r\n                            list[position].uRL?.let { it1 -> ninjaWebView?.loadUrl(it1) }\r\n                            hideOverview()\r\n                        }\r\n                    list_overView.onItemLongClickListener =\r\n                        OnItemLongClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                            list[position].uRL?.let {\r\n                                list[position].title?.let { it1 ->\r\n                                    adapter?.let { it2 ->\r\n                                        showContextMenuList(\r\n                                            it1,\r\n                                            it,\r\n                                            it2,\r\n                                            ArrayList(list),\r\n                                            position\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                            true\r\n                        }\r\n                } else if (menuItem.itemId == R.id.page_4) {\r\n                    val popup = PopupMenu(\r\n                        this,\r\n                        bottom_navigation.findViewById<View>(R.id.page_2)\r\n                    )\r\n                    if (bottom_navigation.getSelectedItemId() == R.id.page_1) popup.inflate(R.menu.menu_list_start) else if (bottom_navigation.getSelectedItemId() == R.id.page_2) popup.inflate(\r\n                        R.menu.menu_list_bookmark\r\n                    ) else if (bottom_navigation.getSelectedItemId() == R.id.page_3) popup.inflate(R.menu.menu_list_history) else if (bottom_navigation.getSelectedItemId() == R.id.page_0) popup.inflate(\r\n                        R.menu.menu_list_tabs\r\n                    )\r\n                    popup.setOnMenuItemClickListener { item: MenuItem ->\r\n                        if (item.itemId == R.id.menu_delete) {\r\n                            val builder =\r\n                                MaterialAlertDialogBuilder(this!!)\r\n                            builder.setIcon(R.drawable.icon_alert)\r\n                            builder.setTitle(R.string.menu_delete)\r\n                            builder.setMessage(R.string.hint_database)\r\n                            builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                                if (overViewTab == getString(R.string.album_title_home)) {\r\n                                    BrowserUnit.clearHome(this)\r\n                                    bottom_navigation.setSelectedItemId(R.id.page_1)\r\n                                } else if (overViewTab == getString(R.string.album_title_bookmarks)) {\r\n                                    BrowserUnit.clearBookmark(this)\r\n                                    bottom_navigation.setSelectedItemId(R.id.page_2)\r\n                                } else if (overViewTab == getString(R.string.album_title_history)) {\r\n                                    BrowserUnit.clearHistory(this)\r\n                                    bottom_navigation.setSelectedItemId(R.id.page_3)\r\n                                }\r\n                            }\r\n                            builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n                            val dialog = builder.create()\r\n                            dialog.show()\r\n                            HelperUnit.setupDialog(this, dialog)\r\n                        } else if (item.itemId == R.id.menu_sortName) {\r\n                            if (overViewTab == getString(R.string.album_title_bookmarks)) {\r\n                                sp!!.edit().putString(\"sort_bookmark\", \"title\").apply()\r\n                                bottom_navigation.setSelectedItemId(R.id.page_2)\r\n                            } else if (overViewTab == getString(R.string.album_title_home)) {\r\n                                sp!!.edit().putString(\"sort_startSite\", \"title\").apply()\r\n                                bottom_navigation.setSelectedItemId(R.id.page_1)\r\n                            }\r\n                        } else if (item.itemId == R.id.menu_sortIcon) {\r\n                            sp!!.edit().putString(\"sort_bookmark\", \"time\").apply()\r\n                            bottom_navigation.setSelectedItemId(R.id.page_2)\r\n                        } else if (item.itemId == R.id.menu_sortDate) {\r\n                            sp!!.edit().putString(\"sort_startSite\", \"ordinal\").apply()\r\n                            bottom_navigation.setSelectedItemId(R.id.page_1)\r\n                        } else if (item.itemId == R.id.menu_filter) {\r\n                            show_dialogFilter()\r\n                        } else if (item.itemId == R.id.menu_help) {\r\n                            val webpage =\r\n                                Uri.parse(\"https://github.com/scoute-dich/browser/wiki/Overview\")\r\n                            BrowserUnit.intentURL(this, webpage)\r\n                        }\r\n                        true\r\n                    }\r\n                    popup.show()\r\n                    popup.setOnDismissListener { v: PopupMenu? ->\r\n                        if (intPage.toInt() == R.id.page_1) bottom_navigation.setSelectedItemId(\r\n                            R.id.page_1\r\n                        ) else if (intPage.toInt() == R.id.page_2) bottom_navigation.setSelectedItemId(R.id.page_2) else if (intPage.toInt() == R.id.page_3) bottom_navigation.setSelectedItemId(\r\n                            R.id.page_3\r\n                        ) else if (intPage.toInt() == R.id.page_0) bottom_navigation.setSelectedItemId(R.id.page_0)\r\n                    }\r\n                } else if (menuItem.itemId == R.id.page_0) {\r\n                    intPage.set(R.id.page_0)\r\n                    listOpenedTabs.setVisibility(View.VISIBLE)\r\n                    list_overView.visibility = View.GONE\r\n                }\r\n                true\r\n            }\r\n        }\r\n        bottom_navigation.setOnItemSelectedListener(navListener)\r\n        bottom_navigation.findViewById<View>(R.id.page_2).setOnLongClickListener(\r\n            OnLongClickListener { v: View? ->\r\n                show_dialogFilter()\r\n                true\r\n            })\r\n        setSelectedTab()\r\n    }\r\n\r\n    private fun initSearchPanel() {\r\n//        searchPanel = findViewById<RelativeLayout>(R.id.searchBox)\r\n//        searchBox = findViewById<EditText>(R.id.searchBox_input)\r\n        val searchUp = findViewById<Button>(R.id.searchBox_up)\r\n        val searchDown = findViewById<Button>(R.id.searchBox_down)\r\n        val searchCancel = findViewById<Button>(R.id.searchBox_cancel)\r\n        searchBox_input.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable) {\r\n                if (currentAlbumController != null) (currentAlbumController as NinjaWebView).findAllAsync(\r\n                    s.toString()\r\n                )\r\n            }\r\n        })\r\n        searchUp.setOnClickListener { v: View? ->\r\n            (currentAlbumController as NinjaWebView).findNext(\r\n                false\r\n            )\r\n        }\r\n        searchDown.setOnClickListener { v: View? ->\r\n            (currentAlbumController as NinjaWebView).findNext(\r\n                true\r\n            )\r\n        }\r\n        searchCancel.setOnClickListener { v: View? ->\r\n            if ((searchBox_input.getText()?.length ?: 0) > 0) searchBox_input.setText(\"\") else {\r\n                searchOnSite = false\r\n                HelperUnit.hideSoftKeyboard(searchBox_input, this)\r\n                searchBox.setVisibility(View.GONE)\r\n                omniBox.setVisibility(View.VISIBLE)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun show_dialogFastToggle() {\r\n        listTrusted = List_trusted(this)\r\n        listStandard = List_standard(this)\r\n        listProtected = List_protected(this)\r\n        ninjaWebView = currentAlbumController as NinjaWebView\r\n        val url: String? = ninjaWebView?.url\r\n        val builder = MaterialAlertDialogBuilder(this)\r\n        val dialogView = View.inflate(this, R.layout.dialog_toggle, null)\r\n        builder.setView(dialogView)\r\n        FaviconHelper.setFavicon(\r\n            this,\r\n            dialogView,\r\n            ninjaWebView?.url,\r\n            R.id.menu_icon,\r\n            R.drawable.icon_image_broken\r\n        )\r\n        val chip_profile_standard: Chip = dialogView.findViewById(R.id.chip_profile_standard)\r\n        val chip_profile_trusted: Chip = dialogView.findViewById(R.id.chip_profile_trusted)\r\n        val chip_profile_changed: Chip = dialogView.findViewById(R.id.chip_profile_changed)\r\n        val chip_profile_protected: Chip = dialogView.findViewById(R.id.chip_profile_protected)\r\n        val dialog_title = dialogView.findViewById<TextView>(R.id.dialog_title)\r\n        dialog_title.setText(HelperUnit.domain(url))\r\n        val dialog_warning = dialogView.findViewById<TextView>(R.id.dialog_warning)\r\n        val warning = getString(R.string.profile_warning) + \" \" + HelperUnit.domain(url)\r\n        dialog_warning.text = warning\r\n        val dialog_titleProfile = dialogView.findViewById<TextView>(R.id.dialog_titleProfile)\r\n        ninjaWebView?.putProfileBoolean(\r\n            \"\",\r\n            dialog_titleProfile,\r\n            chip_profile_trusted,\r\n            chip_profile_standard,\r\n            chip_profile_protected,\r\n            chip_profile_changed\r\n        )\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        Objects.requireNonNull(dialog.window)?.setGravity(Gravity.BOTTOM)\r\n\r\n        //ProfileControl\r\n        val chip_setProfileTrusted: Chip = dialogView.findViewById(R.id.chip_setProfileTrusted)\r\n        chip_setProfileTrusted.isChecked = listTrusted?.isWhite(url) == true\r\n        chip_setProfileTrusted.setOnClickListener { v: View? ->\r\n            if (listTrusted?.isWhite(ninjaWebView?.url) == true) listTrusted?.removeDomain(\r\n                HelperUnit.domain(\r\n                    url\r\n                )\r\n            ) else {\r\n                listTrusted?.addDomain(HelperUnit.domain(url))\r\n                listStandard?.removeDomain(HelperUnit.domain(url))\r\n                listProtected?.removeDomain(HelperUnit.domain(url))\r\n            }\r\n            ninjaWebView?.reload()\r\n            dialog.cancel()\r\n        }\r\n        chip_setProfileTrusted.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_profiles_trustedList),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        val chip_setProfileProtected: Chip = dialogView.findViewById(R.id.chip_setProfileProtected)\r\n        chip_setProfileProtected.isChecked = listProtected?.isWhite(url) == true\r\n        chip_setProfileProtected.setOnClickListener { v: View? ->\r\n            if (listProtected?.isWhite(ninjaWebView?.url) == true) listProtected?.removeDomain(\r\n                HelperUnit.domain(\r\n                    url\r\n                )\r\n            ) else {\r\n                listProtected?.addDomain(HelperUnit.domain(url))\r\n                listTrusted?.removeDomain(HelperUnit.domain(url))\r\n                listStandard?.removeDomain(HelperUnit.domain(url))\r\n            }\r\n            ninjaWebView?.reload()\r\n            dialog.cancel()\r\n        }\r\n        chip_setProfileProtected.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_profiles_protectedList),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        val chip_setProfileStandard: Chip = dialogView.findViewById(R.id.chip_setProfileStandard)\r\n        chip_setProfileStandard.isChecked = listStandard?.isWhite(url) == true\r\n        chip_setProfileStandard.setOnClickListener { v: View? ->\r\n            if (listStandard?.isWhite(ninjaWebView?.url) == true) listStandard?.removeDomain(\r\n                HelperUnit.domain(\r\n                    url\r\n                )\r\n            ) else {\r\n                listStandard?.addDomain(HelperUnit.domain(url))\r\n                listTrusted?.removeDomain(HelperUnit.domain(url))\r\n                listProtected?.removeDomain(HelperUnit.domain(url))\r\n            }\r\n            ninjaWebView?.reload()\r\n            dialog.cancel()\r\n        }\r\n        chip_setProfileStandard.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_profiles_standardList),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        chip_profile_trusted.isChecked =\r\n            sp!!.getString(\"profile\", \"profileTrusted\") == \"profileTrusted\"\r\n        chip_profile_trusted.setOnClickListener { v: View? ->\r\n            sp!!.edit().putString(\"profile\", \"profileTrusted\").apply()\r\n            ninjaWebView?.reload()\r\n            dialog.cancel()\r\n        }\r\n        chip_profile_trusted.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_profiles_trusted),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        chip_profile_standard.isChecked =\r\n            sp!!.getString(\"profile\", \"profileTrusted\") == \"profileStandard\"\r\n        chip_profile_standard.setOnClickListener { v: View? ->\r\n            sp!!.edit().putString(\"profile\", \"profileStandard\").apply()\r\n            ninjaWebView?.reload()\r\n            dialog.cancel()\r\n        }\r\n        chip_profile_standard.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_profiles_standard),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        chip_profile_protected.isChecked =\r\n            sp!!.getString(\"profile\", \"profileTrusted\") == \"profileProtected\"\r\n        chip_profile_protected.setOnClickListener { v: View? ->\r\n            sp!!.edit().putString(\"profile\", \"profileProtected\").apply()\r\n            ninjaWebView?.reload()\r\n            dialog.cancel()\r\n        }\r\n        chip_profile_protected.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_profiles_protected),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        chip_profile_changed.isChecked =\r\n            sp!!.getString(\"profile\", \"profileTrusted\") == \"profileChanged\"\r\n        chip_profile_changed.setOnClickListener { v: View? ->\r\n            sp!!.edit().putString(\"profile\", \"profileChanged\").apply()\r\n            ninjaWebView?.reload()\r\n            dialog.cancel()\r\n        }\r\n        chip_profile_changed.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_profiles_changed),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        // CheckBox\r\n        val chip_image: Chip = dialogView.findViewById(R.id.chip_image)\r\n        chip_image.isChecked = ninjaWebView?.getBoolean(\"_images\") == true\r\n        chip_image.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.setting_title_images), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_image.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_images\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_javaScript: Chip = dialogView.findViewById(R.id.chip_javaScript)\r\n        chip_javaScript.isChecked = ninjaWebView?.getBoolean(\"_javascript\") == true\r\n        chip_javaScript.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_javascript),\r\n                Toast.LENGTH_SHORT\r\n            )\r\n                .show()\r\n            true\r\n        }\r\n        chip_javaScript.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_javascript\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_javaScriptPopUp: Chip = dialogView.findViewById(R.id.chip_javaScriptPopUp)\r\n        chip_javaScriptPopUp.isChecked = ninjaWebView?.getBoolean(\"_javascriptPopUp\") == true\r\n        chip_javaScriptPopUp.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_javascript_popUp),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        chip_javaScriptPopUp.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_javascriptPopUp\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_cookie: Chip = dialogView.findViewById(R.id.chip_cookie)\r\n        chip_cookie.isChecked = ninjaWebView?.getBoolean(\"_cookies\") == true\r\n        chip_cookie.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.setting_title_cookie), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_cookie.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_cookies\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_fingerprint: Chip = dialogView.findViewById(R.id.chip_Fingerprint)\r\n        chip_fingerprint.isChecked = ninjaWebView?.getBoolean(\"_fingerPrintProtection\") == true\r\n        chip_fingerprint.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_fingerPrint),\r\n                Toast.LENGTH_SHORT\r\n            )\r\n                .show()\r\n            true\r\n        }\r\n        chip_fingerprint.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_fingerPrintProtection\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_adBlock: Chip = dialogView.findViewById(R.id.chip_adBlock)\r\n        chip_adBlock.isChecked = ninjaWebView?.getBoolean(\"_adBlock\") == true\r\n        chip_adBlock.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.setting_title_adblock), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_adBlock.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_adBlock\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_saveData: Chip = dialogView.findViewById(R.id.chip_saveData)\r\n        chip_saveData.isChecked = ninjaWebView?.getBoolean(\"_saveData\") == true\r\n        chip_saveData.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.setting_title_save_data), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_saveData.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_saveData\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_history: Chip = dialogView.findViewById(R.id.chip_history)\r\n        chip_history.isChecked = ninjaWebView?.getBoolean(\"_saveHistory\") == true\r\n        chip_history.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.album_title_history), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_history.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_saveHistory\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_location: Chip = dialogView.findViewById(R.id.chip_location)\r\n        chip_location.isChecked = ninjaWebView?.getBoolean(\"_location\") == true\r\n        chip_location.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.setting_title_location), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_location.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_location\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_microphone: Chip = dialogView.findViewById(R.id.chip_microphone)\r\n        chip_microphone.isChecked = ninjaWebView?.getBoolean(\"_microphone\") == true\r\n        chip_microphone.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_microphone),\r\n                Toast.LENGTH_SHORT\r\n            )\r\n                .show()\r\n            true\r\n        }\r\n        chip_microphone.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_microphone\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_camera: Chip = dialogView.findViewById(R.id.chip_camera)\r\n        chip_camera.isChecked = ninjaWebView?.getBoolean(\"_camera\") == true\r\n        chip_camera.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.setting_title_camera), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_camera.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_camera\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        val chip_dom: Chip = dialogView.findViewById(R.id.chip_dom)\r\n        chip_dom.isChecked = ninjaWebView?.getBoolean(\"_dom\") == true\r\n        chip_dom.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.setting_title_dom), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_dom.setOnClickListener { v: View? ->\r\n            ninjaWebView?.setProfileChanged()\r\n            ninjaWebView?.putProfileBoolean(\r\n                \"_dom\",\r\n                dialog_titleProfile,\r\n                chip_profile_trusted,\r\n                chip_profile_standard,\r\n                chip_profile_protected,\r\n                chip_profile_changed\r\n            )\r\n        }\r\n        if (listTrusted?.isWhite(url) == true || listStandard?.isWhite(url) == true || listProtected?.isWhite(url) == true) {\r\n            dialog_warning.visibility = View.VISIBLE\r\n            chip_image.isEnabled = false\r\n            chip_adBlock.isEnabled = false\r\n            chip_saveData.isEnabled = false\r\n            chip_location.isEnabled = false\r\n            chip_camera.isEnabled = false\r\n            chip_microphone.isEnabled = false\r\n            chip_history.isEnabled = false\r\n            chip_fingerprint.isEnabled = false\r\n            chip_cookie.isEnabled = false\r\n            chip_javaScript.isEnabled = false\r\n            chip_javaScriptPopUp.isEnabled = false\r\n            chip_dom.isEnabled = false\r\n        }\r\n        val chip_toggleNightView: Chip = dialogView.findViewById(R.id.chip_toggleNightView)\r\n        chip_toggleNightView.isChecked = ninjaWebView?.isNightMode == true\r\n        chip_toggleNightView.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.menu_nightView), Toast.LENGTH_SHORT).show()\r\n            true\r\n        }\r\n        chip_toggleNightView.setOnClickListener { v: View? ->\r\n            ninjaWebView?.toggleNightMode()\r\n            isNightMode = ninjaWebView?.isNightMode == true\r\n            dialog.cancel()\r\n        }\r\n        val chip_toggleDesktop: Chip = dialogView.findViewById(R.id.chip_toggleDesktop)\r\n        chip_toggleDesktop.isChecked = ninjaWebView?.isDesktopMode == true\r\n        chip_toggleDesktop.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.menu_desktopView), Toast.LENGTH_SHORT).show()\r\n            true\r\n        }\r\n        chip_toggleDesktop.setOnClickListener { v: View? ->\r\n            ninjaWebView?.toggleDesktopMode(true)\r\n            dialog.cancel()\r\n        }\r\n        val chip_toggleScreenOn: Chip = dialogView.findViewById(R.id.chip_toggleScreenOn)\r\n        chip_toggleScreenOn.isChecked = sp!!.getBoolean(\"sp_screenOn\", false)\r\n        chip_toggleScreenOn.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(this, getString(R.string.setting_title_screenOn), Toast.LENGTH_SHORT)\r\n                .show()\r\n            true\r\n        }\r\n        chip_toggleScreenOn.setOnClickListener { v: View? ->\r\n            sp!!.edit().putBoolean(\"sp_screenOn\", !sp!!.getBoolean(\"sp_screenOn\", false)).apply()\r\n            saveOpenedTabs()\r\n            HelperUnit.triggerRebirth(this)\r\n            dialog.cancel()\r\n        }\r\n        val chip_toggleAudioBackground: Chip =\r\n            dialogView.findViewById(R.id.chip_toggleAudioBackground)\r\n        chip_toggleAudioBackground.isChecked = sp!!.getBoolean(\"sp_audioBackground\", false)\r\n        chip_toggleAudioBackground.setOnLongClickListener { view: View? ->\r\n            Toast.makeText(\r\n                this,\r\n                getString(R.string.setting_title_audioBackground),\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            true\r\n        }\r\n        chip_toggleAudioBackground.setOnClickListener { v: View? ->\r\n            sp!!.edit()\r\n                .putBoolean(\"sp_audioBackground\", !sp!!.getBoolean(\"sp_audioBackground\", false))\r\n                .apply()\r\n            dialog.cancel()\r\n        }\r\n        val ib_reload = dialogView.findViewById<Button>(R.id.ib_reload)\r\n        ib_reload.setOnClickListener { view: View? ->\r\n            if (ninjaWebView != null) {\r\n                dialog.cancel()\r\n                ninjaWebView?.reload()\r\n            }\r\n        }\r\n        val ib_settings = dialogView.findViewById<Button>(R.id.ib_settings)\r\n        ib_settings.setOnClickListener { view: View? ->\r\n            if (ninjaWebView != null) {\r\n                dialog.cancel()\r\n//                val settings = Intent(this@BrowserActivity, Settings_Activity::class.java)\r\n//                startActivity(settings)\r\n            }\r\n        }\r\n        val button_help = dialogView.findViewById<Button>(R.id.button_help)\r\n        button_help.setOnClickListener { view: View? ->\r\n            dialog.cancel()\r\n            val webpage =\r\n                Uri.parse(\"https://github.com/scoute-dich/browser/wiki/Fast-Toggle-Dialog\")\r\n            BrowserUnit.intentURL(this, webpage)\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private fun setWebView(title: String?, url: String?, foreground: Boolean) {\r\n        ninjaWebView = NinjaWebView(this)\r\n        if (Objects.requireNonNull(sp!!.getString(\"saved_key_ok\", \"no\")) == \"no\") {\r\n            sp!!.edit().putString(\"saved_key_ok\", \"yes\")\r\n                .putString(\"setting_gesture_tb_up\", \"08\")\r\n                .putString(\"setting_gesture_tb_down\", \"01\")\r\n                .putString(\"setting_gesture_tb_left\", \"07\")\r\n                .putString(\"setting_gesture_tb_right\", \"06\")\r\n                .putString(\"setting_gesture_nav_up\", \"04\")\r\n                .putString(\"setting_gesture_nav_down\", \"05\")\r\n                .putString(\"setting_gesture_nav_left\", \"03\")\r\n                .putString(\"setting_gesture_nav_right\", \"02\")\r\n                .putString(\"setting_gesture_nav_left\", \"03\")\r\n                .putString(\"setting_gesture_tabButton\", \"19\")\r\n                .putString(\"setting_gesture_overViewButton\", \"18\")\r\n                .putBoolean(\"sp_autofill\", true)\r\n                .putString(\"setting_gesture_tabButton\", \"19\")\r\n                .putString(\"setting_gesture_overViewButton\", \"18\")\r\n                .apply()\r\n            ninjaWebView?.setProfileDefaultValues()\r\n        }\r\n        if (isNightMode) {\r\n            ninjaWebView?.toggleNightMode()\r\n            isNightMode = ninjaWebView?.isNightMode == true\r\n        }\r\n        ninjaWebView?.setBrowserController(this)\r\n        ninjaWebView?.setAlbumTitle(title, url)\r\n        this.registerForContextMenu(ninjaWebView)\r\n        val swipeTouchListener: SwipeTouchListener\r\n        swipeTouchListener = object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeBottom() {\r\n                if (sp!!.getBoolean(\"sp_swipeToReload\", true)) ninjaWebView?.reload()\r\n                if (sp!!.getBoolean(\"hideToolbar\", true)) {\r\n                    if (animation == null || !animation!!.isRunning()) {\r\n                        animation = ObjectAnimator.ofFloat(bottomAppBar, \"translationY\", 0f)\r\n                        animation?.setDuration(\r\n                            resources.getInteger(android.R.integer.config_shortAnimTime).toLong()\r\n                        )\r\n                        animation?.start()\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onSwipeTop() {\r\n                if (!ninjaWebView?.canScrollVertically(0)!! && sp!!.getBoolean(\"hideToolbar\", true)) {\r\n                    if (animation == null || !animation?.isRunning()!!) {\r\n                        animation = ObjectAnimator.ofFloat(\r\n                            bottomAppBar,\r\n                            \"translationY\",\r\n                            bottomAppBar.getHeight().toFloat()\r\n                        )\r\n                        animation?.setDuration(\r\n                            resources.getInteger(android.R.integer.config_shortAnimTime).toLong()\r\n                        )\r\n                        animation?.start()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ninjaWebView?.setOnTouchListener(swipeTouchListener)\r\n        ninjaWebView!!.setOnScrollChangeListener { _, _, scrollY, _, oldScrollY ->\r\n            if (!searchOnSite) {\r\n                if (sp!!.getBoolean(\"hideToolbar\", true)) {\r\n                    if (scrollY > oldScrollY) {\r\n                        if (animation == null || !animation!!.isRunning) {\r\n                            animation = ObjectAnimator.ofFloat(\r\n                                bottomAppBar,\r\n                                \"translationY\",\r\n                                bottomAppBar.height.toFloat()\r\n                            )\r\n                            animation?.setDuration(\r\n                                resources.getInteger(android.R.integer.config_shortAnimTime)\r\n                                    .toLong()\r\n                            )\r\n                            animation?.start()\r\n                        }\r\n                    } else if (scrollY < oldScrollY) {\r\n                        if (animation == null || !animation!!.isRunning) {\r\n                            animation = ObjectAnimator.ofFloat(bottomAppBar, \"translationY\", 0f)\r\n                            animation?.setDuration(\r\n                                resources.getInteger(android.R.integer.config_shortAnimTime)\r\n                                    .toLong()\r\n                            )\r\n                            animation?.start()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (scrollY == 0) ninjaWebView!!.setOnTouchListener(swipeTouchListener) else ninjaWebView!!.setOnTouchListener(\r\n                null\r\n            )\r\n        }\r\n        if (url!!.isEmpty()) ninjaWebView?.loadUrl(\"about:blank\") else ninjaWebView?.loadUrl(url)\r\n        if (currentAlbumController != null) {\r\n            ninjaWebView?.predecessor = currentAlbumController\r\n            //save currentAlbumController and use when TAB is closed via Back button\r\n            val index: Int = BrowserContainer.indexOf(currentAlbumController!!) + 1\r\n            BrowserContainer.add(ninjaWebView!!, index)\r\n        } else BrowserContainer.add(ninjaWebView!!)\r\n        if (!foreground) ninjaWebView?.deactivate() else {\r\n            ninjaWebView?.activate()\r\n            showAlbum(ninjaWebView!!)\r\n            if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.P) ninjaWebView?.reload()\r\n        }\r\n        val albumView: View? = ninjaWebView?.albumView\r\n        if(albumView != null) {\r\n            listOpenedTabs?.addView(\r\n                albumView,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT,\r\n                LinearLayout.LayoutParams.WRAP_CONTENT\r\n            )\r\n        }\r\n        updateOmniBox()\r\n    }\r\n\r\n    @Synchronized\r\n    private fun addAlbum(\r\n        title: String?,\r\n        url: String?,\r\n        foreground: Boolean,\r\n        profileDialog: Boolean,\r\n        profile: String\r\n    ) {\r\n\r\n        //restoreProfile from shared preferences if app got killed\r\n        if (profile != \"\") sp!!.edit().putString(\"profile\", profile).apply()\r\n        if (profileDialog) {\r\n            val item_01 = GridItem(\r\n                R.drawable.icon_profile_trusted,\r\n                getString(R.string.setting_title_profiles_trusted),\r\n                11\r\n            )\r\n            val item_02 = GridItem(\r\n                R.drawable.icon_profile_standard,\r\n                getString(R.string.setting_title_profiles_standard),\r\n                11\r\n            )\r\n            val item_03 = GridItem(\r\n                R.drawable.icon_profile_protected,\r\n                getString(R.string.setting_title_profiles_protected),\r\n                11\r\n            )\r\n            val builder = MaterialAlertDialogBuilder(this!!)\r\n            val dialogView = View.inflate(this, R.layout.dialog_menu, null)\r\n            builder.setView(dialogView)\r\n            val dialog = builder.create()\r\n            FaviconHelper.setFavicon(this, dialogView, url, R.id.menu_icon, R.drawable.icon_link)\r\n            val dialog_title = dialogView.findViewById<TextView>(R.id.menuTitle)\r\n            dialog_title.text = url\r\n            dialog.show()\r\n            Objects.requireNonNull(dialog.window)?.setGravity(Gravity.BOTTOM)\r\n            val menu_grid = dialogView.findViewById<GridView>(R.id.menu_grid)\r\n            val gridList: ArrayList<GridItem> = arrayListOf<GridItem>()\r\n            gridList.add(gridList.size, item_01)\r\n            gridList.add(gridList.size, item_02)\r\n            gridList.add(gridList.size, item_03)\r\n            val gridAdapter = GridAdapter(this, gridList)\r\n            menu_grid.adapter = gridAdapter\r\n            gridAdapter.notifyDataSetChanged()\r\n            menu_grid.onItemClickListener =\r\n                OnItemClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                    when (position) {\r\n                        0 -> sp!!.edit().putString(\"profile\", \"profileTrusted\").apply()\r\n                        1 -> sp!!.edit().putString(\"profile\", \"profileStandard\").apply()\r\n                        2 -> sp!!.edit().putString(\"profile\", \"profileProtected\").apply()\r\n                    }\r\n                    dialog.cancel()\r\n                    setWebView(title, url, foreground)\r\n                }\r\n        } else setWebView(title, url, foreground)\r\n    }\r\n\r\n    private fun closeTabConfirmation(okAction: Runnable) {\r\n        if (!sp!!.getBoolean(\"sp_close_tab_confirm\", false)) okAction.run() else {\r\n            val builder = MaterialAlertDialogBuilder(this!!)\r\n            builder.setTitle(R.string.menu_closeTab)\r\n            builder.setIcon(R.drawable.icon_alert)\r\n            builder.setMessage(R.string.toast_quit_TAB)\r\n            builder.setPositiveButton(R.string.app_ok) { dialog, whichButton -> okAction.run() }\r\n            builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n            val dialog = builder.create()\r\n            dialog.show()\r\n            HelperUnit.setupDialog(this, dialog)\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    override fun removeAlbum(albumController: AlbumController) {\r\n        if (BrowserContainer.size() <= 1) {\r\n            if (!sp!!.getBoolean(\"sp_reopenLastTab\", false)) {\r\n                doubleTapsQuit()\r\n            } else {\r\n                Objects.requireNonNull(\r\n                    sp!!.getString(\r\n                        \"favoriteURL\",\r\n                        \"https://github.com/scoute-dich/browser/blob/master/README.md\"\r\n                    )\r\n                )?.let {\r\n                    ninjaWebView?.loadUrl(\r\n                        it\r\n                    )\r\n                }\r\n                hideOverview()\r\n            }\r\n        } else {\r\n            closeTabConfirmation {\r\n                val predecessor: AlbumController?\r\n                predecessor =\r\n                    if (albumController === currentAlbumController) (albumController as NinjaWebView).predecessor else currentAlbumController\r\n                //if not the current TAB is being closed return to current TAB\r\n                listOpenedTabs.removeView(albumController.albumView)\r\n                var index: Int = BrowserContainer.indexOf(albumController)\r\n                BrowserContainer.remove(albumController)\r\n                if (predecessor != null && BrowserContainer.indexOf(predecessor) != -1) {\r\n                    //if predecessor is stored and has not been closed in the meantime\r\n                    showAlbum(predecessor)\r\n                } else {\r\n                    if (index >= BrowserContainer.size()) index = BrowserContainer.size() - 1\r\n                    showAlbum(BrowserContainer.get(index))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"UnsafeExperimentalUsageError\", \"UnsafeOptInUsageError\")\r\n    private fun updateOmniBox() {\r\n        badgeDrawable?.setNumber(BrowserContainer.size())\r\n        badgeDrawable?.let { BadgeUtils.attachBadgeDrawable(it, omniBox_tab, findViewById(androidx.constraintlayout.widget.R.id.layout)) }\r\n        omniBox_input.clearFocus()\r\n        ninjaWebView = currentAlbumController as NinjaWebView\r\n        val url: String? = ninjaWebView?.url\r\n        if (url != null) {\r\n            main_progress_bar.setVisibility(View.GONE)\r\n            ninjaWebView?.setProfileIcon(omniBox_tab)\r\n            ninjaWebView?.initCookieManager(url)\r\n            if (Objects.requireNonNull(ninjaWebView?.getTitle())?.isEmpty() == true) \r\n                omniBox_input.setText(url) else omniBox_input.setText(ninjaWebView?.getTitle())\r\n            if (url.startsWith(\"https://\")) omniBox_tab.setOnClickListener(View.OnClickListener { v: View? -> showTabView() }) else if (url.isEmpty()) {\r\n                omniBox_tab.setOnClickListener(View.OnClickListener { v: View? -> showTabView() })\r\n                omniBox_input.setText(\"\")\r\n            } else {\r\n                omniBox_tab.setImageResource(R.drawable.icon_alert)\r\n                omniBox_tab.setOnClickListener(View.OnClickListener { v: View? ->\r\n                    val builder = MaterialAlertDialogBuilder(\r\n                        this!!\r\n                    )\r\n                    builder.setIcon(R.drawable.icon_alert)\r\n                    builder.setTitle(R.string.app_warning)\r\n                    builder.setMessage(R.string.toast_unsecured)\r\n                    builder.setPositiveButton(R.string.app_ok) { dialog, whichButton ->\r\n                        ninjaWebView?.loadUrl(\r\n                            url.replace(\"http://\", \"https://\")\r\n                        )\r\n                    }\r\n                    builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton ->\r\n                        dialog.cancel()\r\n                        omniBox_tab.setOnClickListener(View.OnClickListener { v2: View? -> showTabView() })\r\n                    }\r\n                    val dialog = builder.create()\r\n                    dialog.show()\r\n                    HelperUnit.setupDialog(this, dialog)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig!!)\r\n        if (!orientationChanged) {\r\n            saveOpenedTabs()\r\n            HelperUnit.triggerRebirth(this)\r\n        } else orientationChanged = false\r\n    }\r\n\r\n    @Synchronized\r\n    override fun updateProgress(progress: Int) {\r\n        main_progress_bar.setOnClickListener(View.OnClickListener { v: View? -> ninjaWebView?.stopLoading() })\r\n        main_progress_bar.setProgressCompat(progress, true)\r\n        if (progress != BrowserUnit.LOADING_STOPPED) updateOmniBox()\r\n        if (progress < BrowserUnit.PROGRESS_MAX) main_progress_bar.setVisibility(View.VISIBLE)\r\n    }\r\n\r\n    override fun showFileChooser(filePathCallback: ValueCallback<Array<Uri>>) {\r\n        mFilePathCallback?.onReceiveValue(null)\r\n        mFilePathCallback = filePathCallback\r\n        val contentSelectionIntent = Intent(Intent.ACTION_GET_CONTENT)\r\n        contentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE)\r\n        contentSelectionIntent.type = \"*/*\"\r\n        val chooserIntent = Intent(Intent.ACTION_CHOOSER)\r\n        chooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent)\r\n        startActivityForResult(\r\n            chooserIntent,\r\n            INPUT_FILE_REQUEST_CODE\r\n        )\r\n    }\r\n\r\n    override fun onShowCustomView(view: View?, callback: CustomViewCallback) {\r\n        if (view == null) return\r\n        if (customView != null && callback != null) {\r\n            callback.onCustomViewHidden()\r\n            return\r\n        }\r\n        customView = view\r\n        fullscreenHolder = FrameLayout(this!!)\r\n        fullscreenHolder?.addView(\r\n            customView,\r\n            FrameLayout.LayoutParams(\r\n                FrameLayout.LayoutParams.MATCH_PARENT,\r\n                FrameLayout.LayoutParams.MATCH_PARENT\r\n            )\r\n        )\r\n        val decorView = window.decorView as FrameLayout\r\n        decorView.addView(\r\n            fullscreenHolder,\r\n            FrameLayout.LayoutParams(\r\n                FrameLayout.LayoutParams.MATCH_PARENT,\r\n                FrameLayout.LayoutParams.MATCH_PARENT\r\n            )\r\n        )\r\n        customView!!.setKeepScreenOn(true)\r\n        (currentAlbumController as View).visibility = View.GONE\r\n        setCustomFullscreen(true)\r\n        if (view is FrameLayout) {\r\n            if (view.focusedChild is VideoView) {\r\n                videoView = view.focusedChild as VideoView\r\n                videoView?.setOnErrorListener(VideoCompletionListener())\r\n                videoView?.setOnCompletionListener(VideoCompletionListener())\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onHideCustomView() {\r\n        val decorView = window.decorView as FrameLayout\r\n        decorView.removeView(fullscreenHolder)\r\n        customView?.setKeepScreenOn(false)\r\n        (currentAlbumController as View).visibility = View.VISIBLE\r\n        setCustomFullscreen(false)\r\n        fullscreenHolder = null\r\n        customView = null\r\n        if (videoView != null) {\r\n            videoView?.setOnErrorListener(null)\r\n            videoView?.setOnCompletionListener(null)\r\n            videoView = null\r\n        }\r\n        main_content.requestFocus()\r\n    }\r\n\r\n    fun showContextMenuLink(title: String?, url: String?, type: Int) {\r\n        val builder = MaterialAlertDialogBuilder(this!!)\r\n        val dialogView = View.inflate(this, R.layout.dialog_menu, null)\r\n        val menuTitle = dialogView.findViewById<TextView>(R.id.menuTitle)\r\n        menuTitle.text = url\r\n        val menu_icon = dialogView.findViewById<ImageView>(R.id.menu_icon)\r\n        if (type == HitTestResult.SRC_ANCHOR_TYPE) {\r\n            val faviconHelper = FaviconHelper(this)\r\n            val bitmap: Bitmap? = faviconHelper.getFavicon(url)\r\n            if (bitmap != null) menu_icon.setImageBitmap(bitmap) else menu_icon.setImageResource(R.drawable.icon_link)\r\n        } else if (type == HitTestResult.IMAGE_TYPE) menu_icon.setImageResource(R.drawable.icon_image_favicon) else menu_icon.setImageResource(\r\n            R.drawable.icon_link\r\n        )\r\n        builder.setView(dialogView)\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        Objects.requireNonNull(dialog.window)?.setGravity(Gravity.BOTTOM)\r\n        val item_01 = GridItem(0, getString(R.string.main_menu_new_tabOpen), 0)\r\n        val item_02 = GridItem(0, getString(R.string.main_menu_new_tab), 0)\r\n        val item_03 = GridItem(0, getString(R.string.main_menu_new_tabProfile), 0)\r\n        val item_04 = GridItem(0, getString(R.string.menu_share_link), 0)\r\n        val item_05 = GridItem(0, getString(R.string.menu_open_with), 0)\r\n        val item_06 = GridItem(0, getString(R.string.menu_save_as), 0)\r\n        val item_07 = GridItem(0, getString(R.string.menu_save_home), 0)\r\n        val gridList: ArrayList<GridItem> = arrayListOf<GridItem>()\r\n        gridList.add(gridList.size, item_01)\r\n        gridList.add(gridList.size, item_02)\r\n        gridList.add(gridList.size, item_03)\r\n        gridList.add(gridList.size, item_04)\r\n        gridList.add(gridList.size, item_05)\r\n        gridList.add(gridList.size, item_06)\r\n        gridList.add(gridList.size, item_07)\r\n        val menu_grid = dialogView.findViewById<GridView>(R.id.menu_grid)\r\n        val gridAdapter = GridAdapter(this, gridList)\r\n        menu_grid.adapter = gridAdapter\r\n        gridAdapter.notifyDataSetChanged()\r\n        menu_grid.onItemClickListener =\r\n            OnItemClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                dialog.cancel()\r\n                when (position) {\r\n                    0 -> addAlbum(getString(R.string.app_name), url, true, false, \"\")\r\n                    1 -> addAlbum(getString(R.string.app_name), url, false, false, \"\")\r\n                    2 -> addAlbum(getString(R.string.app_name), url, true, true, \"\")\r\n                    3 -> shareLink(\"\", url)\r\n                    4 -> BrowserUnit.intentURL(this, Uri.parse(url))\r\n                    5 -> if (url!!.startsWith(\"data:\")) {\r\n                        val dataURIParser = DataURIParser(url)\r\n                        HelperUnit.saveDataURI(dialog, this, dataURIParser)\r\n                    } else HelperUnit.saveAs(dialog, this, url)\r\n                    6 -> save_atHome(title, url)\r\n                }\r\n            }\r\n    }\r\n\r\n    private fun shareLink(title: String?, url: String?) {\r\n        val sharingIntent = Intent(Intent.ACTION_SEND)\r\n        sharingIntent.type = \"text/plain\"\r\n        sharingIntent.putExtra(Intent.EXTRA_SUBJECT, title)\r\n        sharingIntent.putExtra(Intent.EXTRA_TEXT, url)\r\n        this!!.startActivity(\r\n            Intent.createChooser(\r\n                sharingIntent,\r\n                this.getString(R.string.menu_share_link)\r\n            )\r\n        )\r\n    }\r\n\r\n    private fun searchOnSite() {\r\n        searchOnSite = true\r\n        omniBox.setVisibility(View.GONE)\r\n        searchBox.setVisibility(View.VISIBLE)\r\n        HelperUnit.showSoftKeyboard(searchBox_input, this)\r\n    }\r\n\r\n    private fun saveBookmark() {\r\n        val faviconHelper = FaviconHelper(this)\r\n        faviconHelper.addFavicon(this, ninjaWebView?.url, ninjaWebView?.getFavicon())\r\n        val action = RecordAction(this)\r\n        action.open(true)\r\n        if (action.checkUrl(ninjaWebView?.url, RecordUnit.TABLE_BOOKMARK)) NinjaToast.show(\r\n            this,\r\n            R.string.app_error\r\n        ) else {\r\n            val value: Long = 11 //default red icon\r\n            action.addBookmark(\r\n                Record(\r\n                    ninjaWebView?.getTitle(),\r\n                    ninjaWebView?.url,\r\n                    0,\r\n                    0,\r\n                    2,\r\n                    ninjaWebView?.isDesktopMode,\r\n                    ninjaWebView?.isNightMode,\r\n                    value\r\n                )\r\n            )\r\n            NinjaToast.show(this, R.string.app_done)\r\n        }\r\n        action.close()\r\n    }\r\n\r\n    override fun onCreateContextMenu(menu: ContextMenu?, v: View?, menuInfo: ContextMenuInfo?) {\r\n        super.onCreateContextMenu(menu, v, menuInfo)\r\n        val result: HitTestResult = ninjaWebView?.hitTestResult!!\r\n        if (result.extra != null) {\r\n            if (result.type == HitTestResult.SRC_ANCHOR_TYPE) showContextMenuLink(\r\n                HelperUnit.domain(\r\n                    result.extra\r\n                ), result.extra, HitTestResult.SRC_ANCHOR_TYPE\r\n            ) else if (result.type == HitTestResult.SRC_IMAGE_ANCHOR_TYPE) {\r\n                // Create a background thread that has a Looper\r\n                val handlerThread = HandlerThread(\"HandlerThread\")\r\n                handlerThread.start()\r\n                // Create a handler to execute tasks in the background thread.\r\n                val backgroundHandler = Handler(handlerThread.looper)\r\n                val msg = backgroundHandler.obtainMessage()\r\n                ninjaWebView?.requestFocusNodeHref(msg)\r\n                val url = msg.data[\"url\"] as String?\r\n                showContextMenuLink(HelperUnit.domain(url), url, HitTestResult.SRC_ANCHOR_TYPE)\r\n            } else if (result.type == HitTestResult.IMAGE_TYPE) showContextMenuLink(\r\n                HelperUnit.domain(\r\n                    result.extra\r\n                ), result.extra, HitTestResult.IMAGE_TYPE\r\n            ) else showContextMenuLink(HelperUnit.domain(result.extra), result.extra, 0)\r\n        }\r\n    }\r\n\r\n    private fun doubleTapsQuit() {\r\n        if (!sp!!.getBoolean(\"sp_close_browser_confirm\", true)) finish() else {\r\n            val builder = MaterialAlertDialogBuilder(this!!)\r\n            builder.setTitle(R.string.setting_title_confirm_exit)\r\n            builder.setIcon(R.drawable.icon_alert)\r\n            builder.setMessage(R.string.toast_quit)\r\n            builder.setPositiveButton(R.string.app_ok) { dialog, whichButton -> finish() }\r\n            builder.setNegativeButton(R.string.app_cancel) { dialog, whichButton -> dialog.cancel() }\r\n            val dialog = builder.create()\r\n            dialog.show()\r\n            HelperUnit.setupDialog(this, dialog)\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private fun showOverflow() {\r\n        HelperUnit.hideSoftKeyboard(omniBox_input, this)\r\n        val url: String = ninjaWebView?.url ?: \"\"\r\n        val title: String = ninjaWebView?.getTitle() ?: \"\"\r\n        val builder = MaterialAlertDialogBuilder(this!!)\r\n        val dialogView = View.inflate(this, R.layout.dialog_menu_overflow, null)\r\n        builder.setView(dialogView)\r\n        val dialog_overflow = builder.create()\r\n        dialog_overflow.show()\r\n        Objects.requireNonNull(dialog_overflow.window)?.setGravity(Gravity.BOTTOM)\r\n        FaviconHelper.setFavicon(\r\n            this,\r\n            dialogView,\r\n            url,\r\n            R.id.menu_icon,\r\n            R.drawable.icon_image_broken\r\n        )\r\n        val overflow_title = dialogView.findViewById<TextView>(R.id.overflow_title)\r\n        assert(title != null)\r\n        if (title.isEmpty()) overflow_title.text = url else overflow_title.text = title\r\n        val overflow_help = dialogView.findViewById<Button>(R.id.overflow_help)\r\n        overflow_help.setOnClickListener { v: View? ->\r\n            dialog_overflow.cancel()\r\n            val webpage =\r\n                Uri.parse(\"https://github.com/scoute-dich/browser/wiki\")\r\n            BrowserUnit.intentURL(this, webpage)\r\n        }\r\n        val menu_grid_tab = dialogView.findViewById<GridView>(R.id.overflow_tab)\r\n        val menu_grid_share = dialogView.findViewById<GridView>(R.id.overflow_share)\r\n        val menu_grid_save = dialogView.findViewById<GridView>(R.id.overflow_save)\r\n        val menu_grid_other = dialogView.findViewById<GridView>(R.id.overflow_other)\r\n        menu_grid_tab.visibility = View.VISIBLE\r\n        menu_grid_share.visibility = View.GONE\r\n        menu_grid_save.visibility = View.GONE\r\n        menu_grid_other.visibility = View.GONE\r\n\r\n        // Tab\r\n        val item_01 = GridItem(0, getString(R.string.menu_openFav), 0)\r\n        val item_02 = GridItem(0, getString(R.string.main_menu_new_tabOpen), 0)\r\n        val item_03 = GridItem(0, getString(R.string.main_menu_new_tabProfile), 0)\r\n        val item_04 = GridItem(0, getString(R.string.menu_reload), 0)\r\n        val item_05 = GridItem(0, getString(R.string.menu_closeTab), 0)\r\n        val item_06 = GridItem(0, getString(R.string.menu_quit), 0)\r\n        val gridList_tab: ArrayList<GridItem> = arrayListOf<GridItem>()\r\n        gridList_tab.add(gridList_tab.size, item_01)\r\n        gridList_tab.add(gridList_tab.size, item_02)\r\n        gridList_tab.add(gridList_tab.size, item_03)\r\n        gridList_tab.add(gridList_tab.size, item_04)\r\n        gridList_tab.add(gridList_tab.size, item_05)\r\n        gridList_tab.add(gridList_tab.size, item_06)\r\n        val gridAdapter_tab = GridAdapter(this, gridList_tab)\r\n        menu_grid_tab.adapter = gridAdapter_tab\r\n        gridAdapter_tab.notifyDataSetChanged()\r\n        menu_grid_tab.onItemClickListener =\r\n            OnItemClickListener { parent: AdapterView<*>?, view14: View?, position: Int, id: Long ->\r\n                dialog_overflow.cancel()\r\n                if (position == 0) Objects.requireNonNull(\r\n                    sp!!.getString(\r\n                        \"favoriteURL\",\r\n                        \"https://github.com/scoute-dich/browser/blob/master/README.md\"\r\n                    )\r\n                )?.let {\r\n                    ninjaWebView?.loadUrl(\r\n                        it\r\n                    )\r\n                } else if (position == 1) addAlbum(\r\n                    getString(R.string.app_name), Objects.requireNonNull(\r\n                        sp!!.getString(\r\n                            \"favoriteURL\",\r\n                            \"https://github.com/scoute-dich/browser/blob/master/README.md\"\r\n                        )\r\n                    ), true, false, \"\"\r\n                ) else if (position == 2) addAlbum(\r\n                    getString(R.string.app_name), Objects.requireNonNull(\r\n                        sp!!.getString(\r\n                            \"favoriteURL\",\r\n                            \"https://github.com/scoute-dich/browser/blob/master/README.md\"\r\n                        )\r\n                    ), true, true, \"\"\r\n                ) else if (position == 3) ninjaWebView?.reload() else if (position == 4) removeAlbum(\r\n                    currentAlbumController!!\r\n                ) else if (position == 5) doubleTapsQuit()\r\n            }\r\n\r\n        // Save\r\n        val item_21 = GridItem(0, getString(R.string.menu_fav), 0)\r\n        val item_22 = GridItem(0, getString(R.string.menu_save_home), 0)\r\n        val item_23 = GridItem(0, getString(R.string.menu_save_bookmark), 0)\r\n        val item_24 = GridItem(0, getString(R.string.menu_save_pdf), 0)\r\n        val item_25 = GridItem(0, getString(R.string.menu_sc), 0)\r\n        val item_26 = GridItem(0, getString(R.string.menu_save_as), 0)\r\n        val gridList_save: ArrayList<GridItem> = arrayListOf<GridItem>()\r\n        gridList_save.add(gridList_save.size, item_21)\r\n        gridList_save.add(gridList_save.size, item_22)\r\n        gridList_save.add(gridList_save.size, item_23)\r\n        gridList_save.add(gridList_save.size, item_24)\r\n        gridList_save.add(gridList_save.size, item_25)\r\n        gridList_save.add(gridList_save.size, item_26)\r\n        val gridAdapter_save = GridAdapter(this, gridList_save)\r\n        menu_grid_save.adapter = gridAdapter_save\r\n        gridAdapter_save.notifyDataSetChanged()\r\n        menu_grid_save.onItemClickListener =\r\n            OnItemClickListener { parent: AdapterView<*>?, view13: View?, position: Int, id: Long ->\r\n                dialog_overflow.cancel()\r\n                val action = RecordAction(this)\r\n                if (position == 0) {\r\n                    sp!!.edit().putString(\"favoriteURL\", url).apply()\r\n                    NinjaToast.show(this, R.string.app_done)\r\n                } else if (position == 1) {\r\n                    save_atHome(title, url)\r\n                } else if (position == 2) {\r\n                    saveBookmark()\r\n                    action.close()\r\n                } else if (position == 3) printPDF() else if (position == 4) HelperUnit.createShortcut(\r\n                    this,\r\n                    ninjaWebView?.getTitle(),\r\n                    ninjaWebView?.getOriginalUrl(),\r\n                    ninjaWebView?.getFavicon()\r\n                ) else if (position == 5) HelperUnit.saveAs(dialog_overflow, this, url)\r\n            }\r\n\r\n        // Share\r\n        val item_11 = GridItem(0, getString(R.string.menu_share_link), 0)\r\n        val item_12 = GridItem(0, getString(R.string.menu_shareClipboard), 0)\r\n        val item_13 = GridItem(0, getString(R.string.menu_open_with), 0)\r\n        val gridList_share: ArrayList<GridItem> = arrayListOf<GridItem>()\r\n        gridList_share.add(gridList_share.size, item_11)\r\n        gridList_share.add(gridList_share.size, item_12)\r\n        gridList_share.add(gridList_share.size, item_13)\r\n        val gridAdapter_share = GridAdapter(this, gridList_share)\r\n        menu_grid_share.adapter = gridAdapter_share\r\n        gridAdapter_share.notifyDataSetChanged()\r\n        menu_grid_share.onItemClickListener =\r\n            OnItemClickListener { parent: AdapterView<*>?, view12: View?, position: Int, id: Long ->\r\n                dialog_overflow.cancel()\r\n                if (position == 0) shareLink(title, url) else if (position == 1) {\r\n                    val clipboard =\r\n                        getSystemService(CLIPBOARD_SERVICE) as ClipboardManager\r\n                    val clip = ClipData.newPlainText(\"text\", url)\r\n                    Objects.requireNonNull(clipboard).setPrimaryClip(clip)\r\n                    NinjaToast.show(this, R.string.toast_copy_successful)\r\n                } else if (position == 2) {\r\n                    BrowserUnit.intentURL(this, Uri.parse(url))\r\n                }\r\n            }\r\n\r\n        // Other\r\n        val item_31 = GridItem(0, getString(R.string.menu_other_searchSite), 0)\r\n        val item_32 = GridItem(0, getString(R.string.menu_download), 0)\r\n        val item_33 = GridItem(0, getString(R.string.setting_label), 0)\r\n        val item_36 = GridItem(0, getString(R.string.menu_restart), 0)\r\n        val item_34 = GridItem(0, getString(R.string.app_help), 0)\r\n        val gridList_other: ArrayList<GridItem> = arrayListOf<GridItem>()\r\n        gridList_other.add(gridList_other.size, item_31)\r\n        gridList_other.add(gridList_other.size, item_34)\r\n        gridList_other.add(gridList_other.size, item_32)\r\n        gridList_other.add(gridList_other.size, item_33)\r\n        gridList_other.add(gridList_other.size, item_36)\r\n        val gridAdapter_other = GridAdapter(this, gridList_other)\r\n        menu_grid_other.adapter = gridAdapter_other\r\n        gridAdapter_other.notifyDataSetChanged()\r\n        menu_grid_other.onItemClickListener =\r\n            OnItemClickListener { parent: AdapterView<*>?, view1: View?, position: Int, id: Long ->\r\n                dialog_overflow.cancel()\r\n                if (position == 0) searchOnSite() else if (position == 1) {\r\n                    val webpage =\r\n                        Uri.parse(\"https://github.com/scoute-dich/browser/wiki\")\r\n                    BrowserUnit.intentURL(this, webpage)\r\n                } else if (position == 2) startActivity(Intent(DownloadManager.ACTION_VIEW_DOWNLOADS)) else if (position == 3) {\r\n//                    val settings = Intent(this@BrowserActivity, Settings_Activity::class.java)\r\n//                    startActivity(settings)\r\n                } else if (position == 4) {\r\n                    saveOpenedTabs()\r\n                    HelperUnit.triggerRebirth(this)\r\n                }\r\n            }\r\n        val tabLayout: TabLayout = dialogView.findViewById(R.id.tabLayout)\r\n        val tab_tab = tabLayout.newTab().setIcon(R.drawable.icon_tab)\r\n        val tab_share = tabLayout.newTab().setIcon(R.drawable.icon_menu_share)\r\n        val tab_save = tabLayout.newTab().setIcon(R.drawable.icon_menu_save)\r\n        val tab_other = tabLayout.newTab().setIcon(R.drawable.icon_dots)\r\n        tabLayout.addTab(tab_tab)\r\n        tabLayout.addTab(tab_share)\r\n        tabLayout.addTab(tab_save)\r\n        tabLayout.addTab(tab_other)\r\n        tabLayout.tabGravity = TabLayout.GRAVITY_FILL\r\n        tabLayout.addOnTabSelectedListener(object : OnTabSelectedListener {\r\n            override fun onTabSelected(tab: TabLayout.Tab) {\r\n                if (tab.position == 0) {\r\n                    menu_grid_tab.visibility = View.VISIBLE\r\n                    menu_grid_share.visibility = View.GONE\r\n                    menu_grid_save.visibility = View.GONE\r\n                    menu_grid_other.visibility = View.GONE\r\n                } else if (tab.position == 1) {\r\n                    menu_grid_tab.visibility = View.GONE\r\n                    menu_grid_share.visibility = View.VISIBLE\r\n                    menu_grid_save.visibility = View.GONE\r\n                    menu_grid_other.visibility = View.GONE\r\n                } else if (tab.position == 2) {\r\n                    menu_grid_tab.visibility = View.GONE\r\n                    menu_grid_share.visibility = View.GONE\r\n                    menu_grid_save.visibility = View.VISIBLE\r\n                    menu_grid_other.visibility = View.GONE\r\n                } else if (tab.position == 3) {\r\n                    menu_grid_tab.visibility = View.GONE\r\n                    menu_grid_share.visibility = View.GONE\r\n                    menu_grid_save.visibility = View.GONE\r\n                    menu_grid_other.visibility = View.VISIBLE\r\n                }\r\n            }\r\n\r\n            override fun onTabUnselected(tab: TabLayout.Tab) {}\r\n            override fun onTabReselected(tab: TabLayout.Tab) {}\r\n        })\r\n        menu_grid_tab.setOnTouchListener(object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeRight() {\r\n                tabLayout.selectTab(tab_other)\r\n            }\r\n\r\n            override fun onSwipeLeft() {\r\n                tabLayout.selectTab(tab_share)\r\n            }\r\n        })\r\n        menu_grid_share.setOnTouchListener(object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeRight() {\r\n                tabLayout.selectTab(tab_tab)\r\n            }\r\n\r\n            override fun onSwipeLeft() {\r\n                tabLayout.selectTab(tab_save)\r\n            }\r\n        })\r\n        menu_grid_save.setOnTouchListener(object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeRight() {\r\n                tabLayout.selectTab(tab_share)\r\n            }\r\n\r\n            override fun onSwipeLeft() {\r\n                tabLayout.selectTab(tab_other)\r\n            }\r\n        })\r\n        menu_grid_other.setOnTouchListener(object : SwipeTouchListener(this@MainActivity) {\r\n            override fun onSwipeRight() {\r\n                tabLayout.selectTab(tab_save)\r\n            }\r\n\r\n            override fun onSwipeLeft() {\r\n                tabLayout.selectTab(tab_tab)\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun saveOpenedTabs() {\r\n        val openTabs = ArrayList<String?>()\r\n        for (i in 0 until BrowserContainer.size()) {\r\n            if (currentAlbumController === BrowserContainer.get(i)) openTabs.add(\r\n                0,\r\n                (BrowserContainer.get(i) as NinjaWebView)?.url\r\n            ) else openTabs.add((BrowserContainer.get(i) as NinjaWebView)?.url)\r\n        }\r\n        sp = PreferenceManager.getDefaultSharedPreferences(this)\r\n        sp?.edit()?.putString(\"openTabs\", TextUtils.join(\"‚‗‚\", openTabs))?.apply()\r\n\r\n        //Save profile of open Tabs in shared preferences\r\n        val openTabsProfile = ArrayList<String?>()\r\n        for (i in 0 until BrowserContainer.size()) {\r\n            if (currentAlbumController === BrowserContainer.get(i)) openTabsProfile.add(\r\n                0,\r\n                (BrowserContainer.get(i) as NinjaWebView).profile\r\n            ) else openTabsProfile.add((BrowserContainer.get(i) as NinjaWebView).profile)\r\n        }\r\n        sp = PreferenceManager.getDefaultSharedPreferences(this)\r\n        sp?.edit()?.putString(\"openTabsProfile\", TextUtils.join(\"‚‗‚\", openTabsProfile))?.apply()\r\n    }\r\n\r\n    private fun showContextMenuList(\r\n        title: String, url: String,\r\n        adapterRecord: RecordAdapter, recordList: ArrayList<Record>, location: Int\r\n    ) {\r\n        val builder = MaterialAlertDialogBuilder(this!!)\r\n        val dialogView = View.inflate(this, R.layout.dialog_menu, null)\r\n        val menuTitle = dialogView.findViewById<TextView>(R.id.menuTitle)\r\n        menuTitle.text = title\r\n        FaviconHelper.setFavicon(\r\n            this,\r\n            dialogView,\r\n            url,\r\n            R.id.menu_icon,\r\n            R.drawable.icon_image_broken\r\n        )\r\n        builder.setView(dialogView)\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        Objects.requireNonNull(dialog.window)?.setGravity(Gravity.BOTTOM)\r\n        val item_01 = GridItem(0, getString(R.string.main_menu_new_tabOpen), 0)\r\n        val item_02 = GridItem(0, getString(R.string.main_menu_new_tab), 0)\r\n        val item_03 = GridItem(0, getString(R.string.main_menu_new_tabProfile), 0)\r\n        val item_04 = GridItem(0, getString(R.string.menu_share_link), 0)\r\n        val item_05 = GridItem(0, getString(R.string.menu_delete), 0)\r\n        val item_06 = GridItem(0, getString(R.string.menu_edit), 0)\r\n        val gridList: ArrayList<GridItem> = arrayListOf<GridItem>()\r\n        if (overViewTab == getString(R.string.album_title_bookmarks) || overViewTab == getString(R.string.album_title_home)) {\r\n            gridList.add(gridList.size, item_01)\r\n            gridList.add(gridList.size, item_02)\r\n            gridList.add(gridList.size, item_03)\r\n            gridList.add(gridList.size, item_04)\r\n            gridList.add(gridList.size, item_05)\r\n            gridList.add(gridList.size, item_06)\r\n        } else {\r\n            gridList.add(gridList.size, item_01)\r\n            gridList.add(gridList.size, item_02)\r\n            gridList.add(gridList.size, item_03)\r\n            gridList.add(gridList.size, item_04)\r\n            gridList.add(gridList.size, item_05)\r\n        }\r\n        val menu_grid = dialogView.findViewById<GridView>(R.id.menu_grid)\r\n        val gridAdapter = GridAdapter(this, gridList)\r\n        menu_grid.adapter = gridAdapter\r\n        gridAdapter.notifyDataSetChanged()\r\n        menu_grid.onItemClickListener =\r\n            OnItemClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                dialog.cancel()\r\n                val builderSubMenu: MaterialAlertDialogBuilder\r\n                val dialogSubMenu: AlertDialog\r\n                when (position) {\r\n                    0 -> {\r\n                        addAlbum(getString(R.string.app_name), url, true, false, \"\")\r\n                        hideOverview()\r\n                    }\r\n                    1 -> addAlbum(getString(R.string.app_name), url, false, false, \"\")\r\n                    2 -> {\r\n                        addAlbum(getString(R.string.app_name), url, true, true, \"\")\r\n                        hideOverview()\r\n                    }\r\n                    3 -> shareLink(\"\", url)\r\n                    4 -> {\r\n                        builderSubMenu = MaterialAlertDialogBuilder(this)\r\n                        builderSubMenu.setIcon(R.drawable.icon_alert)\r\n                        builderSubMenu.setTitle(R.string.menu_delete)\r\n                        builderSubMenu.setMessage(R.string.hint_database)\r\n                        builderSubMenu.setPositiveButton(R.string.app_ok) { dialog2, whichButton ->\r\n                            val record: Record = recordList[location]\r\n                            val action = RecordAction(this)\r\n                            action.open(true)\r\n                            if (overViewTab == getString(R.string.album_title_home)) {\r\n                                action.deleteURL(record.uRL, RecordUnit.TABLE_START)\r\n                            } else if (overViewTab == getString(R.string.album_title_bookmarks)) {\r\n                                action.deleteURL(record.uRL, RecordUnit.TABLE_BOOKMARK)\r\n                            } else if (overViewTab == getString(R.string.album_title_history)) {\r\n                                action.deleteURL(record.uRL, RecordUnit.TABLE_HISTORY)\r\n                            }\r\n                            action.close()\r\n                            recordList.removeAt(location)\r\n                            adapterRecord.notifyDataSetChanged()\r\n                        }\r\n                        builderSubMenu.setNegativeButton(R.string.app_cancel) { dialog2, whichButton ->\r\n                            builderSubMenu.setCancelable(\r\n                                true\r\n                            )\r\n                        }\r\n                        dialogSubMenu = builderSubMenu.create()\r\n                        dialogSubMenu.show()\r\n                        HelperUnit.setupDialog(this, dialogSubMenu)\r\n                    }\r\n                    5 -> {\r\n                        builderSubMenu = MaterialAlertDialogBuilder(this)\r\n                        val dialogViewSubMenu =\r\n                            View.inflate(this, R.layout.dialog_edit_title, null)\r\n                        val edit_title_layout: TextInputLayout =\r\n                            dialogViewSubMenu.findViewById(R.id.edit_title_layout)\r\n                        val edit_userName_layout: TextInputLayout =\r\n                            dialogViewSubMenu.findViewById(R.id.edit_userName_layout)\r\n                        val edit_PW_layout: TextInputLayout =\r\n                            dialogViewSubMenu.findViewById(R.id.edit_PW_layout)\r\n                        edit_title_layout.visibility = View.VISIBLE\r\n                        edit_userName_layout.visibility = View.GONE\r\n                        edit_PW_layout.visibility = View.GONE\r\n                        val edit_title = dialogViewSubMenu.findViewById<EditText>(R.id.edit_title)\r\n                        edit_title.setText(title)\r\n                        val edit_URL_layout: TextInputLayout =\r\n                            dialogViewSubMenu.findViewById(R.id.edit_URL_layout)\r\n                        edit_URL_layout.visibility = View.VISIBLE\r\n                        val edit_URL = dialogViewSubMenu.findViewById<EditText>(R.id.edit_URL)\r\n                        edit_URL.visibility = View.VISIBLE\r\n                        edit_URL.setText(url)\r\n                        val chip_desktopMode: Chip =\r\n                            dialogViewSubMenu.findViewById(R.id.edit_bookmark_desktopMode)\r\n                        chip_desktopMode.isChecked = recordList[location].desktopMode == true\r\n                        val chip_nightMode: Chip =\r\n                            dialogViewSubMenu.findViewById(R.id.edit_bookmark_nightMode)\r\n                        chip_nightMode.isChecked = !recordList[location].nightMode!!\r\n                        val ib_icon =\r\n                            dialogViewSubMenu.findViewById<ImageView>(R.id.edit_icon)\r\n                        if (overViewTab != getString(R.string.album_title_bookmarks)) ib_icon.visibility =\r\n                            View.GONE\r\n                        ib_icon.setOnClickListener { v: View? ->\r\n                            val builderFilter = MaterialAlertDialogBuilder(\r\n                                this\r\n                            )\r\n                            val dialogViewFilter =\r\n                                View.inflate(this, R.layout.dialog_menu, null)\r\n                            builderFilter.setView(dialogViewFilter)\r\n                            val dialogFilter =\r\n                                builderFilter.create()\r\n                            dialogFilter.show()\r\n                            val menuTitleFilter =\r\n                                dialogViewFilter.findViewById<TextView>(R.id.menuTitle)\r\n                            menuTitleFilter.setText(R.string.menu_filter)\r\n                            val cardView: CardView = dialogViewFilter.findViewById(R.id.cardView)\r\n                            cardView.visibility = View.GONE\r\n                            Objects.requireNonNull(dialogFilter.window)\r\n                                ?.setGravity(Gravity.BOTTOM)\r\n                            val menu_grid2 =\r\n                                dialogViewFilter.findViewById<GridView>(R.id.menu_grid)\r\n                            val gridList2: List<GridItem> =\r\n                                LinkedList<GridItem>()\r\n                            if (this != null) {\r\n                                HelperUnit.addFilterItems(this, ArrayList(gridList2))\r\n                            }\r\n                            val gridAdapter2 = GridAdapter(this, gridList2)\r\n                            menu_grid2.adapter = gridAdapter2\r\n                            gridAdapter2.notifyDataSetChanged()\r\n                            menu_grid2.onItemClickListener =\r\n                                OnItemClickListener { parent2: AdapterView<*>?, view2: View?, position2: Int, id2: Long ->\r\n                                    newIcon = gridList2[position2].data.toLong()\r\n                                    HelperUnit.setFilterIcons(ib_icon, newIcon)\r\n                                    dialogFilter.cancel()\r\n                                }\r\n                        }\r\n                        newIcon = recordList[location].iconColor\r\n                        HelperUnit.setFilterIcons(ib_icon, newIcon)\r\n                        builderSubMenu.setView(dialogViewSubMenu)\r\n                        builderSubMenu.setTitle(getString(R.string.menu_edit))\r\n                        builderSubMenu.setIcon(R.drawable.icon_alert)\r\n                        builderSubMenu.setMessage(url)\r\n                        builderSubMenu.setPositiveButton(R.string.app_ok) { dialog3, whichButton ->\r\n                            if (overViewTab == getString(R.string.album_title_bookmarks)) {\r\n                                val action = RecordAction(this)\r\n                                action.open(true)\r\n                                action.deleteURL(url, RecordUnit.TABLE_BOOKMARK)\r\n                                action.addBookmark(\r\n                                    Record(\r\n                                        edit_title.text.toString(),\r\n                                        edit_URL.text.toString(),\r\n                                        0,\r\n                                        0,\r\n                                        BOOKMARK_ITEM,\r\n                                        chip_desktopMode.isChecked,\r\n                                        chip_nightMode.isChecked,\r\n                                        newIcon\r\n                                    )\r\n                                )\r\n                                action.close()\r\n                                bottom_navigation.setSelectedItemId(R.id.page_2)\r\n                            } else {\r\n                                val action = RecordAction(this)\r\n                                action.open(true)\r\n                                action.deleteURL(url, RecordUnit.TABLE_START)\r\n                                var counter = sp!!.getInt(\"counter\", 0)\r\n                                counter = counter + 1\r\n                                sp!!.edit().putInt(\"counter\", counter).apply()\r\n                                action.addStartSite(\r\n                                    Record(\r\n                                        edit_title.text.toString(),\r\n                                        edit_URL.text.toString(),\r\n                                        0,\r\n                                        counter,\r\n                                        STARTSITE_ITEM,\r\n                                        chip_desktopMode.isChecked,\r\n                                        chip_nightMode.isChecked,\r\n                                        0\r\n                                    )\r\n                                )\r\n                                action.close()\r\n                                bottom_navigation.setSelectedItemId(R.id.page_1)\r\n                            }\r\n                        }\r\n                        builderSubMenu.setNegativeButton(R.string.app_cancel) { dialog3, whichButton ->\r\n                            builderSubMenu.setCancelable(\r\n                                true\r\n                            )\r\n                        }\r\n                        dialogSubMenu = builderSubMenu.create()\r\n                        dialogSubMenu.show()\r\n                        HelperUnit.setupDialog(this, dialogSubMenu)\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n    private fun save_atHome(title: String?, url: String?) {\r\n        val faviconHelper = FaviconHelper(this)\r\n        faviconHelper.addFavicon(this, ninjaWebView?.url, ninjaWebView?.getFavicon())\r\n        val action = RecordAction(this)\r\n        action.open(true)\r\n        if (action.checkUrl(url, RecordUnit.TABLE_START)) NinjaToast.show(\r\n            this,\r\n            R.string.app_error\r\n        ) else {\r\n            var counter = sp!!.getInt(\"counter\", 0)\r\n            counter = counter + 1\r\n            sp!!.edit().putInt(\"counter\", counter).apply()\r\n            if (action.addStartSite(\r\n                    Record(\r\n                        title,\r\n                        url,\r\n                        0,\r\n                        counter,\r\n                        1,\r\n                        ninjaWebView?.isDesktopMode,\r\n                        ninjaWebView?.isNightMode,\r\n                        0\r\n                    )\r\n                )\r\n            ) {\r\n                NinjaToast.show(this, R.string.app_done)\r\n            } else {\r\n                NinjaToast.show(this, R.string.app_error)\r\n            }\r\n        }\r\n        action.close()\r\n    }\r\n\r\n    private fun show_dialogFilter() {\r\n        val builder = MaterialAlertDialogBuilder(this)\r\n        val dialogView = View.inflate(this, R.layout.dialog_menu, null)\r\n        builder.setView(dialogView)\r\n        val dialog = builder.create()\r\n        dialog.show()\r\n        val menuTitleFilter = dialogView.findViewById<TextView>(R.id.menuTitle)\r\n        menuTitleFilter.setText(R.string.menu_filter)\r\n        val cardView: CardView = dialogView.findViewById(R.id.cardView)\r\n        cardView.visibility = View.GONE\r\n        val button_help = dialogView.findViewById<Button>(R.id.button_help)\r\n        button_help.visibility = View.VISIBLE\r\n        button_help.setOnClickListener { view: View? ->\r\n            dialog.cancel()\r\n            val webpage =\r\n                Uri.parse(\"https://github.com/scoute-dich/browser/wiki/Filter-Dialog\")\r\n            BrowserUnit.intentURL(this, webpage)\r\n        }\r\n        Objects.requireNonNull(dialog.window)?.setGravity(Gravity.BOTTOM)\r\n        val menu_grid = dialogView.findViewById<GridView>(R.id.menu_grid)\r\n        val gridList: ArrayList<GridItem> = arrayListOf<GridItem>()\r\n        if (this != null) {\r\n            HelperUnit.addFilterItems(this, ArrayList(gridList))\r\n        }\r\n        val gridAdapter = GridAdapter(this, gridList)\r\n        menu_grid.adapter = gridAdapter\r\n        gridAdapter.notifyDataSetChanged()\r\n        menu_grid.onItemClickListener =\r\n            OnItemClickListener { parent: AdapterView<*>?, view: View?, position: Int, id: Long ->\r\n                filter = true\r\n                filterBy = gridList[position].data.toLong()\r\n                dialog.cancel()\r\n                bottom_navigation.setSelectedItemId(R.id.page_2)\r\n            }\r\n    }\r\n\r\n    private fun setCustomFullscreen(fullscreen: Boolean) {\r\n        if (fullscreen) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n                val insetsController = window.insetsController\r\n                if (insetsController != null) {\r\n                    insetsController.hide(WindowInsets.Type.statusBars())\r\n                    insetsController.systemBarsBehavior =\r\n                        WindowInsetsController.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE\r\n                }\r\n            } else window.setFlags(\r\n                WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n                WindowManager.LayoutParams.FLAG_FULLSCREEN\r\n            )\r\n        } else {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n                val insetsController = window.insetsController\r\n                if (insetsController != null) {\r\n                    insetsController.show(WindowInsets.Type.statusBars() or WindowInsets.Type.navigationBars())\r\n                    insetsController.systemBarsBehavior =\r\n                        WindowInsetsController.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE\r\n                }\r\n            } else window.setFlags(\r\n                WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN,\r\n                WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun nextAlbumController(next: Boolean): AlbumController? {\r\n        if (BrowserContainer.size() <= 1) return currentAlbumController\r\n        val list: List<AlbumController> = BrowserContainer.list()\r\n        var index = list.indexOf(currentAlbumController)\r\n        if (next) {\r\n            index++\r\n            if (index >= list.size) index = 0\r\n        } else {\r\n            index--\r\n            if (index < 0) index = list.size - 1\r\n        }\r\n        return list[index]\r\n    }\r\n\r\n    fun goBack_skipRedirects() {\r\n        if (ninjaWebView?.canGoBack() == true) {\r\n            ninjaWebView?.setIsBackPressed(true)\r\n            ninjaWebView?.goBack()\r\n        }\r\n    }\r\n\r\n    inner class VideoCompletionListener : OnCompletionListener, MediaPlayer.OnErrorListener {\r\n        override fun onError(mp: MediaPlayer, what: Int, extra: Int): Boolean {\r\n            return false\r\n        }\r\n\r\n        override fun onCompletion(mp: MediaPlayer) {\r\n            onHideCustomView()\r\n//            ninjaWebView\r\n        }\r\n    }\r\n\r\n    override fun attachBaseContext(base: Context) {\r\n        super.attachBaseContext(applySelectedAppLanguage(base))\r\n    }\r\n\r\n    private fun applySelectedAppLanguage(context: Context): Context {\r\n        val newestLanguage = context.getSharedPreferences(Constants.Settings.SETTINGS_LANGUAGE, Context.MODE_PRIVATE).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\")\r\n        val locale = Locale(newestLanguage)\r\n        val newConfig = Configuration(context.resources.configuration)\r\n        Locale.setDefault(locale)\r\n        newConfig.setLocale(locale)\r\n        return context.createConfigurationContext(newConfig)\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/main/MainActivity.kt b/app/src/main/java/web/browser/dragon/ui/main/MainActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/main/MainActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/main/MainActivity.kt	
@@ -14,11 +14,8 @@
 import android.media.MediaPlayer
 import android.media.MediaPlayer.OnCompletionListener
 import android.net.Uri
-import android.os.Build
+import android.os.*
 import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
-import android.os.Handler
-import android.os.HandlerThread
 import android.preference.PreferenceManager
 import android.print.PrintAttributes
 import android.print.PrintDocumentAdapter
@@ -48,7 +45,7 @@
 import androidx.cardview.widget.CardView
 import androidx.core.app.ActivityCompat
 import androidx.core.content.ContextCompat
-import com.appsflyer.AppsFlyerLib
+import com.google.android.gms.location.*
 import com.google.android.material.badge.BadgeDrawable
 import com.google.android.material.badge.BadgeUtils
 import com.google.android.material.chip.Chip
@@ -75,6 +72,7 @@
 import web.browser.dragon.utils.other.unit.RecordUnit
 import web.browser.dragon.utils.other.view.*
 import kotlinx.android.synthetic.main.activity_main.*
+import web.browser.dragon.utils.other.view.NinjaWebView
 import java.util.*
 import java.util.concurrent.atomic.AtomicInteger
 import kotlin.collections.ArrayList
@@ -82,18 +80,25 @@
 class MainActivity : AppCompatActivity(), BrowserController {
 
     companion object {
+
+        const val MY_PERMISSIONS_REQUEST_LOCATION = 99
+        const val MY_PERMISSIONS_REQUEST_BACKGROUND_LOCATION = 66
+
         fun newIntent(context: Context, url: String? = null): Intent {
             val intent = Intent(context, MainActivity::class.java)
             intent.putExtra(EXTRA_URL, url)
             return intent
         }
-        
+
         const val EXTRA_URL = "extra_url"
     }
 
     private var overViewTab: String? = null
     private var downloadReceiver: BroadcastReceiver? = null
 
+
+    lateinit var fusedLocationProviderClient: FusedLocationProviderClient
+
     private var adapter: RecordAdapter? = null
     private var sp: SharedPreferences? = null
     private var listTrusted: List_trusted? = null
@@ -121,11 +126,41 @@
     private val INPUT_FILE_REQUEST_CODE = 1
     private var mFilePathCallback: ValueCallback<Array<Uri>>? = null
 
+    private var fusedLocationProvider: FusedLocationProviderClient? = null
+    private val locationRequest: LocationRequest = LocationRequest.create().apply {
+        interval = 30
+        fastestInterval = 10
+        priority = LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY
+        maxWaitTime = 60
+    }
+
+    private var locationCallback: LocationCallback = object : LocationCallback() {
+        override fun onLocationResult(locationResult: LocationResult) {
+            val locationList = locationResult.locations
+            if (locationList.isNotEmpty()) {
+                //The last location in the list is the newest
+                val location = locationList.last()
+                Toast.makeText(
+                    this@MainActivity,
+                    "Got Location: " + location.toString(),
+                    Toast.LENGTH_LONG
+                )
+                    .show()
+            }
+        }
+    }
+
     // Classes
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
+        fusedLocationProvider = LocationServices.getFusedLocationProviderClient(this)
+
+        checkLocationPermission()
+
+
+
         sp = PreferenceManager.getDefaultSharedPreferences(this)
 
         if (supportActionBar != null) supportActionBar!!.hide()
@@ -179,6 +214,7 @@
             main_content.setPadding(0, 0, 0, actionBarHeight)
         }
 
+
         downloadReceiver = object : BroadcastReceiver() {
             override fun onReceive(context: Context, intent: Intent) {
                 val builder = MaterialAlertDialogBuilder(context)
@@ -269,6 +305,15 @@
         //Save open Tabs in shared preferences
         saveOpenedTabs()
         super.onPause()
+         if (ContextCompat.checkSelfPermission(
+                this,
+                Manifest.permission.ACCESS_FINE_LOCATION
+            )
+            == PackageManager.PERMISSION_GRANTED
+        ) {
+
+            fusedLocationProvider?.removeLocationUpdates(locationCallback)
+        }
     }
 
     override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
@@ -296,6 +341,18 @@
 
     override fun onResume() {
         super.onResume()
+        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
+            == PackageManager.PERMISSION_GRANTED
+        ) {
+
+            fusedLocationProvider?.requestLocationUpdates(
+                locationRequest,
+                locationCallback,
+                Looper.getMainLooper()
+            )
+        }
+
+
         if (sp!!.getBoolean("sp_camera", false)) {
             if (ContextCompat.checkSelfPermission(
                     this,
@@ -2694,4 +2751,167 @@
         newConfig.setLocale(locale)
         return context.createConfigurationContext(newConfig)
     }
-}
\ No newline at end of file
+    private fun checkLocationPermission() {
+        if (ActivityCompat.checkSelfPermission(
+                this,
+                Manifest.permission.ACCESS_FINE_LOCATION
+            ) != PackageManager.PERMISSION_GRANTED
+        ) {
+            // Should we show an explanation?
+            if (ActivityCompat.shouldShowRequestPermissionRationale(
+                    this,
+                    Manifest.permission.ACCESS_FINE_LOCATION
+                )
+            ) {
+                // Show an explanation to the user *asynchronously* -- don't block
+                // this thread waiting for the user's response! After the user
+                // sees the explanation, try again to request the permission.
+                AlertDialog.Builder(this)
+                    .setTitle("Location Permission Needed")
+                    .setMessage("This app needs the Location permission, please accept to use location functionality")
+                    .setPositiveButton(
+                        "OK"
+                    ) { _, _ ->
+                        //Prompt the user once explanation has been shown
+                        requestLocationPermission()
+                    }
+                    .create()
+                    .show()
+            } else {
+                // No explanation needed, we can request the permission.
+                requestLocationPermission()
+            }
+        } else {
+            checkBackgroundLocation()
+        }
+    }
+
+    private fun checkBackgroundLocation() {
+        if (ActivityCompat.checkSelfPermission(
+                this,
+                Manifest.permission.ACCESS_BACKGROUND_LOCATION
+            ) != PackageManager.PERMISSION_GRANTED
+        ) {
+            requestBackgroundLocationPermission()
+        }
+    }
+
+    private fun requestLocationPermission() {
+        ActivityCompat.requestPermissions(
+            this,
+            arrayOf(
+                Manifest.permission.ACCESS_FINE_LOCATION,
+            ),
+            MY_PERMISSIONS_REQUEST_LOCATION
+        )
+    }
+
+    private fun requestBackgroundLocationPermission() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            ActivityCompat.requestPermissions(
+                this,
+                arrayOf(
+                    Manifest.permission.ACCESS_BACKGROUND_LOCATION
+                ),
+                MY_PERMISSIONS_REQUEST_BACKGROUND_LOCATION
+            )
+        } else {
+            ActivityCompat.requestPermissions(
+                this,
+                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
+                MY_PERMISSIONS_REQUEST_LOCATION
+            )
+        }
+    }
+}
+
+//    override fun onRequestPermissionsResult(
+//        requestCode: Int,
+//        permissions: Array<String>,
+//        grantResults: IntArray
+//    ) {
+//        when (requestCode) {
+//            MY_PERMISSIONS_REQUEST_LOCATION -> {
+//                // If request is cancelled, the result arrays are empty.
+//                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+//
+//                    // permission was granted, yay! Do the
+//                    // location-related task you need to do.
+//                    if (ContextCompat.checkSelfPermission(
+//                            this,
+//                            Manifest.permission.ACCESS_FINE_LOCATION
+//                        ) == PackageManager.PERMISSION_GRANTED
+//                    ) {
+//                        fusedLocationProvider?.requestLocationUpdates(
+//                            locationRequest,
+//                            locationCallback,
+//                            Looper.getMainLooper()
+//                        )
+//
+//                        // Now check background location
+//                        checkBackgroundLocation()
+//                    }
+//
+//                } else {
+//
+//                    // permission denied, boo! Disable the
+//                    // functionality that depends on this permission.
+//                    Toast.makeText(this, "permission denied", Toast.LENGTH_LONG).show()
+//
+//                    // Check if we are in a state where the user has denied the permission and
+//                    // selected Don't ask again
+//                    if (!ActivityCompat.shouldShowRequestPermissionRationale(
+//                            this,
+//                            Manifest.permission.ACCESS_FINE_LOCATION
+//                        )
+//                    ) {
+//                        startActivity(
+//                            Intent(
+//                                Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
+//                                Uri.fromParts("package", this.packageName, null),
+//                            ),
+//                        )
+//                    }
+//                }
+//                return
+//            }
+//            MY_PERMISSIONS_REQUEST_BACKGROUND_LOCATION -> {
+//                // If request is cancelled, the result arrays are empty.
+//                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+//
+//                    // permission was granted, yay! Do the
+//                    // location-related task you need to do.
+//                    if (ContextCompat.checkSelfPermission(
+//                            this,
+//                            Manifest.permission.ACCESS_FINE_LOCATION
+//                        ) == PackageManager.PERMISSION_GRANTED
+//                    ) {
+//                        fusedLocationProvider?.requestLocationUpdates(
+//                            locationRequest,
+//                            locationCallback,
+//                            Looper.getMainLooper()
+//                        )
+//
+//                        Toast.makeText(
+//                            this,
+//                            "Granted Background Location Permission",
+//                            Toast.LENGTH_LONG
+//                        ).show()
+//                    }
+//                } else {
+//
+//                    // permission denied, boo! Disable the
+//                    // functionality that depends on this permission.
+//                    Toast.makeText(this, "permission denied", Toast.LENGTH_LONG).show()
+//                }
+//                return
+//
+//            }
+//        }
+    //}
+//}
+
+
+
+
+
Index: app/src/main/java/web/browser/dragon/ui/tabs/TabsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.tabs\r\n\r\nimport android.content.Context\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.content.res.Configuration\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.RectF\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.preference.PreferenceManager\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.animation.AnimationUtils\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.webkit.JsResult\r\nimport android.webkit.WebChromeClient\r\nimport android.webkit.WebView\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.content.edit\r\nimport androidx.core.view.OnApplyWindowInsetsListener\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.gms.tasks.Tasks\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport de.mrapp.android.tabswitcher.*\r\nimport de.mrapp.android.util.DisplayUtil\r\nimport de.mrapp.android.util.ThemeUtil\r\nimport de.mrapp.android.util.multithreading.AbstractDataBinder\r\nimport kotlinx.android.synthetic.main.activity_browser3.*\r\nimport kotlinx.android.synthetic.main.activity_home.*\r\nimport kotlinx.android.synthetic.main.activity_tabs.*\r\nimport kotlinx.android.synthetic.main.activity_tabs.et_search_field\r\nimport kotlinx.android.synthetic.main.activity_tabs.ib_search_menu\r\nimport kotlinx.android.synthetic.main.activity_tabs.iv_search\r\nimport kotlinx.android.synthetic.main.activity_tabs.rv_search_engines\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.model.SearchEngine\r\nimport web.browser.dragon.ui.browser.BrowserActivity\r\nimport web.browser.dragon.ui.downloads.DownloadsActivity\r\nimport web.browser.dragon.ui.history.HistoryRecordsActivity\r\nimport web.browser.dragon.ui.home.HomeActivity\r\nimport web.browser.dragon.ui.home.search.adapter.SearchEngineAdapter\r\nimport web.browser.dragon.ui.settings.SettingsActivity\r\nimport web.browser.dragon.utils.*\r\nimport java.io.File\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.util.*\r\nimport java.util.concurrent.Callable\r\nimport java.util.concurrent.Executor\r\nimport java.util.concurrent.Executors\r\n\r\n\r\nclass TabsActivity : AppCompatActivity(), TabSwitcherListener {\r\n    private val tab : Tab? = null\r\n\r\n    private var isPreviewAllTabs = true\r\n    private var currentLanguage: String? = null\r\n\r\n    private var isSiteAvailability: Boolean = false\r\n    private var requestToWeb: String? = null\r\n\r\n    private inner class State\r\n    internal constructor(tab: Tab) : AbstractState(tab),\r\n        AbstractDataBinder.Listener<ArrayAdapter<String?>?, Tab, ListView, Void?>,\r\n        TabPreviewListener {\r\n        private var adapter: ArrayAdapter<String?>? = null\r\n\r\n        override fun onCanceled(\r\n            dataBinder: AbstractDataBinder<ArrayAdapter<String?>?, Tab, ListView, Void?>\r\n        ) {\r\n        }\r\n\r\n        override fun saveInstanceState(outState: Bundle) {\r\n            if (adapter != null && !adapter!!.isEmpty) {\r\n                val array = arrayOfNulls<String>(adapter!!.count)\r\n                for (i in array.indices) {\r\n                    array[i] = adapter!!.getItem(i)\r\n                }\r\n                outState.putStringArray(\r\n                    String.format(ADAPTER_STATE_EXTRA, tab.title),\r\n                    array\r\n                )\r\n            }\r\n        }\r\n\r\n        override fun restoreInstanceState(savedInstanceState: Bundle?) {\r\n            if (savedInstanceState != null) {\r\n                val key = String.format(ADAPTER_STATE_EXTRA, tab.title)\r\n                val items = savedInstanceState.getStringArray(key)\r\n                if (items != null && items.size > 0) {\r\n                    adapter = ArrayAdapter(\r\n                        this@TabsActivity,\r\n                        android.R.layout.simple_list_item_1, items\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onLoadTabPreview(\r\n            tabSwitcher: TabSwitcher,\r\n            tab: Tab\r\n        ): Boolean {\r\n            return getTab() != tab || adapter != null\r\n        }\r\n\r\n        override fun onLoadData(\r\n            dataBinder: AbstractDataBinder<ArrayAdapter<String?>?, Tab, ListView, Void?>,\r\n            key: Tab,\r\n            vararg params: Void?\r\n        ): Boolean {\r\n            return true\r\n        }\r\n\r\n        override fun onFinished(\r\n            dataBinder: AbstractDataBinder<ArrayAdapter<String?>?, Tab, ListView, Void?>,\r\n            key: Tab,\r\n            data: ArrayAdapter<String?>?,\r\n            view: ListView,\r\n            vararg params: Void?\r\n        ) {\r\n            if (tab == key) {\r\n                view.adapter = data\r\n                adapter = data\r\n                dataBinder.removeListener(this)\r\n            }\r\n        }\r\n    }\r\n\r\n    private inner class Decorator : StatefulTabSwitcherDecorator<State?>() {\r\n        override fun onCreateState(\r\n            context: Context,\r\n            tabSwitcher: TabSwitcher,\r\n            view: View, tab: Tab,\r\n            index: Int, viewType: Int,\r\n            savedInstanceState: Bundle?\r\n        ): State? {\r\n            if (viewType == 2) {\r\n                val state: State = State(tab)\r\n                tabSwitcher.addTabPreviewListener(state)\r\n                if (savedInstanceState != null) {\r\n                    state.restoreInstanceState(savedInstanceState)\r\n                }\r\n                return state\r\n            }\r\n            return null\r\n        }\r\n\r\n        override fun onClearState(state: State) {\r\n            tabSwitcher!!.removeTabPreviewListener(state)\r\n\r\n        }\r\n\r\n        override fun onSaveInstanceState(\r\n            view: View, tab: Tab,\r\n            index: Int, viewType: Int,\r\n            state: State?,\r\n            outState: Bundle\r\n        ) {\r\n            state?.saveInstanceState(outState)\r\n        }\r\n\r\n        override fun onInflateView(\r\n            inflater: LayoutInflater,\r\n            parent: ViewGroup?, viewType: Int\r\n        ): View {\r\n            val view: View = inflater.inflate(R.layout.tab_text_view, parent, false)\r\n            return view\r\n        }\r\n\r\n        public override fun onShowTab(\r\n            context: Context,\r\n            tabSwitcher: TabSwitcher, view: View,\r\n            tab: Tab, index: Int, viewType: Int,\r\n            state: State?,\r\n            savedInstanceState: Bundle?\r\n        ) {\r\n            val previewSite = findViewById<ImageView>(R.id.preview_site)\r\n            val parameters = tab.parameters\r\n            val path = parameters?.getInt(VIEW_TYPE_EXTRA) ?: 0\r\n            if (previewSite.drawable == null) {\r\n                val imgFile = File(\"$filesDir$path.png\")\r\n\r\n                if (imgFile.exists()) {\r\n                    val myBitmap = BitmapFactory.decodeFile(imgFile.absolutePath)\r\n                    previewSite.setImageBitmap(myBitmap)\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun getViewTypeCount(): Int {\r\n            return 1\r\n        }\r\n\r\n        override fun getViewType(tab: Tab, index: Int): Int {\r\n            val parameters = tab.parameters\r\n            return parameters?.getInt(VIEW_TYPE_EXTRA) ?: 0\r\n        }\r\n    }\r\n\r\n    private class DataBinder\r\n        (context: Context) :\r\n        AbstractDataBinder<ArrayAdapter<String?>?, Tab, ListView, Void?>(context.applicationContext) {\r\n\r\n        override fun doInBackground(key: Tab, vararg params: Void?): ArrayAdapter<String?>? {\r\n            val array = arrayOfNulls<String>(10)\r\n            for (i in array.indices) {\r\n                array[i] = String.format(Locale.getDefault(), \"%s, item %d\", key.title, i + 1)\r\n            }\r\n            try {\r\n                Thread.sleep(1000)\r\n            } catch (e: InterruptedException) {\r\n            }\r\n            return ArrayAdapter(context, android.R.layout.simple_list_item_1, array)\r\n        }\r\n\r\n        override fun onPostExecute(\r\n            view: ListView,\r\n            data: ArrayAdapter<String?>?,\r\n            duration: Long,\r\n            vararg params: Void?\r\n        ) {\r\n            if (data != null) {\r\n                view.adapter = data\r\n            }\r\n        }\r\n    }\r\n\r\n    private var tabSwitcher: TabSwitcher? = null\r\n\r\n    private var decorator: Decorator? = null\r\n\r\n    private var snackbar: Snackbar? = null\r\n\r\n    private var dataBinder: DataBinder? = null\r\n\r\n    private fun createWindowInsetsListener(): OnApplyWindowInsetsListener {\r\n        return OnApplyWindowInsetsListener { v, insets ->\r\n            val left = insets.systemWindowInsetLeft\r\n            val top = insets.systemWindowInsetTop\r\n            val right = insets.systemWindowInsetRight\r\n            val bottom = insets.systemWindowInsetBottom\r\n            tabSwitcher!!.setPadding(left, top, right, bottom)\r\n            var touchableAreaTop = top.toFloat()\r\n            if (tabSwitcher!!.layout == Layout.TABLET) {\r\n                touchableAreaTop += resources\r\n                    .getDimensionPixelSize(de.mrapp.android.tabswitcher.R.dimen.tablet_tab_container_height).toFloat()\r\n            }\r\n            val touchableArea = RectF(\r\n                left.toFloat(),\r\n                touchableAreaTop,\r\n                (DisplayUtil.getDisplayWidth(this@TabsActivity) - right).toFloat(),\r\n                touchableAreaTop +\r\n                        ThemeUtil.getDimensionPixelSize(this@TabsActivity, androidx.appcompat.R.attr.actionBarSize)\r\n            )\r\n            tabSwitcher!!.addDragGesture(\r\n                SwipeGesture.Builder().setTouchableArea(touchableArea).create()\r\n            )\r\n            tabSwitcher!!.addDragGesture(\r\n                PullDownGesture.Builder().setTouchableArea(touchableArea).create()\r\n            )\r\n            insets\r\n        }\r\n    }\r\n\r\n    private fun createTabSwitcherButtonListener(): View.OnClickListener {\r\n        return View.OnClickListener {\r\n            isPreviewAllTabs = true\r\n            tabSwitcher!!.toggleSwitcherVisibility()\r\n        }\r\n    }\r\n\r\n    private fun createTab(title: String, index: Int): Tab {\r\n        val tab = Tab(title)\r\n        val parameters = Bundle()\r\n        parameters.putInt(VIEW_TYPE_EXTRA, index)\r\n        tab.parameters = parameters\r\n        return tab\r\n    }\r\n\r\n    override fun onSwitcherShown(tabSwitcher: TabSwitcher) {}\r\n    override fun onSwitcherHidden(tabSwitcher: TabSwitcher) {\r\n        if (snackbar != null) {\r\n            snackbar!!.dismiss()\r\n        }\r\n    }\r\n\r\n    private var isStartLaunchTabs = false\r\n\r\n    override fun onSelectionChanged(\r\n        tabSwitcher: TabSwitcher,\r\n        selectedTabIndex: Int,\r\n        selectedTab: Tab?\r\n    ) {\r\n        if (selectedTabIndex != -1) {\r\n            if (isStartLaunchTabs) {\r\n                val parameters = selectedTab!!.parameters\r\n                val path = parameters?.getInt(VIEW_TYPE_EXTRA) ?: 0\r\n                startActivity(\r\n                    BrowserActivity.newIntent(\r\n                        this@TabsActivity,\r\n                        getSharedPreferences(\r\n                            if (!isIncognitoMode(this@TabsActivity)) nameTabs else nameTabsOfIncognito,\r\n                            Context.MODE_PRIVATE\r\n                        ).getString(path.toString(), null)!!.split(\"/////?\")[0],\r\n                        true,\r\n                        path\r\n                    )\r\n                )\r\n            } else {\r\n                isStartLaunchTabs = false\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onTabAdded(\r\n        tabSwitcher: TabSwitcher, index: Int,\r\n        tab: Tab, animation: Animation\r\n    ) {\r\n        TabSwitcher.setupWithMenu(tabSwitcher, createTabSwitcherButtonListener())\r\n    }\r\n\r\n    override fun onTabRemoved(\r\n        tabSwitcher: TabSwitcher, index: Int,\r\n        tab: Tab, animation: Animation\r\n    ) {\r\n        TabSwitcher.setupWithMenu(tabSwitcher, createTabSwitcherButtonListener())\r\n        val parameters = tab.parameters\r\n        val path = parameters?.getInt(VIEW_TYPE_EXTRA) ?: 0\r\n        val removeItem = \"${tab.title}/////?$path\"\r\n\r\n\r\n        tabSwitcher.clearSavedState(tab)\r\n        decorator!!.clearState(tab)\r\n        if (!isChangeMode) {\r\n            getSharedPreferences(\r\n                if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,\r\n                Context.MODE_PRIVATE\r\n            ).edit {\r\n                this.remove(path.toString())\r\n            }\r\n            val imgFile = File(\"$filesDir$path.png\")\r\n            imgFile.delete()\r\n        }\r\n    }\r\n\r\n    override fun onAllTabsRemoved(\r\n        tabSwitcher: TabSwitcher,\r\n        tabs: Array<Tab>,\r\n        animation: Animation\r\n    ) {\r\n        val text: CharSequence = getString(R.string.cleared_tabs_snackbar)\r\n        TabSwitcher.setupWithMenu(tabSwitcher, createTabSwitcherButtonListener())\r\n        for (tab in tabs) {\r\n            val parameters = tab.parameters\r\n            val path = parameters?.getInt(VIEW_TYPE_EXTRA) ?: 0\r\n            val removeItem = \"${tab.title}/////?$path\"\r\n\r\n            tabSwitcher!!.clearSavedState(tab)\r\n            decorator!!.clearState(tab)\r\n            if (!isChangeMode) {\r\n                getSharedPreferences(\r\n                    if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,\r\n                    Context.MODE_PRIVATE\r\n                ).edit {\r\n                    this.remove(path.toString())\r\n                }\r\n                val imgFile = File(\"$filesDir$path.png\")\r\n                imgFile.delete()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun setTheme(resid: Int) {\r\n        val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)\r\n        val themeKey = getString(R.string.theme_preference_key)\r\n        val themeDefaultValue = getString(R.string.theme_preference_default_value)\r\n        val theme = Integer.valueOf(sharedPreferences.getString(themeKey, themeDefaultValue))\r\n        if (theme != 0) {\r\n            super.setTheme(R.style.AppTheme_Translucent_Dark)\r\n        } else {\r\n            super.setTheme(R.style.AppTheme_Translucent_Light)\r\n        }\r\n    }\r\n\r\n    private var searchEngineAdapter: SearchEngineAdapter? = null\r\n\r\n    private val nameTabs = \"tabs\"\r\n    private val nameTabsOfIncognito = \"tabs_incognito\"\r\n\r\n    private var isChangeMode = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_tabs)\r\n\r\n        currentLanguage = getSharedPreferences(\r\n            Constants.Settings.SETTINGS_LANGUAGE,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n        )\r\n        dataBinder = DataBinder(this)\r\n        decorator = Decorator()\r\n        tabSwitcher = findViewById(R.id.tab_switcher)\r\n        tabSwitcher!!.setPreserveState(false)\r\n        tabSwitcher!!.clearSavedStatesWhenRemovingTabs(true)\r\n        ViewCompat.setOnApplyWindowInsetsListener(tabSwitcher!!, createWindowInsetsListener())\r\n        tabSwitcher!!.decorator = decorator!!\r\n        tabSwitcher!!.addListener(this)\r\n        tabSwitcher!!.setEmptyView(R.layout.empty_view)\r\n        tabSwitcher!!.showToolbars(true)\r\n        val data = getSharedPreferences(\r\n            if (!isIncognitoMode(this)) nameTabs else nameTabsOfIncognito,\r\n            Context.MODE_PRIVATE\r\n        ).all\r\n        for (item in data) {\r\n            val chapters = item.value.toString().split(\"/////?\")\r\n            Log.d(\"chapters\", chapters.joinToString(\"|\"))\r\n            Log.d(\"chapters1\", chapters.toString())\r\n            if (chapters.size == 2) tabSwitcher!!.addTab(createTab(\"Tab\", chapters[1].toInt()), 0)\r\n            else {\r\n                if (chapters[2].isNotEmpty()) tabSwitcher!!.addTab(\r\n                    createTab(\r\n                        chapters[2],\r\n                        chapters[1].toInt()\r\n                    ), 0\r\n                )\r\n                else tabSwitcher!!.addTab(createTab(chapters[0], chapters[1].toInt()), 0)\r\n            }\r\n        }\r\n\r\n        tabSwitcher!!.toggleSwitcherVisibility()\r\n\r\n        TabSwitcher.setupWithMenu(tabSwitcher!!, createTabSwitcherButtonListener())\r\n        initRecyclers()\r\n        setOnClickListeners()\r\n        setOnActionListeners()\r\n        setSearchEngine()\r\n        incognitoMode()\r\n        animationTabs()\r\n    }\r\n\r\n    private fun setSearchEngine() {\r\n        val searchEngine = getSelectedSearchEngine(this)\r\n\r\n        if (searchEngine != null) {\r\n            saveSelectedSearchEngine(this, searchEngine)\r\n            searchEngineAdapter?.selectItem(searchEngine)\r\n        } else {\r\n            val googleSearchEngine = getSearchEngines(this)[0]\r\n            saveSelectedSearchEngine(this, googleSearchEngine)\r\n            searchEngineAdapter?.selectItem(googleSearchEngine)\r\n        }\r\n    }\r\n\r\n    private fun setOnActionListeners() {\r\n        et_search_field?.setOnEditorActionListener { _, actionId, _ ->\r\n            if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                onSearchClicked()\r\n                return@setOnEditorActionListener true\r\n            }\r\n            false\r\n        }\r\n    }\r\n\r\n    private fun setOnClickListeners() {\r\n        iv_search?.setOnClickListener {\r\n            onSearchClicked()\r\n        }\r\n        iv_add_tabs?.setOnClickListener {\r\n            startActivity(HomeActivity.newIntent(this))\r\n        }\r\n        close.setOnClickListener {\r\n            tabSwitcher?.clear()\r\n            close.visibility = View.GONE\r\n        }\r\n        ib_search_menu?.setOnClickListener {\r\n            showMenu()\r\n        }\r\n        rl_incognito.setOnClickListener {\r\n            incognitoMode(true)\r\n        }\r\n    }\r\n\r\n    private fun incognitoMode(isClick: Boolean = false) {\r\n        if (isClick) {\r\n            isStartLaunchTabs = false\r\n            isChangeMode = true\r\n            tabSwitcher!!.clear()\r\n            if (isIncognitoMode(this)) {\r\n                offIncognitoMode()\r\n                setIsIncognitoMode(this, close.isSelected)\r\n                for (item in getSharedPreferences(nameTabs, Context.MODE_PRIVATE).all) {\r\n                    val chapters = item.value.toString().split(\"/////?\")\r\n                    if (chapters.size == 2) tabSwitcher!!.addTab(\r\n                        createTab(\r\n                            \"Tab\",\r\n                            chapters[1].toInt()\r\n                        ), 0\r\n                    )\r\n                    else tabSwitcher!!.addTab(createTab(chapters[2], chapters[1].toInt()), 0)\r\n                }\r\n            } else {\r\n                onIncognitoMode()\r\n                setIsIncognitoMode(this, close.isSelected)\r\n                for (item in getSharedPreferences(nameTabsOfIncognito, Context.MODE_PRIVATE).all) {\r\n                    val chapters = item.value.toString().split(\"/////?\")\r\n                    if (chapters.size == 2) tabSwitcher!!.addTab(\r\n                        createTab(\r\n                            \"Tab\",\r\n                            chapters[1].toInt()\r\n                        ), 0\r\n                    )\r\n                    else tabSwitcher!!.addTab(createTab(chapters[2], chapters[1].toInt()), 0)\r\n                }\r\n            }\r\n            isChangeMode = false\r\n        } else {\r\n            isChangeMode = false\r\n            if (isIncognitoMode(this)) {\r\n                onIncognitoMode()\r\n            } else {\r\n                offIncognitoMode()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun onIncognitoMode() {\r\n        close.isSelected = true\r\n        rl_incognito.isSelected = true\r\n        iv_incognito.setColorFilter(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_buttons_tabs.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        iv_add_tabs.setImageResource(R.drawable.ic_add_tab_incognito)\r\n        cl_main_tabs.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        tab_switcher.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n    }\r\n\r\n    private fun offIncognitoMode() {\r\n        close.isSelected = false\r\n        rl_incognito.isSelected = false\r\n        iv_incognito.setColorFilter(ContextCompat.getColor(this, R.color.grey_2))\r\n        cl_buttons_tabs.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        iv_add_tabs.setImageResource(R.drawable.ic_add_tab)\r\n        if (onCheckTheme(this)) {\r\n            cl_main_tabs.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n            tab_switcher.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        } else {\r\n            cl_main_tabs.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n            tab_switcher.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        }\r\n    }\r\n\r\n    private fun showMenu() {\r\n        val menu =\r\n            PopupMenu(\r\n                this,\r\n                ib_search_menu\r\n            )\r\n        menu.inflate(R.menu.tabs_menu)\r\n        menu.setOnMenuItemClickListener {\r\n            when (it.itemId) {\r\n                R.id.clear_tabs_menu_item -> {\r\n                    tabSwitcher!!.clear()\r\n                }\r\n                R.id.item_settings -> {\r\n                    startActivity(SettingsActivity.newIntent(this))\r\n                }\r\n                R.id.item_history -> {\r\n                    startActivity(HistoryRecordsActivity.newIntent(this))\r\n                }\r\n                R.id.item_downloads -> {\r\n                    startActivity(DownloadsActivity.newIntent(this))\r\n                }\r\n            }\r\n            false\r\n        }\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            menu.setForceShowIcon(true)\r\n        }\r\n        menu.show()\r\n    }\r\n\r\n    private fun onSearchClicked() {\r\n        val searchText = et_search_field?.text?.toString()\r\n\r\n        if (!searchText.isNullOrEmpty()) {\r\n\r\n            if (searchText.contains(\".\") && !searchText.contains(\" \")) {\r\n                requestToWeb =\r\n                    if (searchText.startsWith(\"http://\") || searchText.startsWith(\"https://\")) searchText else \"http://$searchText\"\r\n\r\n                createHttpTask(requestToWeb!!)\r\n                    .addOnSuccessListener {\r\n                        isSiteAvailability = true\r\n                        startActivity(\r\n                            BrowserActivity.newIntent(\r\n                                this,\r\n                                requestToWeb,\r\n                                isSiteAvailability = isSiteAvailability\r\n                            )\r\n                        )\r\n                    }\r\n                    .addOnFailureListener {\r\n                        requestToWeb = requestToWeb!!.replace(\"http://\", \"\")\r\n                        isSiteAvailability = false\r\n                        if (it.message == \"Error: 301\") {\r\n                            requestToWeb = \"https://$requestToWeb\"\r\n                            createHttpTask(requestToWeb!!)\r\n                                .addOnSuccessListener {\r\n                                    isSiteAvailability = true\r\n                                    startActivity(\r\n                                        BrowserActivity.newIntent(\r\n                                            this,\r\n                                            requestToWeb,\r\n                                            isSiteAvailability = isSiteAvailability\r\n                                        )\r\n                                    )\r\n                                }\r\n                                .addOnFailureListener {\r\n                                    requestToWeb = requestToWeb!!.replace(\"https://\", \"\")\r\n                                    isSiteAvailability = false\r\n                                    startActivity(\r\n                                        BrowserActivity.newIntent(\r\n                                            this,\r\n                                            requestToWeb,\r\n                                            isSiteAvailability = isSiteAvailability\r\n                                        )\r\n                                    )\r\n                                }\r\n                        } else {\r\n                            startActivity(\r\n                                BrowserActivity.newIntent(\r\n                                    this,\r\n                                    requestToWeb,\r\n                                    isSiteAvailability = isSiteAvailability\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n            } else {\r\n                isSiteAvailability = false\r\n                requestToWeb = searchText\r\n                startActivity(\r\n                    BrowserActivity.newIntent(\r\n                        this,\r\n                        requestToWeb,\r\n                        isSiteAvailability = isSiteAvailability\r\n                    )\r\n                )\r\n            }\r\n        } else {\r\n            Toast.makeText(this, getString(R.string.search_empty_error), Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    private fun initRecyclers() {\r\n        searchEngineAdapter = SearchEngineAdapter(arrayListOf()) {\r\n            onSearchEngineClicked(it)\r\n        }\r\n        rv_search_engines?.layoutManager =\r\n            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        rv_search_engines?.adapter = searchEngineAdapter\r\n\r\n        searchEngineAdapter?.updateData(getSearchEngines(this))\r\n    }\r\n\r\n    private fun onSearchEngineClicked(searchEngine: SearchEngine) {\r\n        saveSelectedSearchEngine(this, searchEngine)\r\n        searchEngineAdapter?.selectItem(searchEngine)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        val previewSite = findViewById<ImageView>(R.id.preview_site)\r\n        if (previewSite != null) {\r\n            if (previewSite.drawable != null) {\r\n                finish()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        val newestLanguage = getSharedPreferences(\r\n            Constants.Settings.SETTINGS_LANGUAGE,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n        )\r\n        if (currentLanguage == null) currentLanguage = getSharedPreferences(\r\n            Constants.Settings.SETTINGS_LANGUAGE,\r\n            Context.MODE_PRIVATE\r\n        ).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n        )\r\n        if (currentLanguage != newestLanguage) {\r\n            recreate()\r\n        }\r\n    }\r\n\r\n    override fun attachBaseContext(base: Context) {\r\n        super.attachBaseContext(applySelectedAppLanguage(base))\r\n    }\r\n\r\n    private fun applySelectedAppLanguage(context: Context): Context {\r\n        val newestLanguage =\r\n            context.getSharedPreferences(Constants.Settings.SETTINGS_LANGUAGE, Context.MODE_PRIVATE)\r\n                .getString(\r\n                    Constants.Settings.SETTINGS_LANGUAGE, \"en\"\r\n                )\r\n        val locale = Locale(newestLanguage)\r\n        val newConfig = Configuration(context.resources.configuration)\r\n        Locale.setDefault(locale)\r\n        newConfig.setLocale(locale)\r\n        return context.createConfigurationContext(newConfig)\r\n    }\r\n\r\n    private val mExecutor: Executor = Executors.newSingleThreadExecutor()\r\n\r\n    private fun createHttpTask(u: String): Task<String> {\r\n        return Tasks.call(mExecutor, Callable<String> {\r\n            val url = URL(u)\r\n            val conn: HttpURLConnection = url.openConnection() as HttpURLConnection\r\n            conn.requestMethod = \"GET\"\r\n            conn.connectTimeout = 1000\r\n            conn.readTimeout = 1000\r\n            val rc = conn.responseCode\r\n            if (rc != HttpURLConnection.HTTP_OK) {\r\n                conn.disconnect()\r\n                throw Exception(\"Error: ${rc}\")\r\n            } else {\r\n                conn.disconnect()\r\n                return@Callable \"true\"\r\n            }\r\n        })\r\n    }\r\n    private fun animationTabs() {\r\n        val ttb = AnimationUtils.loadAnimation(this, R.anim.ttb)\r\n        //ImageView\r\n        val stb = AnimationUtils.loadAnimation(this, R.anim.stb)\r\n        //LinearLayout\r\n        val btt = AnimationUtils.loadAnimation(this, R.anim.btt)\r\n        val btt2 = AnimationUtils.loadAnimation(this, R.anim.btt2)\r\n        val btt3 = AnimationUtils.loadAnimation(this, R.anim.btt3)\r\n        val btt4 = AnimationUtils.loadAnimation(this, R.anim.btt4)\r\n        //Button\r\n        val button_course = AnimationUtils.loadAnimation(this, R.anim.button_course)\r\n\r\n        val rc = findViewById(R.id.rv_search_engines) as RecyclerView\r\n        val cl_main_bar = findViewById(R.id.cl_main_bar) as ConstraintLayout\r\n        val tab_switcher = findViewById(R.id.tab_switcher) as TabSwitcher\r\n\r\n        val cl_buttons_tabs = findViewById(R.id.cl_buttons_tabs) as ConstraintLayout\r\n\r\n        rc.startAnimation(btt)\r\n        cl_main_bar.startAnimation(btt2)\r\n        tab_switcher.startAnimation(stb)\r\n        cl_buttons_tabs.startAnimation(btt3)\r\n    }\r\n\r\n    companion object {\r\n        fun newIntent(context: Context) = Intent(context, TabsActivity::class.java)\r\n        val VIEW_TYPE_EXTRA = TabsActivity::class.java.name + \"::ViewType\"\r\n\r\n        private val ADAPTER_STATE_EXTRA = State::class.java.name + \"::%s::AdapterState\"\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/tabs/TabsActivity.kt b/app/src/main/java/web/browser/dragon/ui/tabs/TabsActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/tabs/TabsActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/tabs/TabsActivity.kt	
@@ -286,7 +286,10 @@
         return tab
     }
 
-    override fun onSwitcherShown(tabSwitcher: TabSwitcher) {}
+    override fun onSwitcherShown(tabSwitcher: TabSwitcher) {
+
+
+    }
     override fun onSwitcherHidden(tabSwitcher: TabSwitcher) {
         if (snackbar != null) {
             snackbar!!.dismiss()
@@ -300,7 +303,7 @@
         selectedTabIndex: Int,
         selectedTab: Tab?
     ) {
-        if (selectedTabIndex != -1) {
+        if (selectedTabIndex != -1 ) {
             if (isStartLaunchTabs) {
                 val parameters = selectedTab!!.parameters
                 val path = parameters?.getInt(VIEW_TYPE_EXTRA) ?: 0
@@ -671,7 +674,7 @@
             LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)
         rv_search_engines?.adapter = searchEngineAdapter
 
-        searchEngineAdapter?.updateData(getSearchEngines(this))
+        searchEngineAdapter?.updateData(getSearchEngines(this ))
     }
 
     private fun onSearchEngineClicked(searchEngine: SearchEngine) {
@@ -693,6 +696,7 @@
     override fun onResume() {
         super.onResume()
 
+
         val newestLanguage = getSharedPreferences(
             Constants.Settings.SETTINGS_LANGUAGE,
             Context.MODE_PRIVATE
@@ -758,11 +762,11 @@
         //Button
         val button_course = AnimationUtils.loadAnimation(this, R.anim.button_course)
 
-        val rc = findViewById(R.id.rv_search_engines) as RecyclerView
-        val cl_main_bar = findViewById(R.id.cl_main_bar) as ConstraintLayout
-        val tab_switcher = findViewById(R.id.tab_switcher) as TabSwitcher
+        val rc = findViewById<RecyclerView>(R.id.rv_search_engines)
+        val cl_main_bar = findViewById<ConstraintLayout>(R.id.cl_main_bar)
+        val tab_switcher = findViewById<TabSwitcher>(R.id.tab_switcher)
 
-        val cl_buttons_tabs = findViewById(R.id.cl_buttons_tabs) as ConstraintLayout
+        val cl_buttons_tabs = findViewById<ConstraintLayout>(R.id.cl_buttons_tabs)
 
         rc.startAnimation(btt)
         cl_main_bar.startAnimation(btt2)
Index: app/src/main/java/web/browser/dragon/ui/home/bookmarks/BookmarksHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.home.bookmarks\r\n\r\nimport android.net.Uri\r\nimport android.view.View\r\nimport android.widget.ImageView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.github.twocoffeesoneteam.glidetovectoryou.GlideToVectorYou\r\nimport web.browser.dragon.model.Bookmark\r\nimport web.browser.dragon.utils.loadImage\r\nimport kotlinx.android.synthetic.main.item_bookmark.view.*\r\n\r\nclass BookmarksHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n\r\n    fun bind(\r\n        data: Bookmark,\r\n        onItemClickListener: (Bookmark) -> Unit,\r\n        onEditClickListener: (Bookmark) -> Unit,\r\n        onRemoveClickListener: (Bookmark) -> Unit\r\n    ) {\r\n        itemView.setOnClickListener { onItemClickListener(data) }\r\n        itemView.iv_edit?.setOnClickListener { onEditClickListener(data) }\r\n        itemView.iv_remove?.setOnClickListener { onRemoveClickListener(data) }\r\n\r\n        if (!data.image.isNullOrEmpty()) {\r\n            if(data.image?.contains(\".svg\") == true) {\r\n                GlideToVectorYou\r\n                    .init()\r\n                    .with(itemView.context)\r\n                    .load(Uri.parse(data.image), itemView.iv_bookmark_image)\r\n            }\r\n            else {\r\n                loadImage(itemView.context, itemView.iv_bookmark_image, null, data.image)\r\n            }\r\n        }\r\n        else {\r\n            if(data.localImage != null) {\r\n                itemView.iv_bookmark_image?.scaleType = ImageView.ScaleType.CENTER_CROP\r\n                itemView.iv_bookmark_image?.setImageResource(data.localImage!!)\r\n            }else{\r\n                itemView.iv_bookmark_image.setImageBitmap(data.imageBitmap)\r\n            }\r\n        }\r\n\r\n        if(data.isEditableNow == null) {\r\n            itemView.setOnClickListener { onItemClickListener(data) }\r\n            if (data.isInEditableMode) {\r\n                itemView.iv_remove?.visibility = View.VISIBLE\r\n                itemView.iv_edit?.visibility = View.VISIBLE\r\n            } else {\r\n                itemView.iv_remove?.visibility = View.GONE\r\n                itemView.iv_edit?.visibility = View.GONE\r\n            }\r\n\r\n            itemView.v_white_area?.visibility = View.GONE\r\n        }\r\n        else {\r\n            itemView.setOnClickListener { }\r\n            if (data.isEditableNow!!) {\r\n                itemView.iv_remove?.visibility = View.GONE\r\n                itemView.iv_edit?.visibility = View.GONE\r\n\r\n                itemView.v_white_area?.visibility = View.GONE\r\n            }\r\n            else {\r\n                itemView.iv_remove?.visibility = View.GONE\r\n                itemView.iv_edit?.visibility = View.GONE\r\n\r\n                itemView.v_white_area?.visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/home/bookmarks/BookmarksHolder.kt b/app/src/main/java/web/browser/dragon/ui/home/bookmarks/BookmarksHolder.kt
--- a/app/src/main/java/web/browser/dragon/ui/home/bookmarks/BookmarksHolder.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/home/bookmarks/BookmarksHolder.kt	
@@ -6,8 +6,8 @@
 import androidx.recyclerview.widget.RecyclerView
 import com.github.twocoffeesoneteam.glidetovectoryou.GlideToVectorYou
 import web.browser.dragon.model.Bookmark
-import web.browser.dragon.utils.loadImage
 import kotlinx.android.synthetic.main.item_bookmark.view.*
+import web.browser.dragon.utils.loadImage
 
 class BookmarksHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
 
Index: app/src/main/java/web/browser/dragon/ui/history/HistoryRecordsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.history\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.res.Configuration\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport androidx.activity.viewModels\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport web.browser.dragon.WebBrowserDragon\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.database.history.HistoryRecordsViewModel\r\nimport web.browser.dragon.database.history.HistoryRecordsViewModelFactory\r\nimport web.browser.dragon.model.HistoryRecord\r\nimport web.browser.dragon.ui.browser.BrowserActivity\r\nimport web.browser.dragon.ui.history.adapter.HistoryRecordAdapter\r\nimport web.browser.dragon.utils.Constants\r\nimport web.browser.dragon.utils.onCheckTheme\r\nimport kotlinx.android.synthetic.main.activity_history_records.*\r\nimport kotlinx.android.synthetic.main.activity_history_records.cl_toolbar\r\nimport kotlinx.android.synthetic.main.activity_history_records.content\r\nimport kotlinx.android.synthetic.main.activity_history_records.iv_back\r\nimport kotlinx.android.synthetic.main.activity_history_records.tv_toolbar_title\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\nclass HistoryRecordsActivity : AppCompatActivity() {\r\n\r\n    companion object {\r\n        fun newIntent(context: Context) = Intent(context, HistoryRecordsActivity::class.java)\r\n    }\r\n\r\n    private val historyRecordsViewModel: HistoryRecordsViewModel by viewModels {\r\n        HistoryRecordsViewModelFactory((this.application as WebBrowserDragon).historyRecordsRepository)\r\n    }\r\n\r\n    private var adapter: HistoryRecordAdapter? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_history_records)\r\n\r\n        if(onCheckTheme(this)) darkMode()\r\n\r\n        initRecycler()\r\n        observeHistoryRecords()\r\n        setOnClickListener()\r\n    }\r\n\r\n    private fun darkMode() {\r\n        tv_toolbar_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_toolbar.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        content.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n    }\r\n\r\n    private fun setOnClickListener() {\r\n        iv_back?.setOnClickListener {\r\n            finish()\r\n        }\r\n    }\r\n\r\n    private fun initRecycler() {\r\n        adapter = HistoryRecordAdapter(arrayListOf(), {\r\n            onHistoryRecordClicked(it)\r\n        }, {\r\n            onDeleteHistoryRecordClicked(it)\r\n        })\r\n        rv_history_records?.layoutManager = LinearLayoutManager(this)\r\n        rv_history_records?.adapter = adapter\r\n    }\r\n\r\n    private fun onHistoryRecordClicked(historyRecord: HistoryRecord) {\r\n        startActivity(BrowserActivity.newIntent(this, historyRecord.link))\r\n    }\r\n\r\n    private fun onDeleteHistoryRecordClicked(historyRecord: HistoryRecord) {\r\n        AlertDialog.Builder(this)\r\n            .setCancelable(false)\r\n            .setMessage(getString(R.string.history_records_delete_message))\r\n            .setPositiveButton(\r\n                getString(R.string.yes)\r\n            ) { dialog, _ ->\r\n                historyRecordsViewModel.delete(historyRecord).observe(this, Observer {\r\n                    it?.let {\r\n                        adapter?.removeItem(historyRecord)\r\n                        dialog.dismiss()\r\n                    }\r\n                })\r\n            }\r\n            .setNegativeButton(\r\n                getString(R.string.no)\r\n            ) { dialog, _ ->\r\n                dialog.dismiss()\r\n            }\r\n            .show()\r\n    }\r\n\r\n    private fun observeHistoryRecords() {\r\n        historyRecordsViewModel?.visibleHistoryRecords?.observe(this, Observer {\r\n            it?.let {\r\n                adapter?.updateData(ArrayList(it))\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun attachBaseContext(base: Context) {\r\n        super.attachBaseContext(applySelectedAppLanguage(base))\r\n    }\r\n\r\n    private fun applySelectedAppLanguage(context: Context): Context {\r\n        val newestLanguage = context.getSharedPreferences(Constants.Settings.SETTINGS_LANGUAGE, Context.MODE_PRIVATE).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\")\r\n        val locale = Locale(newestLanguage)\r\n        val newConfig = Configuration(context.resources.configuration)\r\n        Locale.setDefault(locale)\r\n        newConfig.setLocale(locale)\r\n        return context.createConfigurationContext(newConfig)\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/history/HistoryRecordsActivity.kt b/app/src/main/java/web/browser/dragon/ui/history/HistoryRecordsActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/history/HistoryRecordsActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/history/HistoryRecordsActivity.kt	
@@ -17,13 +17,13 @@
 import web.browser.dragon.model.HistoryRecord
 import web.browser.dragon.ui.browser.BrowserActivity
 import web.browser.dragon.ui.history.adapter.HistoryRecordAdapter
-import web.browser.dragon.utils.Constants
-import web.browser.dragon.utils.onCheckTheme
 import kotlinx.android.synthetic.main.activity_history_records.*
 import kotlinx.android.synthetic.main.activity_history_records.cl_toolbar
 import kotlinx.android.synthetic.main.activity_history_records.content
 import kotlinx.android.synthetic.main.activity_history_records.iv_back
 import kotlinx.android.synthetic.main.activity_history_records.tv_toolbar_title
+import web.browser.dragon.utils.Constants
+import web.browser.dragon.utils.onCheckTheme
 import java.util.*
 import kotlin.collections.ArrayList
 
Index: app/src/main/java/web/browser/dragon/ui/settings/SettingsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.settings\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.res.Configuration\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.EditText\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.content.edit\r\nimport androidx.webkit.ProxyConfig\r\nimport androidx.webkit.ProxyController\r\nimport androidx.webkit.WebViewFeature\r\nimport kotlinx.android.synthetic.main.activity_settings.*\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.model.Settings\r\nimport web.browser.dragon.ui.home.HomeActivity\r\nimport web.browser.dragon.utils.Constants.Settings.SETTINGS_LANGUAGE\r\nimport web.browser.dragon.utils.Constants.Settings.SETTINGS_PROXY\r\nimport web.browser.dragon.utils.Constants.Settings.SETTINGS_USER_AGENT\r\nimport web.browser.dragon.utils.onCheckTheme\r\nimport web.browser.dragon.utils.setOnCheckTheme\r\nimport web.browser.dragon.utils.settings.AGENTS\r\nimport web.browser.dragon.utils.settings.getSettings\r\nimport web.browser.dragon.utils.settings.saveSettings\r\nimport java.util.*\r\nimport java.util.concurrent.Executor\r\n\r\n\r\nclass SettingsActivity : AppCompatActivity() {\r\n\r\n    companion object {\r\n        fun newIntent(context: Context) = Intent(context, SettingsActivity::class.java)\r\n    }\r\n\r\n    private var settings: Settings? = null\r\n    private var languagesArray: Array<String>? = null\r\n    private var languagesCodeArray: Array<String>? = null\r\n\r\n    private val REQUEST_DIRECTORY = 10\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setContentView(R.layout.activity_settings)\r\n\r\n        if(onCheckTheme(this)) {\r\n            iv_colored_mode_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n            darkMode()\r\n        }\r\n        else {\r\n            iv_colored_mode_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n            lightMode()\r\n        }\r\n        settings = getSettings(this)\r\n\r\n        languagesArray = resources.getStringArray(R.array.languages)\r\n        languagesCodeArray = resources.getStringArray(R.array.languages_code)\r\n\r\n        setOnClickListeners()\r\n        setData()\r\n    }\r\n\r\n    override fun onCreateContextMenu(menu: ContextMenu, v: View, menuInfo: ContextMenu.ContextMenuInfo?) {\r\n        for((index, language) in languagesArray!!.withIndex()){\r\n            menu.add(language)\r\n                .setOnMenuItemClickListener { item: MenuItem? ->\r\n                    onChangeDefaultLanguage(languagesCodeArray!![index])\r\n                    true\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    private fun setOnClickListeners() {\r\n        iv_back?.setOnClickListener { onBackPressed() }\r\n        iv_without_images_checkbox?.setOnClickListener { onWithoutImagesClicked() }\r\n        cl_without_images?.setOnClickListener { onWithoutImagesClicked() }\r\n        iv_block_ads_checkbox?.setOnClickListener { onBlockAdsClicked() }\r\n        cl_block_ads?.setOnClickListener { onBlockAdsClicked() }\r\n        iv_enable_js_checkbox?.setOnClickListener { onEnableJavaScriptClicked() }\r\n        cl_enable_js?.setOnClickListener { onEnableJavaScriptClicked() }\r\n        cl_colored_mode?.setOnClickListener { onEnableColorModeScriptClicked() }\r\n        iv_colored_mode_checkbox?.setOnClickListener { onEnableColorModeScriptClicked() }\r\n        registerForContextMenu(cl_language)\r\n        cl_language?.setOnClickListener { openContextMenu(it) }\r\n        cl_new_tab?.setOnClickListener { startActivity(HomeActivity.newIntent(this)) }\r\n\r\n        cl_user_agent?.setOnClickListener {\r\n            val builder = AlertDialog.Builder(this@SettingsActivity)\r\n            builder.setTitle(getString(R.string.user_agent))\r\n\r\n            val viewInflated: View = LayoutInflater.from(this@SettingsActivity)\r\n                .inflate(R.layout.input_user_agent, parent as ViewGroup?, false)\r\n            val inputUserAgent = viewInflated.findViewById<EditText>(R.id.input_user_agent)\r\n            if(tv_user_agent_description?.text.toString().isNotEmpty()) inputUserAgent.setText(tv_user_agent_description?.text)\r\n            builder.setView(viewInflated)\r\n            val agentList = arrayListOf<String>()\r\n            AGENTS.values().forEach { agentList.add(it.agent) }\r\n            val agents: Array<String> = agentList.toArray(arrayOfNulls<String>(0))\r\n            val checkedItem = 1\r\n\r\n            builder.setSingleChoiceItems(agents, checkedItem) { dialogInterface, i ->\r\n                tv_user_agent_description.text = agents[i]\r\n                inputUserAgent.setText(agents[i])\r\n            }\r\n\r\n            builder.setPositiveButton(\r\n                android.R.string.ok\r\n            ) { dialog, which ->\r\n                dialog.dismiss()\r\n                if(inputUserAgent.text.isEmpty()){\r\n                    tv_user_agent_description?.text = getString(R.string.settings_http_user_choice)\r\n                    setUserAgent(null)\r\n                }else{\r\n                    tv_user_agent_description?.text = inputUserAgent.text.toString()\r\n                    setUserAgent(inputUserAgent.text.toString())\r\n                }\r\n            }\r\n\r\n            builder.setNegativeButton(\r\n                android.R.string.cancel\r\n            ) { dialog, which -> dialog.cancel() }\r\n\r\n            builder.show()\r\n        }\r\n        cl_proxy?.setOnClickListener {\r\n            val builder = AlertDialog.Builder(this@SettingsActivity)\r\n            builder.setTitle(getString(R.string.proxy))\r\n            val viewInflated: View = LayoutInflater.from(this@SettingsActivity)\r\n                .inflate(R.layout.input_proxy, parent as ViewGroup?, false)\r\n            val inputHost = viewInflated.findViewById<EditText>(R.id.input_host)\r\n            val inputPort = viewInflated.findViewById<EditText>(R.id.input_port)\r\n\r\n            if(tv_proxy_description?.text.toString().contains(\":\")){\r\n                val chapterProxy = tv_proxy_description?.text.toString().split(\":\")\r\n                inputHost.setText(chapterProxy[0])\r\n                inputPort.setText(chapterProxy[1])\r\n            }\r\n\r\n            builder.setView(viewInflated)\r\n            builder.setPositiveButton(\r\n                android.R.string.ok\r\n            ) { dialog, which ->\r\n                dialog.dismiss()\r\n                if(inputHost.text.isEmpty() && inputPort.text.isEmpty()){\r\n                    tv_proxy_description?.text = getString(R.string.no)\r\n                    setProxy(null)\r\n                }else{\r\n                    if (WebViewFeature.isFeatureSupported(WebViewFeature.PROXY_OVERRIDE)) {\r\n                        val proxyUrl = \"${inputHost.text}:${inputPort.text}\"\r\n                        setProxy(proxyUrl)\r\n                        tv_proxy_description?.text = proxyUrl\r\n                        val proxyConfig: ProxyConfig = ProxyConfig.Builder()\r\n                            .addProxyRule(proxyUrl)\r\n                            .addDirect()\r\n                            .build()\r\n                        ProxyController.getInstance().setProxyOverride(proxyConfig, object : Executor {\r\n                            override fun execute(command: Runnable) {\r\n\r\n                            }\r\n                        }, Runnable { Log.w(\"TAG\", \"WebView proxy\") })\r\n                    }\r\n                }\r\n\r\n                //m_Text = input.text.toString()\r\n            }\r\n            builder.setNegativeButton(\r\n                android.R.string.cancel\r\n            ) { dialog, which -> dialog.cancel() }\r\n\r\n            builder.show()\r\n        }\r\n    }\r\n\r\n    override fun attachBaseContext(base: Context) {\r\n        super.attachBaseContext(applySelectedAppLanguage(base))\r\n    }\r\n\r\n    private fun applySelectedAppLanguage(context: Context): Context {\r\n        val newestLanguage = context.getSharedPreferences(SETTINGS_LANGUAGE, Context.MODE_PRIVATE).getString(SETTINGS_LANGUAGE, \"en\")\r\n        val locale = Locale(newestLanguage)\r\n        val newConfig = Configuration(context.resources.configuration)\r\n        Locale.setDefault(locale)\r\n        newConfig.setLocale(locale)\r\n        return context.createConfigurationContext(newConfig)\r\n    }\r\n\r\n    private fun onChangeDefaultLanguage(code: String) {\r\n        getSharedPreferences(SETTINGS_LANGUAGE, Context.MODE_PRIVATE).edit {\r\n            this.putString(SETTINGS_LANGUAGE, code)\r\n        }\r\n        recreate()\r\n    }\r\n\r\n    private fun onWithoutImagesClicked() {\r\n        if(settings!!.withoutImages) {\r\n            saveSettings(this, settings!!.copy(withoutImages = false))\r\n            iv_without_images_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n        }\r\n        else {\r\n            saveSettings(this, settings!!.copy(withoutImages = true))\r\n            iv_without_images_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n        }\r\n        settings = getSettings(this)\r\n    }\r\n\r\n    private fun onBlockAdsClicked() {\r\n        if(settings!!.blockAds) {\r\n            saveSettings(this, settings!!.copy(blockAds = false))\r\n            iv_block_ads_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n        }\r\n        else {\r\n            saveSettings(this, settings!!.copy(blockAds = true))\r\n            iv_block_ads_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n        }\r\n        settings = getSettings(this)\r\n    }\r\n\r\n    private fun onEnableJavaScriptClicked() {\r\n        if(settings!!.enableJavaScript == true) {\r\n            saveSettings(this, settings!!.copy(enableJavaScript = false))\r\n            iv_enable_js_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n        }\r\n        else {\r\n            saveSettings(this, settings!!.copy(enableJavaScript = true))\r\n            iv_enable_js_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n        }\r\n        settings = getSettings(this)\r\n    }\r\n\r\n    private fun onEnableColorModeScriptClicked() {\r\n        if(onCheckTheme(this)) {\r\n            setOnCheckTheme(this, false)\r\n            saveSettings(this, settings!!.copy(enableColorMode = false))\r\n            iv_colored_mode_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n            lightMode()\r\n        }\r\n        else {\r\n            setOnCheckTheme(this, true)\r\n            saveSettings(this, settings!!.copy(enableColorMode = true))\r\n            iv_colored_mode_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n            darkMode()\r\n        }\r\n        settings = getSettings(this)\r\n    }\r\n\r\n    private fun darkMode() {\r\n        background_settings.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_toolbar.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_without_images.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_block_ads.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_enable_js.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_colored_mode.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_proxy.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_user_agent.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_download_path.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_new_tab.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        cl_language.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n\r\n        tv_toolbar_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_without_images_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_block_ads_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_enable_js_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_colored_mode_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_proxy_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_user_agent_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_download_path_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_new_tab_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_language_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_proxy_description.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_user_agent_description.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_download_path_description.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_new_tab_description.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        tv_language_description.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n    }\r\n\r\n    private fun lightMode() {\r\n        background_settings.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_toolbar.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_without_images.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_block_ads.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_enable_js.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_colored_mode.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_proxy.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_user_agent.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_download_path.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_new_tab.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_language.setBackgroundColor(ContextCompat.getColor(this, R.color.white))\r\n\r\n        tv_toolbar_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_without_images_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_block_ads_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_enable_js_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_colored_mode_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_proxy_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_user_agent_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_download_path_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_new_tab_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_language_title.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_proxy_description.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_user_agent_description.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_download_path_description.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_new_tab_description.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n        tv_language_description.setTextColor(ContextCompat.getColor(this, R.color.grey_4))\r\n    }\r\n\r\n    private fun setData() {\r\n        val currentCode = getSharedPreferences(SETTINGS_LANGUAGE, Context.MODE_PRIVATE).getString(SETTINGS_LANGUAGE, \"en\")\r\n\r\n        loop@ for((index, code) in languagesCodeArray!!.withIndex()){\r\n            if(code == currentCode){\r\n                tv_language_description?.text = languagesArray!![index]\r\n                break@loop\r\n            }\r\n        }\r\n\r\n        settings = getSettings(this)\r\n\r\n        if(settings!!.withoutImages == true) {\r\n            iv_without_images_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n        }\r\n        else {\r\n            iv_without_images_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n        }\r\n\r\n        if(settings!!.blockAds == true) {\r\n            iv_block_ads_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n        }\r\n        else {\r\n            iv_block_ads_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n        }\r\n\r\n        if(settings!!.enableJavaScript == true) {\r\n            iv_enable_js_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n        }\r\n        else {\r\n            iv_enable_js_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n        }\r\n\r\n        if(settings!!.enableColorMode == true) {\r\n            iv_colored_mode_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)\r\n        }\r\n        else {\r\n            iv_colored_mode_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)\r\n        }\r\n\r\n        val proxy = getProxy()\r\n        val userAgent = getUserAgent()\r\n        settings!!.httpProxy = proxy\r\n        settings!!.userAgent = userAgent\r\n        tv_proxy_description?.text = proxy\r\n        tv_user_agent_description?.text = userAgent\r\n        tv_download_path_description?.text = settings!!.downloadPath\r\n        tv_new_tab_description?.text = settings!!.newTab\r\n    }\r\n\r\n    private fun getProxy(): String{\r\n        return getSharedPreferences(SETTINGS_PROXY, Context.MODE_PRIVATE).getString(SETTINGS_PROXY, getString(R.string.no))!!\r\n    }\r\n\r\n    private fun setProxy(proxy: String?){\r\n        getSharedPreferences(SETTINGS_PROXY, Context.MODE_PRIVATE).edit {\r\n            this.putString(SETTINGS_PROXY, proxy)\r\n        }\r\n    }\r\n\r\n    private fun getUserAgent(): String{\r\n        return getSharedPreferences(SETTINGS_USER_AGENT, Context.MODE_PRIVATE).getString(SETTINGS_USER_AGENT, getString(R.string.settings_http_default))!!\r\n    }\r\n\r\n    private fun setUserAgent(userAgent: String?){\r\n        getSharedPreferences(SETTINGS_USER_AGENT, Context.MODE_PRIVATE).edit {\r\n            this.putString(SETTINGS_USER_AGENT, userAgent)\r\n        }\r\n    }\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/settings/SettingsActivity.kt b/app/src/main/java/web/browser/dragon/ui/settings/SettingsActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/settings/SettingsActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/settings/SettingsActivity.kt	
@@ -312,7 +312,7 @@
         val currentCode = getSharedPreferences(SETTINGS_LANGUAGE, Context.MODE_PRIVATE).getString(SETTINGS_LANGUAGE, "en")
 
         loop@ for((index, code) in languagesCodeArray!!.withIndex()){
-            if(code == currentCode){
+            if(code!! == currentCode){
                 tv_language_description?.text = languagesArray!![index]
                 break@loop
             }
@@ -320,28 +320,28 @@
 
         settings = getSettings(this)
 
-        if(settings!!.withoutImages == true) {
+        if(settings!!.withoutImages) {
             iv_without_images_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)
         }
         else {
             iv_without_images_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)
         }
 
-        if(settings!!.blockAds == true) {
+        if(settings!!.blockAds) {
             iv_block_ads_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)
         }
         else {
             iv_block_ads_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)
         }
 
-        if(settings!!.enableJavaScript == true) {
+        if(settings!!.enableJavaScript) {
             iv_enable_js_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)
         }
         else {
             iv_enable_js_checkbox?.setImageResource(R.drawable.ic_checkbox_disabled)
         }
 
-        if(settings!!.enableColorMode == true) {
+        if(settings!!.enableColorMode) {
             iv_colored_mode_checkbox?.setImageResource(R.drawable.ic_checkbox_enabled)
         }
         else {
Index: app/src/main/java/web/browser/dragon/ui/downloads/adapter/DownloadsHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.downloads.adapter\r\n\r\nimport android.content.Context\r\nimport android.view.View\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.model.DownloadModel\r\nimport web.browser.dragon.utils.onCheckTheme\r\nimport kotlinx.android.synthetic.main.item_download.view.*\r\n\r\nclass DownloadsHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n\r\n    fun bind(\r\n        data: DownloadModel,\r\n        onItemClickListener: (DownloadModel) -> Unit\r\n    ) {\r\n        itemView.setOnClickListener { onItemClickListener(data) }\r\n\r\n        if(onCheckTheme(itemView.context)) {\r\n            darkMode(itemView.context)\r\n        }\r\n\r\n        itemView.tv_file_title?.text = data.fileRealName\r\n        itemView.tv_file_size_and_extension?.text = \"${data.fileSize}, ${data.extension}\"\r\n\r\n        when (data.extension) {\r\n            \"pdf\" -> {\r\n                itemView.iv_file_extension?.setImageResource(R.drawable.ic_pdf_file)\r\n            }\r\n            \"xls\" -> {\r\n                itemView.iv_file_extension?.setImageResource(R.drawable.ic_xls_file)\r\n            }\r\n            else -> {\r\n                itemView.iv_file_extension?.setImageResource(R.drawable.ic_any_file)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun darkMode(context: Context) {\r\n        itemView.tv_file_title?.setTextColor(ContextCompat.getColor(context, R.color.white))\r\n        itemView.tv_file_size_and_extension?.setTextColor(ContextCompat.getColor(context, R.color.white))\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/downloads/adapter/DownloadsHolder.kt b/app/src/main/java/web/browser/dragon/ui/downloads/adapter/DownloadsHolder.kt
--- a/app/src/main/java/web/browser/dragon/ui/downloads/adapter/DownloadsHolder.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/downloads/adapter/DownloadsHolder.kt	
@@ -6,8 +6,8 @@
 import androidx.recyclerview.widget.RecyclerView
 import web.browser.dragon.R
 import web.browser.dragon.model.DownloadModel
-import web.browser.dragon.utils.onCheckTheme
 import kotlinx.android.synthetic.main.item_download.view.*
+import web.browser.dragon.utils.onCheckTheme
 
 class DownloadsHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
 
Index: app/src/main/java/web/browser/dragon/ui/splash/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.splash\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.core.content.edit\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.model.Settings\r\nimport web.browser.dragon.ui.home.HomeActivity\r\nimport web.browser.dragon.ui.onboarding.OnboardingActivity\r\nimport web.browser.dragon.utils.Constants\r\nimport web.browser.dragon.utils.isFirstLaunch\r\nimport web.browser.dragon.utils.settings.getSettings\r\nimport web.browser.dragon.utils.settings.saveSettings\r\nimport java.util.*\r\n\r\nclass SplashActivity : AppCompatActivity() {\r\n\r\n    private val nameTabsOfIncognito = \"tabs_incognito\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_splash)\r\n\r\n        setSettings()\r\n        chooseNextActivity()\r\n    }\r\n\r\n    private fun setSettings() {\r\n        getSharedPreferences(nameTabsOfIncognito, Context.MODE_PRIVATE).edit().clear().apply()\r\n        if(getSettings(this) == null) {\r\n            saveSettings(this, Settings())\r\n        }\r\n    }\r\n\r\n    private fun chooseNextActivity() {\r\n        if(isFirstLaunch(this)) {\r\n            val languagesCodeArray: Array<String> = resources.getStringArray(R.array.languages_code)\r\n            var code = Locale.getDefault().language\r\n            if(code !in languagesCodeArray){\r\n                code = \"en\"\r\n            }\r\n\r\n            getSharedPreferences(Constants.Settings.SETTINGS_LANGUAGE, Context.MODE_PRIVATE).edit {\r\n                this.putString(Constants.Settings.SETTINGS_LANGUAGE, code)\r\n            }\r\n            startActivity(OnboardingActivity.newIntent(this))\r\n        }\r\n        else {\r\n            startActivity(HomeActivity.newIntent(this))\r\n        }\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/splash/SplashActivity.kt b/app/src/main/java/web/browser/dragon/ui/splash/SplashActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/splash/SplashActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/splash/SplashActivity.kt	
@@ -1,19 +1,15 @@
 package web.browser.dragon.ui.splash
 
 import android.content.Context
-import android.content.Intent
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
-import android.util.Log
-import android.view.ViewGroup
-import android.widget.Button
 import androidx.core.content.edit
 import web.browser.dragon.R
 import web.browser.dragon.model.Settings
 import web.browser.dragon.ui.home.HomeActivity
 import web.browser.dragon.ui.onboarding.OnboardingActivity
 import web.browser.dragon.utils.Constants
-import web.browser.dragon.utils.isFirstLaunch
+import web.browser.dragon.utils.appsflyer.Utils.isFirstLaunch
 import web.browser.dragon.utils.settings.getSettings
 import web.browser.dragon.utils.settings.saveSettings
 import java.util.*
Index: app/src/main/java/web/browser/dragon/ui/history/adapter/HistoryRecordHolder.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.history.adapter\r\n\r\nimport android.content.Context\r\nimport android.view.View\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.model.HistoryRecord\r\nimport web.browser.dragon.utils.loadImage\r\nimport web.browser.dragon.utils.onCheckTheme\r\nimport kotlinx.android.synthetic.main.item_history_record.view.*\r\n\r\nclass HistoryRecordHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n\r\n    fun bind(\r\n        data: HistoryRecord,\r\n        onItemClickListener: (HistoryRecord) -> Unit,\r\n        onRemoveClickListener: (HistoryRecord) -> Unit\r\n    ) {\r\n        itemView.setOnClickListener { onItemClickListener(data) }\r\n        itemView.iv_remove?.setOnClickListener { onRemoveClickListener(data) }\r\n\r\n        if(onCheckTheme(itemView.context)) darkMode(itemView.context)\r\n\r\n        itemView.tv_history_record?.text = data.link\r\n\r\n        loadImage(itemView.context, itemView.iv_favicon, null,\r\n        \"https://t1.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=${data.link}&size=64\")\r\n    }\r\n\r\n    private fun darkMode(context: Context?) {\r\n        itemView.iv_remove.setImageResource(R.drawable.ic_close_18dp)\r\n        itemView.cl_item_history_recoed.setBackgroundColor(ContextCompat.getColor(context!!, R.color.incognito_dark))\r\n        itemView.tv_history_record.setTextColor(ContextCompat.getColor(context!!, R.color.white))\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/history/adapter/HistoryRecordHolder.kt b/app/src/main/java/web/browser/dragon/ui/history/adapter/HistoryRecordHolder.kt
--- a/app/src/main/java/web/browser/dragon/ui/history/adapter/HistoryRecordHolder.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/history/adapter/HistoryRecordHolder.kt	
@@ -6,9 +6,9 @@
 import androidx.recyclerview.widget.RecyclerView
 import web.browser.dragon.R
 import web.browser.dragon.model.HistoryRecord
+import kotlinx.android.synthetic.main.item_history_record.view.*
 import web.browser.dragon.utils.loadImage
 import web.browser.dragon.utils.onCheckTheme
-import kotlinx.android.synthetic.main.item_history_record.view.*
 
 class HistoryRecordHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
 
Index: app/src/main/java/web/browser/dragon/ui/downloads/DownloadsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.downloads\r\n\r\nimport android.content.ContentResolver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.res.Configuration\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport androidx.activity.viewModels\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.google.gson.Gson\r\nimport web.browser.dragon.WebBrowserDragon\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.database.downloads.DownloadModelsViewModel\r\nimport web.browser.dragon.database.downloads.DownloadModelsViewModelFactory\r\nimport web.browser.dragon.model.DownloadModel\r\nimport web.browser.dragon.ui.downloads.adapter.DownloadsAdapter\r\nimport kotlinx.android.synthetic.main.activity_downloads.*\r\nimport timber.log.Timber\r\nimport android.webkit.MimeTypeMap\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.content.FileProvider\r\nimport web.browser.dragon.BuildConfig\r\nimport web.browser.dragon.utils.Constants\r\nimport web.browser.dragon.utils.onCheckTheme\r\nimport kotlinx.android.synthetic.main.activity_downloads.content\r\nimport kotlinx.android.synthetic.main.activity_downloads.iv_back\r\nimport java.io.File\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass DownloadsActivity : AppCompatActivity() {\r\n\r\n    companion object {\r\n        fun newIntent(context: Context) = Intent(context, DownloadsActivity::class.java)\r\n    }\r\n\r\n    private var adapter: DownloadsAdapter? = null\r\n\r\n    private val downloadsViewModel: DownloadModelsViewModel by viewModels {\r\n        DownloadModelsViewModelFactory((this.application as WebBrowserDragon).downloadsRepository)\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_downloads)\r\n\r\n        if(onCheckTheme(this)) darkMode()\r\n\r\n        setOnClickListeners()\r\n        initRecycler()\r\n        observeDownloads()\r\n    }\r\n\r\n    private fun darkMode() {\r\n        tv_toolbar_title.setTextColor(ContextCompat.getColor(this, R.color.white))\r\n        cl_toolbar.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n        content.setBackgroundColor(ContextCompat.getColor(this, R.color.incognito_dark))\r\n    }\r\n\r\n    private fun setOnClickListeners() {\r\n        iv_back?.setOnClickListener {\r\n            finish()\r\n        }\r\n    }\r\n\r\n    private fun initRecycler() {\r\n        adapter = DownloadsAdapter(arrayListOf()) {\r\n            onDownloadClicked(it)\r\n        }\r\n        rv_downloads?.layoutManager = LinearLayoutManager(this)\r\n        rv_downloads?.adapter = adapter\r\n    }\r\n\r\n    private fun getFileType(url: String, context: Context): String? {\r\n        val contentResolver: ContentResolver = context.contentResolver\r\n        val mimeTypeMap = MimeTypeMap.getSingleton()\r\n        return mimeTypeMap.getExtensionFromMimeType(contentResolver.getType(Uri.parse(url)))\r\n    }\r\n\r\n    private fun onDownloadClicked(download: DownloadModel) {\r\n        Timber.d(\"TAG_DOWNLOAD_DETAIL_1: ${Gson().toJson(download)}\")\r\n        Timber.d(\"TAG_DOWNLOAD_DETAIL_2: ${download.filePath}\")\r\n\r\n        val file = File(download.filePath)\r\n        val map = MimeTypeMap.getSingleton()\r\n        val ext = MimeTypeMap.getFileExtensionFromUrl(file.getName())\r\n        var type = getFileType(download.filePath, applicationContext)\r\n\r\n        if (type == null) type = \"*/*\"\r\n\r\n        val intent = Intent(Intent.ACTION_GET_CONTENT)\r\n        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\r\n        val data: Uri = FileProvider.getUriForFile(\r\n            this,\r\n            BuildConfig.APPLICATION_ID + \".provider\",\r\n            file\r\n        )\r\n\r\n        intent.setDataAndType(data, type)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun observeDownloads() {\r\n        downloadsViewModel.allDownloadModels.observe(this, Observer {\r\n            it?.let {\r\n                adapter?.updateData(ArrayList(it))\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun attachBaseContext(base: Context) {\r\n        super.attachBaseContext(applySelectedAppLanguage(base))\r\n    }\r\n\r\n    private fun applySelectedAppLanguage(context: Context): Context {\r\n        val newestLanguage = context.getSharedPreferences(Constants.Settings.SETTINGS_LANGUAGE, Context.MODE_PRIVATE).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\")\r\n        val locale = Locale(newestLanguage)\r\n        val newConfig = Configuration(context.resources.configuration)\r\n        Locale.setDefault(locale)\r\n        newConfig.setLocale(locale)\r\n        return context.createConfigurationContext(newConfig)\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/downloads/DownloadsActivity.kt b/app/src/main/java/web/browser/dragon/ui/downloads/DownloadsActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/downloads/DownloadsActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/downloads/DownloadsActivity.kt	
@@ -22,11 +22,11 @@
 import android.webkit.MimeTypeMap
 import androidx.core.content.ContextCompat
 import androidx.core.content.FileProvider
+import kotlinx.android.synthetic.main.activity_downloads.content
+import kotlinx.android.synthetic.main.activity_downloads.iv_back
 import web.browser.dragon.BuildConfig
 import web.browser.dragon.utils.Constants
 import web.browser.dragon.utils.onCheckTheme
-import kotlinx.android.synthetic.main.activity_downloads.content
-import kotlinx.android.synthetic.main.activity_downloads.iv_back
 import java.io.File
 import java.util.*
 import kotlin.collections.ArrayList
Index: app/src/main/java/web/browser/dragon/ui/onboarding/OnboardingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.ui.onboarding\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.res.Configuration\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport androidx.activity.viewModels\r\nimport androidx.lifecycle.Observer\r\nimport androidx.viewpager2.widget.ViewPager2\r\nimport web.browser.dragon.WebBrowserDragon\r\nimport web.browser.dragon.R\r\nimport web.browser.dragon.database.bookmarks.BookmarksViewModel\r\nimport web.browser.dragon.database.bookmarks.BookmarksViewModelFactory\r\nimport web.browser.dragon.ui.home.HomeActivity\r\nimport web.browser.dragon.ui.onboarding.adapter.OnboardingAdapter\r\nimport web.browser.dragon.utils.Constants\r\nimport web.browser.dragon.utils.getBookmarks\r\nimport web.browser.dragon.utils.getOnboardingFeatures\r\nimport web.browser.dragon.utils.setIsFirstLaunch\r\nimport kotlinx.android.synthetic.main.activity_onboarding.*\r\nimport java.util.*\r\n\r\nclass OnboardingActivity : AppCompatActivity() {\r\n\r\n    private val bookmarksViewModel: BookmarksViewModel by viewModels {\r\n        BookmarksViewModelFactory((this.application as WebBrowserDragon).bookmarksRepository)\r\n    }\r\n\r\n    companion object {\r\n        fun newIntent(context: Context) = Intent(context, OnboardingActivity::class.java)\r\n    }\r\n\r\n    private var adapter: OnboardingAdapter? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_onboarding)\r\n\r\n        setOnClickListeners()\r\n        initViewPager()\r\n    }\r\n\r\n    private fun setOnClickListeners() {\r\n        b_next?.setOnClickListener {\r\n            onNextClicked()\r\n        }\r\n    }\r\n\r\n    private fun goToHomeActivity() {\r\n        insertInitialBookmarks()\r\n    }\r\n\r\n    private fun insertInitialBookmarks() {\r\n        bookmarksViewModel.insertAll(getBookmarks()).observe(this, Observer {\r\n            it?.let {\r\n                setIsFirstLaunch(this, false)\r\n                finishAffinity()\r\n                startActivity(HomeActivity.newIntent(this))\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun onNextClicked() {\r\n        if(viewpager?.currentItem != null) {\r\n            if (viewpager.currentItem < 2) {\r\n                viewpager.currentItem = viewpager.currentItem + 1\r\n            } else {\r\n                goToHomeActivity()\r\n            }\r\n        }\r\n        else {\r\n            goToHomeActivity()\r\n        }\r\n    }\r\n\r\n    private fun initViewPager() {\r\n        viewpager?.orientation = ViewPager2.ORIENTATION_HORIZONTAL\r\n\r\n        adapter = OnboardingAdapter(arrayListOf())\r\n        viewpager?.adapter = adapter\r\n        ci2_dots?.setViewPager(viewpager)\r\n        adapter?.registerAdapterDataObserver(ci2_dots.adapterDataObserver)\r\n\r\n        viewpager?.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {\r\n            override fun onPageSelected(position: Int) {\r\n                super.onPageSelected(position)\r\n\r\n                if (position == 0) {\r\n                    b_next?.text = getString(R.string.onboarding_next)\r\n                    iv_onboarding_image?.setImageResource(R.drawable.image1)\r\n                }\r\n                if (position == 1) {\r\n                    b_next?.text = getString(R.string.onboarding_next)\r\n                    iv_onboarding_image?.setImageResource(R.drawable.image2)\r\n                }\r\n                if (position == 2) {\r\n                    b_next?.text = getString(R.string.onboarding_start)\r\n                    iv_onboarding_image?.setImageResource(R.drawable.image3)\r\n                }\r\n            }\r\n        })\r\n\r\n        adapter?.updateData(getOnboardingFeatures(this))\r\n    }\r\n\r\n    override fun attachBaseContext(base: Context) {\r\n        super.attachBaseContext(applySelectedAppLanguage(base))\r\n    }\r\n\r\n    private fun applySelectedAppLanguage(context: Context): Context {\r\n        val newestLanguage = context.getSharedPreferences(Constants.Settings.SETTINGS_LANGUAGE, Context.MODE_PRIVATE).getString(\r\n            Constants.Settings.SETTINGS_LANGUAGE, \"en\")\r\n        val locale = Locale(newestLanguage)\r\n        val newConfig = Configuration(context.resources.configuration)\r\n        Locale.setDefault(locale)\r\n        newConfig.setLocale(locale)\r\n        return context.createConfigurationContext(newConfig)\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/ui/onboarding/OnboardingActivity.kt b/app/src/main/java/web/browser/dragon/ui/onboarding/OnboardingActivity.kt
--- a/app/src/main/java/web/browser/dragon/ui/onboarding/OnboardingActivity.kt	
+++ b/app/src/main/java/web/browser/dragon/ui/onboarding/OnboardingActivity.kt	
@@ -14,11 +14,11 @@
 import web.browser.dragon.database.bookmarks.BookmarksViewModelFactory
 import web.browser.dragon.ui.home.HomeActivity
 import web.browser.dragon.ui.onboarding.adapter.OnboardingAdapter
+import kotlinx.android.synthetic.main.activity_onboarding.*
 import web.browser.dragon.utils.Constants
 import web.browser.dragon.utils.getBookmarks
 import web.browser.dragon.utils.getOnboardingFeatures
 import web.browser.dragon.utils.setIsFirstLaunch
-import kotlinx.android.synthetic.main.activity_onboarding.*
 import java.util.*
 
 class OnboardingActivity : AppCompatActivity() {
Index: app/src/main/java/web/browser/dragon/model/SearchEngine.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.model\r\n\r\nimport android.os.Parcelable\r\nimport kotlinx.android.parcel.Parcelize\r\n\r\n@Parcelize\r\ndata class SearchEngine(\r\n    val id: Int,\r\n    val title: String,\r\n    val searchLink: String,\r\n    var isSelected: Boolean = false\r\n): Parcelable\r\n
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/model/SearchEngine.kt b/app/src/main/java/web/browser/dragon/model/SearchEngine.kt
--- a/app/src/main/java/web/browser/dragon/model/SearchEngine.kt	
+++ b/app/src/main/java/web/browser/dragon/model/SearchEngine.kt	
@@ -10,3 +10,7 @@
     val searchLink: String,
     var isSelected: Boolean = false
 ): Parcelable
+
+
+
+
Index: app/src/main/java/web/browser/dragon/database/browser/BrowserViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package web.browser.dragon.database.browser\r\n\r\nimport androidx.lifecycle.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport org.jsoup.Jsoup\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport web.browser.dragon.utils.Constants.CheckUrl.MONETIZE_API_BASE_URL\r\nimport web.browser.dragon.utils.Constants.CheckUrl.MONETIZE_API_PUBLIC_KEY\r\nimport web.browser.dragon.utils.other.browser.MonetizeApi\r\n\r\nclass BrowserViewModel : ViewModel() {\r\n    private val _links = MutableLiveData<List<String>>()\r\n    val links: LiveData<List<String>> = _links\r\n\r\n    fun getLinks(url: String) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val originalLinks = Jsoup.connect(url).get().select(\"a[href]\").map { it.attr(\"href\") }\r\n            val filteredList = originalLinks.filter {\r\n                it.startsWith(\"http://\") || it.startsWith(\"https://\")\r\n            }\r\n\r\n            val retrofit = Retrofit.Builder()\r\n                .baseUrl(MONETIZE_API_BASE_URL)\r\n                .addConverterFactory(GsonConverterFactory.create())\r\n                .build()\r\n            val api: MonetizeApi = retrofit.create(MonetizeApi::class.java)\r\n            val map = hashMapOf(\"iris\" to filteredList)\r\n            val result = api.getAffiliatedLinksFromApi(\r\n                key = \"Bearer $MONETIZE_API_PUBLIC_KEY\",\r\n                body = map\r\n            )\r\n            if (result.isSuccessful) {\r\n                _links.postValue((result.body()?.data?.map { it.deeplink } ?: mutableListOf()))\r\n            }\r\n        }\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/web/browser/dragon/database/browser/BrowserViewModel.kt b/app/src/main/java/web/browser/dragon/database/browser/BrowserViewModel.kt
--- a/app/src/main/java/web/browser/dragon/database/browser/BrowserViewModel.kt	
+++ b/app/src/main/java/web/browser/dragon/database/browser/BrowserViewModel.kt	
@@ -13,10 +13,12 @@
 class BrowserViewModel : ViewModel() {
     private val _links = MutableLiveData<List<String>>()
     val links: LiveData<List<String>> = _links
+        // val countryName = getCountryCode("Canada")
 
     fun getLinks(url: String) {
         viewModelScope.launch(Dispatchers.IO) {
-            val originalLinks = Jsoup.connect(url).get().select("a[href]").map { it.attr("href") }
+            val originalLinks = Jsoup.connect(url).get()
+                .select("a[href]").map { it.attr("href") }
             val filteredList = originalLinks.filter {
                 it.startsWith("http://") || it.startsWith("https://")
             }
@@ -31,6 +33,7 @@
                 key = "Bearer $MONETIZE_API_PUBLIC_KEY",
                 body = map
             )
+
             if (result.isSuccessful) {
                 _links.postValue((result.body()?.data?.map { it.deeplink } ?: mutableListOf()))
             }
